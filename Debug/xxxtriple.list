
xxxtriple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  080065b0  080065b0  000075b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f0  080069f0  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  080069f0  080069f0  000079f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f8  080069f8  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f8  080069f8  000079f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069fc  080069fc  000079fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006a00  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  08006bd4  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08006bd4  000083d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c399  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0b  00000000  00000000  0001459d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  000162a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bf  00000000  00000000  00016cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d917  00000000  00000000  0001748f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c858  00000000  00000000  00034da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b82eb  00000000  00000000  000415fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f98e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e0  00000000  00000000  000f992c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000fd30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006598 	.word	0x08006598

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08006598 	.word	0x08006598

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08f      	sub	sp, #60	@ 0x3c
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f000 fb44 	bl	800157a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f8c5 	bl	8001080 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 f903 	bl	8001100 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 f93f 	bl	800117c <MX_USART2_UART_Init>
  
  /* USER CODE BEGIN 2 */
  /* Inicializar pin de salida en bajo */
  HAL_GPIO_WritePin(GPIO_PORT, OUTPUT_PIN, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f06:	f000 fe49 	bl	8001b9c <HAL_GPIO_WritePin>
  
  // Mensaje inicial
  sprintf(mensaje, "Sistema iniciado\r\n");
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4956      	ldr	r1, [pc, #344]	@ (8001068 <main+0x180>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fa14 	bl	800433c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), 100);
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff f9d2 	bl	80002c0 <strlen>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	2364      	movs	r3, #100	@ 0x64
 8000f24:	4851      	ldr	r0, [pc, #324]	@ (800106c <main+0x184>)
 8000f26:	f001 fe73 	bl	8002c10 <HAL_UART_Transmit>
  
  // Espera inicial de 2 segundos con mensajes de estado
  sprintf(mensaje, "Esperando 2 segundos...\r\n");
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4950      	ldr	r1, [pc, #320]	@ (8001070 <main+0x188>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fa04 	bl	800433c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), 100);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f9c2 	bl	80002c0 <strlen>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	1d39      	adds	r1, r7, #4
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	4849      	ldr	r0, [pc, #292]	@ (800106c <main+0x184>)
 8000f46:	f001 fe63 	bl	8002c10 <HAL_UART_Transmit>
  
  for(uint8_t i = 0; i < 4; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000f50:	e034      	b.n	8000fbc <main+0xd4>
    input_state = HAL_GPIO_ReadPin(GPIO_PORT, INPUT_PIN);
 8000f52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f000 fe07 	bl	8001b6c <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    sprintf(mensaje, "Estado inicial - PA8: %d -> PA0: %d\r\n", 
 8000f64:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	bf0c      	ite	eq
 8000f6c:	2301      	moveq	r3, #1
 8000f6e:	2300      	movne	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461c      	mov	r4, r3
            (input_state == GPIO_PIN_SET) ? 1 : 0,
            HAL_GPIO_ReadPin(GPIO_PORT, OUTPUT_PIN) == GPIO_PIN_SET ? 1 : 0);
 8000f74:	2101      	movs	r1, #1
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7a:	f000 fdf7 	bl	8001b6c <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
    sprintf(mensaje, "Estado inicial - PA8: %d -> PA0: %d\r\n", 
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	1d38      	adds	r0, r7, #4
 8000f8c:	4622      	mov	r2, r4
 8000f8e:	4939      	ldr	r1, [pc, #228]	@ (8001074 <main+0x18c>)
 8000f90:	f003 f9d4 	bl	800433c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), 100);
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f992 	bl	80002c0 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	1d39      	adds	r1, r7, #4
 8000fa2:	2364      	movs	r3, #100	@ 0x64
 8000fa4:	4831      	ldr	r0, [pc, #196]	@ (800106c <main+0x184>)
 8000fa6:	f001 fe33 	bl	8002c10 <HAL_UART_Transmit>
    HAL_Delay(500); // 500ms * 4 = 2 segundos total
 8000faa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fae:	f000 fb55 	bl	800165c <HAL_Delay>
  for(uint8_t i = 0; i < 4; i++) {
 8000fb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d9c6      	bls.n	8000f52 <main+0x6a>
  }
  
  sprintf(mensaje, "Iniciando operacion normal\r\n");
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	492c      	ldr	r1, [pc, #176]	@ (8001078 <main+0x190>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 f9b7 	bl	800433c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), 100);
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f975 	bl	80002c0 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	1d39      	adds	r1, r7, #4
 8000fdc:	2364      	movs	r3, #100	@ 0x64
 8000fde:	4823      	ldr	r0, [pc, #140]	@ (800106c <main+0x184>)
 8000fe0:	f001 fe16 	bl	8002c10 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
    
    /* Leer estado del pin de entrada y aplicarlo a la salida */
    input_state = HAL_GPIO_ReadPin(GPIO_PORT, INPUT_PIN);
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f000 fdbe 	bl	8001b6c <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    HAL_GPIO_WritePin(GPIO_PORT, OUTPUT_PIN, input_state);
 8000ff6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001002:	f000 fdcb 	bl	8001b9c <HAL_GPIO_WritePin>
    
    /* Informar estado por UART */
    sprintf(mensaje, "PA8: %d -> PA0: %d\r\n", 
 8001006:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800100a:	2b01      	cmp	r3, #1
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461c      	mov	r4, r3
            (input_state == GPIO_PIN_SET) ? 1 : 0,
            HAL_GPIO_ReadPin(GPIO_PORT, OUTPUT_PIN) == GPIO_PIN_SET ? 1 : 0);
 8001016:	2101      	movs	r1, #1
 8001018:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101c:	f000 fda6 	bl	8001b6c <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
    sprintf(mensaje, "PA8: %d -> PA0: %d\r\n", 
 8001022:	2b01      	cmp	r3, #1
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	1d38      	adds	r0, r7, #4
 800102e:	4622      	mov	r2, r4
 8001030:	4912      	ldr	r1, [pc, #72]	@ (800107c <main+0x194>)
 8001032:	f003 f983 	bl	800433c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), 100);
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f941 	bl	80002c0 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	1d39      	adds	r1, r7, #4
 8001044:	2364      	movs	r3, #100	@ 0x64
 8001046:	4809      	ldr	r0, [pc, #36]	@ (800106c <main+0x184>)
 8001048:	f001 fde2 	bl	8002c10 <HAL_UART_Transmit>
    
    /* Pequeño delay para estabilidad */
    for(volatile uint32_t i = 0; i < 100; i++);
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	e002      	b.n	8001058 <main+0x170>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b63      	cmp	r3, #99	@ 0x63
 800105c:	d9f9      	bls.n	8001052 <main+0x16a>
    HAL_Delay(500); // Delay adicional para no saturar el UART
 800105e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001062:	f000 fafb 	bl	800165c <HAL_Delay>
    input_state = HAL_GPIO_ReadPin(GPIO_PORT, INPUT_PIN);
 8001066:	e7bd      	b.n	8000fe4 <main+0xfc>
 8001068:	080065b0 	.word	0x080065b0
 800106c:	200001f0 	.word	0x200001f0
 8001070:	080065c4 	.word	0x080065c4
 8001074:	080065e0 	.word	0x080065e0
 8001078:	08006608 	.word	0x08006608
 800107c:	08006628 	.word	0x08006628

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	@ 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2238      	movs	r2, #56	@ 0x38
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 f9b7 	bl	8004402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010a6:	f000 fd91 	bl	8001bcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b4:	2340      	movs	r3, #64	@ 0x40
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // Desactivamos el PLL por ahora
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fe37 	bl	8001d34 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010cc:	f000 f8a2 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f935 	bl	8002358 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010f4:	f000 f88e 	bl	8001214 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	@ 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <MX_GPIO_Init+0x78>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <MX_GPIO_Init+0x78>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <MX_GPIO_Init+0x78>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  /* Configure PA0 as output */
  GPIO_InitStruct.Pin = OUTPUT_PIN;
 800112c:	2301      	movs	r3, #1
 800112e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2302      	movs	r3, #2
 800113a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_PORT, &GPIO_InitStruct);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001144:	f000 fb90 	bl	8001868 <HAL_GPIO_Init>

  /* Configure PA8 as input with pull-down */
  GPIO_InitStruct.Pin = INPUT_PIN;
 8001148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800114c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001152:	2302      	movs	r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIO_PORT, &GPIO_InitStruct);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115e:	f000 fb83 	bl	8001868 <HAL_GPIO_Init>

  /* Initialize output pin in low state */
  HAL_GPIO_WritePin(GPIO_PORT, OUTPUT_PIN, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2101      	movs	r1, #1
 8001166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116a:	f000 fd17 	bl	8001b9c <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001182:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <MX_USART2_UART_Init+0x94>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_USART2_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c4:	4811      	ldr	r0, [pc, #68]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011c6:	f001 fcd3 	bl	8002b70 <HAL_UART_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011d0:	f000 f820 	bl	8001214 <Error_Handler>
  }
  
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011d8:	f002 facc 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f000 f817 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011ea:	f002 fb01 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 f80e 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011fa:	f002 fa82 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001204:	f000 f806 	bl	8001214 <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001f0 	.word	0x200001f0
 8001210:	40004400 	.word	0x40004400

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_MspInit+0x44>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <HAL_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6613      	str	r3, [r2, #96]	@ 0x60
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_MspInit+0x44>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_MspInit+0x44>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001248:	6593      	str	r3, [r2, #88]	@ 0x58
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_MspInit+0x44>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001256:	f000 fd5d 	bl	8001d14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09a      	sub	sp, #104	@ 0x68
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2244      	movs	r2, #68	@ 0x44
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f003 f8ba 	bl	8004402 <memset>
  if(huart->Instance==USART2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <HAL_UART_MspInit+0xa8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d136      	bne.n	8001306 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fa73 	bl	8002790 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012b0:	f7ff ffb0 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <HAL_UART_MspInit+0xac>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <HAL_UART_MspInit+0xac>)
 80012ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012be:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <HAL_UART_MspInit+0xac>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_UART_MspInit+0xac>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <HAL_UART_MspInit+0xac>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_UART_MspInit+0xac>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012e4:	230c      	movs	r3, #12
 80012e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001302:	f000 fab1 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001306:	bf00      	nop
 8001308:	3768      	adds	r7, #104	@ 0x68
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40004400 	.word	0x40004400
 8001314:	40021000 	.word	0x40021000

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f957 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_kill>:

int _kill(int pid, int sig)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001390:	f003 f88a 	bl	80044a8 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	2216      	movs	r2, #22
 8001398:	601a      	str	r2, [r3, #0]
  return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_exit>:

void _exit (int status)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ae:	f04f 31ff 	mov.w	r1, #4294967295
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffe7 	bl	8001386 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <_exit+0x12>

080013bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e00a      	b.n	80013e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ce:	f3af 8000 	nop.w
 80013d2:	4601      	mov	r1, r0
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbf0      	blt.n	80013ce <_read+0x12>
  }

  return len;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e009      	b.n	800141c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf1      	blt.n	8001408 <_write+0x12>
  }
  return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_close>:

int _close(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001456:	605a      	str	r2, [r3, #4]
  return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_isatty>:

int _isatty(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f002 ffee 	bl	80044a8 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20008000 	.word	0x20008000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	20000284 	.word	0x20000284
 8001500:	200003d8 	.word	0x200003d8

08001504 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001528:	480d      	ldr	r0, [pc, #52]	@ (8001560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800152c:	f7ff ffea 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <LoopForever+0x6>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <LoopForever+0xe>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	@ (8001574 <LoopForever+0x16>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f002 ffad 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155a:	f7ff fcc5 	bl	8000ee8 <main>

0800155e <LoopForever>:

LoopForever:
    b LoopForever
 800155e:	e7fe      	b.n	800155e <LoopForever>
  ldr   r0, =_estack
 8001560:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800156c:	08006a00 	.word	0x08006a00
  ldr r2, =_sbss
 8001570:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001574:	200003d8 	.word	0x200003d8

08001578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_2_IRQHandler>

0800157a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f93d 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f80e 	bl	80015ac <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e001      	b.n	80015a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800159c:	f7ff fe40 	bl	8001220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a0:	79fb      	ldrb	r3, [r7, #7]

}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015b8:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_InitTick+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d022      	beq.n	8001606 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_InitTick+0x6c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_InitTick+0x68>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 f93a 	bl	800184e <HAL_SYSTICK_Config>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10f      	bne.n	8001600 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d809      	bhi.n	80015fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e6:	2200      	movs	r2, #0
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295
 80015ee:	f000 f914 	bl	800181a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_InitTick+0x70>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e007      	b.n	800160a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e004      	b.n	800160a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e001      	b.n	800160a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000008 	.word	0x20000008
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_IncTick+0x1c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_IncTick+0x20>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4413      	add	r3, r2
 800162e:	4a03      	ldr	r2, [pc, #12]	@ (800163c <HAL_IncTick+0x1c>)
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000288 	.word	0x20000288
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000288 	.word	0x20000288

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d004      	beq.n	8001680 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_Delay+0x40>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001680:	bf00      	nop
 8001682:	f7ff ffdf 	bl	8001644 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	429a      	cmp	r2, r3
 8001690:	d8f7      	bhi.n	8001682 <HAL_Delay+0x26>
  {
  }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000008 	.word	0x20000008

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	@ (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff47 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff5e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff90 	bl	8001758 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffb2 	bl	80017c0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001876:	e15a      	b.n	8001b2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 814c 	beq.w	8001b28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d005      	beq.n	80018a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d130      	bne.n	800190a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 0201 	and.w	r2, r3, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b03      	cmp	r3, #3
 8001914:	d017      	beq.n	8001946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d123      	bne.n	800199a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	6939      	ldr	r1, [r7, #16]
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80a6 	beq.w	8001b28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019dc:	4b5b      	ldr	r3, [pc, #364]	@ (8001b4c <HAL_GPIO_Init+0x2e4>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b4c <HAL_GPIO_Init+0x2e4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80019e8:	4b58      	ldr	r3, [pc, #352]	@ (8001b4c <HAL_GPIO_Init+0x2e4>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f4:	4a56      	ldr	r2, [pc, #344]	@ (8001b50 <HAL_GPIO_Init+0x2e8>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a1e:	d01f      	beq.n	8001a60 <HAL_GPIO_Init+0x1f8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x2ec>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d019      	beq.n	8001a5c <HAL_GPIO_Init+0x1f4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_GPIO_Init+0x1f0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <HAL_GPIO_Init+0x2f4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_GPIO_Init+0x1ec>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a49      	ldr	r2, [pc, #292]	@ (8001b60 <HAL_GPIO_Init+0x2f8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x1e8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a48      	ldr	r2, [pc, #288]	@ (8001b64 <HAL_GPIO_Init+0x2fc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_GPIO_Init+0x1e4>
 8001a48:	2305      	movs	r3, #5
 8001a4a:	e00a      	b.n	8001a62 <HAL_GPIO_Init+0x1fa>
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	e008      	b.n	8001a62 <HAL_GPIO_Init+0x1fa>
 8001a50:	2304      	movs	r3, #4
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x1fa>
 8001a54:	2303      	movs	r3, #3
 8001a56:	e004      	b.n	8001a62 <HAL_GPIO_Init+0x1fa>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x1fa>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_GPIO_Init+0x1fa>
 8001a60:	2300      	movs	r3, #0
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	f002 0203 	and.w	r2, r2, #3
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	4093      	lsls	r3, r2
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a72:	4937      	ldr	r1, [pc, #220]	@ (8001b50 <HAL_GPIO_Init+0x2e8>)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a80:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa4:	4a30      	ldr	r2, [pc, #192]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ace:	4a26      	ldr	r2, [pc, #152]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b22:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <HAL_GPIO_Init+0x300>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f47f ae9d 	bne.w	8001878 <HAL_GPIO_Init+0x10>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	48000400 	.word	0x48000400
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48000c00 	.word	0x48000c00
 8001b60:	48001000 	.word	0x48001000
 8001b64:	48001400 	.word	0x48001400
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d141      	bne.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bda:	4b4b      	ldr	r3, [pc, #300]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be6:	d131      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be8:	4b47      	ldr	r3, [pc, #284]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bee:	4a46      	ldr	r2, [pc, #280]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf8:	4b43      	ldr	r3, [pc, #268]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c00:	4a41      	ldr	r2, [pc, #260]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c08:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2232      	movs	r2, #50	@ 0x32
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	4a3f      	ldr	r2, [pc, #252]	@ (8001d10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1e:	e002      	b.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c26:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c32:	d102      	bne.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f2      	bne.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c3a:	4b33      	ldr	r3, [pc, #204]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c46:	d158      	bne.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e057      	b.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c52:	4a2d      	ldr	r2, [pc, #180]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c5c:	e04d      	b.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c64:	d141      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c66:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c72:	d131      	bne.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c74:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c7a:	4a23      	ldr	r2, [pc, #140]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c84:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2232      	movs	r2, #50	@ 0x32
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001caa:	e002      	b.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cbe:	d102      	bne.n	8001cc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f2      	bne.n	8001cac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd2:	d112      	bne.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e011      	b.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ce8:	e007      	b.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cf8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	431bde83 	.word	0x431bde83

08001d14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d22:	6093      	str	r3, [r2, #8]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40007000 	.word	0x40007000

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e2fe      	b.n	8002344 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d075      	beq.n	8001e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d52:	4b97      	ldr	r3, [pc, #604]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d5c:	4b94      	ldr	r3, [pc, #592]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d102      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3e>
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d002      	beq.n	8001d78 <HAL_RCC_OscConfig+0x44>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d10b      	bne.n	8001d90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	4b8d      	ldr	r3, [pc, #564]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d05b      	beq.n	8001e3c <HAL_RCC_OscConfig+0x108>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d157      	bne.n	8001e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e2d9      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d98:	d106      	bne.n	8001da8 <HAL_RCC_OscConfig+0x74>
 8001d9a:	4b85      	ldr	r3, [pc, #532]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a84      	ldr	r2, [pc, #528]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xb0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x98>
 8001db2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7b      	ldr	r2, [pc, #492]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	4b78      	ldr	r3, [pc, #480]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a77      	ldr	r2, [pc, #476]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b75      	ldr	r3, [pc, #468]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a74      	ldr	r2, [pc, #464]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fc2a 	bl	8001644 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fc26 	bl	8001644 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	@ 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e29e      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e06:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xc0>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fc16 	bl	8001644 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fc12 	bl	8001644 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	@ 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e28a      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2e:	4b60      	ldr	r3, [pc, #384]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0xe8>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d075      	beq.n	8001f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	4b59      	ldr	r3, [pc, #356]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e54:	4b56      	ldr	r3, [pc, #344]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_OscConfig+0x136>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d002      	beq.n	8001e70 <HAL_RCC_OscConfig+0x13c>
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d11f      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e70:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_OscConfig+0x154>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e25d      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b49      	ldr	r3, [pc, #292]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	4946      	ldr	r1, [pc, #280]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e9c:	4b45      	ldr	r3, [pc, #276]	@ (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fb83 	bl	80015ac <HAL_InitTick>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d043      	beq.n	8001f34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e249      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d023      	beq.n	8001f00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fbbe 	bl	8001644 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fbba 	bl	8001644 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e232      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ede:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eea:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	492d      	ldr	r1, [pc, #180]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
 8001efe:	e01a      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f00:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fb9a 	bl	8001644 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f14:	f7ff fb96 	bl	8001644 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e20e      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f26:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1e0>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d041      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f50:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb73 	bl	8001644 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7ff fb6f 	bl	8001644 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1e7      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0ef      	beq.n	8001f62 <HAL_RCC_OscConfig+0x22e>
 8001f82:	e020      	b.n	8001fc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8a:	4a09      	ldr	r2, [pc, #36]	@ (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff fb56 	bl	8001644 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9a:	e00d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fb52 	bl	8001644 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d906      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1ca      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ea      	bne.n	8001f9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80a6 	beq.w	8002120 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd8:	4b84      	ldr	r3, [pc, #528]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2b4>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x2b6>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00d      	beq.n	800200a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	4b7f      	ldr	r3, [pc, #508]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002006:	2301      	movs	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	4b79      	ldr	r3, [pc, #484]	@ (80021f0 <HAL_RCC_OscConfig+0x4bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d118      	bne.n	8002048 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002016:	4b76      	ldr	r3, [pc, #472]	@ (80021f0 <HAL_RCC_OscConfig+0x4bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a75      	ldr	r2, [pc, #468]	@ (80021f0 <HAL_RCC_OscConfig+0x4bc>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002022:	f7ff fb0f 	bl	8001644 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7ff fb0b 	bl	8001644 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e183      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203c:	4b6c      	ldr	r3, [pc, #432]	@ (80021f0 <HAL_RCC_OscConfig+0x4bc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <HAL_RCC_OscConfig+0x32e>
 8002050:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a65      	ldr	r2, [pc, #404]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002060:	e024      	b.n	80020ac <HAL_RCC_OscConfig+0x378>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d110      	bne.n	800208c <HAL_RCC_OscConfig+0x358>
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	4a5e      	ldr	r2, [pc, #376]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800207a:	4b5c      	ldr	r3, [pc, #368]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	4a5a      	ldr	r2, [pc, #360]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800208a:	e00f      	b.n	80020ac <HAL_RCC_OscConfig+0x378>
 800208c:	4b57      	ldr	r3, [pc, #348]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	4a56      	ldr	r2, [pc, #344]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a2:	4a52      	ldr	r2, [pc, #328]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d016      	beq.n	80020e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7ff fac6 	bl	8001644 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7ff fac2 	bl	8001644 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e138      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	4b46      	ldr	r3, [pc, #280]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ed      	beq.n	80020bc <HAL_RCC_OscConfig+0x388>
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7ff faaf 	bl	8001644 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7ff faab 	bl	8001644 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e121      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002100:	4b3a      	ldr	r3, [pc, #232]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ed      	bne.n	80020ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800210e:	7ffb      	ldrb	r3, [r7, #31]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002114:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	4a34      	ldr	r2, [pc, #208]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 800211a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d03c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01c      	beq.n	800216e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002134:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002136:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800213a:	4a2c      	ldr	r2, [pc, #176]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff fa7e 	bl	8001644 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214c:	f7ff fa7a 	bl	8001644 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0f2      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800215e:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ef      	beq.n	800214c <HAL_RCC_OscConfig+0x418>
 800216c:	e01b      	b.n	80021a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800216e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002170:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7ff fa61 	bl	8001644 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002186:	f7ff fa5d 	bl	8001644 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0d5      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ef      	bne.n	8002186 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80c9 	beq.w	8002342 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b0:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	f000 8083 	beq.w	80022c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d15e      	bne.n	8002284 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff fa37 	bl	8001644 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d8:	e00c      	b.n	80021f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7ff fa33 	bl	8001644 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d905      	bls.n	80021f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0ab      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	4b55      	ldr	r3, [pc, #340]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ec      	bne.n	80021da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002200:	4b52      	ldr	r3, [pc, #328]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4b52      	ldr	r3, [pc, #328]	@ (8002350 <HAL_RCC_OscConfig+0x61c>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6a11      	ldr	r1, [r2, #32]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002210:	3a01      	subs	r2, #1
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	3a01      	subs	r2, #1
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800222e:	0852      	lsrs	r2, r2, #1
 8002230:	3a01      	subs	r2, #1
 8002232:	0652      	lsls	r2, r2, #25
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800223a:	06d2      	lsls	r2, r2, #27
 800223c:	430a      	orrs	r2, r1
 800223e:	4943      	ldr	r1, [pc, #268]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 8002240:	4313      	orrs	r3, r2
 8002242:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002244:	4b41      	ldr	r3, [pc, #260]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a40      	ldr	r2, [pc, #256]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002250:	4b3e      	ldr	r3, [pc, #248]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a3d      	ldr	r2, [pc, #244]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f9f2 	bl	8001644 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f9ee 	bl	8001644 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e066      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	4b35      	ldr	r3, [pc, #212]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x530>
 8002282:	e05e      	b.n	8002342 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a30      	ldr	r2, [pc, #192]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 800228a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f9d8 	bl	8001644 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7ff f9d4 	bl	8001644 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e04c      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022aa:	4b28      	ldr	r3, [pc, #160]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022b6:	4b25      	ldr	r3, [pc, #148]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4924      	ldr	r1, [pc, #144]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <HAL_RCC_OscConfig+0x620>)
 80022be:	4013      	ands	r3, r2
 80022c0:	60cb      	str	r3, [r1, #12]
 80022c2:	e03e      	b.n	8002342 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e039      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <HAL_RCC_OscConfig+0x618>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d12c      	bne.n	800233e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	3b01      	subs	r3, #1
 80022f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d123      	bne.n	800233e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d11b      	bne.n	800233e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d113      	bne.n	800233e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d109      	bne.n	800233e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	3b01      	subs	r3, #1
 8002338:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	019f800c 	.word	0x019f800c
 8002354:	feeefffc 	.word	0xfeeefffc

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e11e      	b.n	80025ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b91      	ldr	r3, [pc, #580]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b8e      	ldr	r3, [pc, #568]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 020f 	bic.w	r2, r3, #15
 8002386:	498c      	ldr	r1, [pc, #560]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b8a      	ldr	r3, [pc, #552]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e106      	b.n	80025ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d073      	beq.n	8002494 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d129      	bne.n	8002408 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b4:	4b81      	ldr	r3, [pc, #516]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0f4      	b.n	80025ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023c4:	f000 f99e 	bl	8002704 <RCC_GetSysClockFreqFromPLLSource>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4a7c      	ldr	r2, [pc, #496]	@ (80025c0 <HAL_RCC_ClockConfig+0x268>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d93f      	bls.n	8002452 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023d2:	4b7a      	ldr	r3, [pc, #488]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d033      	beq.n	8002452 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12f      	bne.n	8002452 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023f2:	4b72      	ldr	r3, [pc, #456]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023fa:	4a70      	ldr	r2, [pc, #448]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80023fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002400:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e024      	b.n	8002452 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002410:	4b6a      	ldr	r3, [pc, #424]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0c6      	b.n	80025ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002420:	4b66      	ldr	r3, [pc, #408]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0be      	b.n	80025ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002430:	f000 f8ce 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4a61      	ldr	r2, [pc, #388]	@ (80025c0 <HAL_RCC_ClockConfig+0x268>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d909      	bls.n	8002452 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800243e:	4b5f      	ldr	r3, [pc, #380]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002446:	4a5d      	ldr	r2, [pc, #372]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800244c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b5a      	ldr	r3, [pc, #360]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4957      	ldr	r1, [pc, #348]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002464:	f7ff f8ee 	bl	8001644 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff f8ea 	bl	8001644 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e095      	b.n	80025ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b4e      	ldr	r3, [pc, #312]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d023      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a42      	ldr	r2, [pc, #264]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024c4:	4b3d      	ldr	r3, [pc, #244]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024cc:	4a3b      	ldr	r2, [pc, #236]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4936      	ldr	r1, [pc, #216]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
 80024e6:	e008      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b80      	cmp	r3, #128	@ 0x80
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024ee:	4b33      	ldr	r3, [pc, #204]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4a32      	ldr	r2, [pc, #200]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 80024f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fa:	4b2f      	ldr	r3, [pc, #188]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d21d      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002508:	4b2b      	ldr	r3, [pc, #172]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 020f 	bic.w	r2, r3, #15
 8002510:	4929      	ldr	r1, [pc, #164]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002518:	f7ff f894 	bl	8001644 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7ff f890 	bl	8001644 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e03b      	b.n	80025ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_RCC_ClockConfig+0x260>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d1ed      	bne.n	8002520 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4917      	ldr	r1, [pc, #92]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490f      	ldr	r1, [pc, #60]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002582:	f000 f825 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <HAL_RCC_ClockConfig+0x264>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490c      	ldr	r1, [pc, #48]	@ (80025c4 <HAL_RCC_ClockConfig+0x26c>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_RCC_ClockConfig+0x270>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_RCC_ClockConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f800 	bl	80015ac <HAL_InitTick>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	04c4b400 	.word	0x04c4b400
 80025c4:	08006640 	.word	0x08006640
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025e2:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e047      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025e8:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	e03e      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025fa:	4b23      	ldr	r3, [pc, #140]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d136      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3301      	adds	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d10c      	bne.n	800263e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002624:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	4a16      	ldr	r2, [pc, #88]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	68d2      	ldr	r2, [r2, #12]
 8002630:	0a12      	lsrs	r2, r2, #8
 8002632:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
      break;
 800263c:	e00c      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002648:	68d2      	ldr	r2, [r2, #12]
 800264a:	0a12      	lsrs	r2, r2, #8
 800264c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
      break;
 8002656:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0e5b      	lsrs	r3, r3, #25
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	e001      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002678:	693b      	ldr	r3, [r7, #16]
}
 800267a:	4618      	mov	r0, r3
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200

08002694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4904      	ldr	r1, [pc, #16]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08006650 	.word	0x08006650

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026dc:	f7ff ffda 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0adb      	lsrs	r3, r3, #11
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4904      	ldr	r1, [pc, #16]	@ (8002700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	08006650 	.word	0x08006650

08002704 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800270a:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002714:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d10c      	bne.n	8002742 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002728:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002732:	68d2      	ldr	r2, [r2, #12]
 8002734:	0a12      	lsrs	r2, r2, #8
 8002736:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
    break;
 8002740:	e00c      	b.n	800275c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002742:	4a12      	ldr	r2, [pc, #72]	@ (800278c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4a0e      	ldr	r2, [pc, #56]	@ (8002784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800274c:	68d2      	ldr	r2, [r2, #12]
 800274e:	0a12      	lsrs	r2, r2, #8
 8002750:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    break;
 800275a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0e5b      	lsrs	r3, r3, #25
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	00f42400 	.word	0x00f42400

08002790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002798:	2300      	movs	r3, #0
 800279a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800279c:	2300      	movs	r3, #0
 800279e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8098 	beq.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	4a3f      	ldr	r2, [pc, #252]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ca:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d6:	2301      	movs	r3, #1
 80027d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027da:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a39      	ldr	r2, [pc, #228]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e6:	f7fe ff2d 	bl	8001644 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ec:	e009      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7fe ff29 	bl	8001644 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d902      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002800:	e005      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002802:	4b30      	ldr	r3, [pc, #192]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ef      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d159      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800281e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01e      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	429a      	cmp	r2, r3
 800282e:	d019      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002830:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800283a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a1f      	ldr	r2, [pc, #124]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800284c:	4b1c      	ldr	r3, [pc, #112]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800285c:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe fee9 	bl	8001644 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002874:	e00b      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fee5 	bl	8001644 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d902      	bls.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	74fb      	strb	r3, [r7, #19]
            break;
 800288c:	e006      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ec      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10b      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	4903      	ldr	r1, [pc, #12]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028b8:	e008      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	74bb      	strb	r3, [r7, #18]
 80028be:	e005      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028cc:	7c7b      	ldrb	r3, [r7, #17]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	4ba6      	ldr	r3, [pc, #664]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	4aa5      	ldr	r2, [pc, #660]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ea:	4ba0      	ldr	r3, [pc, #640]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f0:	f023 0203 	bic.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	499c      	ldr	r1, [pc, #624]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290c:	4b97      	ldr	r3, [pc, #604]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	f023 020c 	bic.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4994      	ldr	r1, [pc, #592]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	498b      	ldr	r1, [pc, #556]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002950:	4b86      	ldr	r3, [pc, #536]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	4983      	ldr	r1, [pc, #524]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002972:	4b7e      	ldr	r3, [pc, #504]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	497a      	ldr	r1, [pc, #488]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002994:	4b75      	ldr	r3, [pc, #468]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4972      	ldr	r1, [pc, #456]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	4969      	ldr	r1, [pc, #420]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029d8:	4b64      	ldr	r3, [pc, #400]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4961      	ldr	r1, [pc, #388]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	4958      	ldr	r1, [pc, #352]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a1c:	4b53      	ldr	r3, [pc, #332]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	4950      	ldr	r1, [pc, #320]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a4a      	ldr	r2, [pc, #296]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a46:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a54:	4b45      	ldr	r3, [pc, #276]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	4942      	ldr	r1, [pc, #264]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b3d      	ldr	r3, [pc, #244]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a3c      	ldr	r2, [pc, #240]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a8c:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4934      	ldr	r1, [pc, #208]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b2f      	ldr	r3, [pc, #188]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac4:	4b29      	ldr	r3, [pc, #164]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad2:	4926      	ldr	r1, [pc, #152]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a20      	ldr	r2, [pc, #128]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	4918      	ldr	r1, [pc, #96]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b34:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b42:	490a      	ldr	r1, [pc, #40]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b52:	d105      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000

08002b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e042      	b.n	8002c08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fe fb67 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2224      	movs	r2, #36	@ 0x24
 8002b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fb82 	bl	80032c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8b3 	bl	8002d2c <UART_SetConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01b      	b.n	8002c08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fc01 	bl	8003408 <UART_CheckIdleState>
 8002c06:	4603      	mov	r3, r0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d17b      	bne.n	8002d22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_UART_Transmit+0x26>
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e074      	b.n	8002d24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2221      	movs	r2, #33	@ 0x21
 8002c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fcfb 	bl	8001644 <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c68:	d108      	bne.n	8002c7c <HAL_UART_Transmit+0x6c>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d104      	bne.n	8002c7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e003      	b.n	8002c84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c84:	e030      	b.n	8002ce8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	@ 0x80
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fc63 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e03d      	b.n	8002d24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e007      	b.n	8002cd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1c8      	bne.n	8002c86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2140      	movs	r1, #64	@ 0x40
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fc2c 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e006      	b.n	8002d24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b08c      	sub	sp, #48	@ 0x30
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4bab      	ldr	r3, [pc, #684]	@ (8003008 <UART_SetConfig+0x2dc>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4aa0      	ldr	r2, [pc, #640]	@ (800300c <UART_SetConfig+0x2e0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d94:	4313      	orrs	r3, r2
 8002d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002da2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	f023 010f 	bic.w	r1, r3, #15
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a91      	ldr	r2, [pc, #580]	@ (8003010 <UART_SetConfig+0x2e4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d125      	bne.n	8002e1c <UART_SetConfig+0xf0>
 8002dd0:	4b90      	ldr	r3, [pc, #576]	@ (8003014 <UART_SetConfig+0x2e8>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d81a      	bhi.n	8002e14 <UART_SetConfig+0xe8>
 8002dde:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <UART_SetConfig+0xb8>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002df5 	.word	0x08002df5
 8002de8:	08002e05 	.word	0x08002e05
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002e0d 	.word	0x08002e0d
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfa:	e0d6      	b.n	8002faa <UART_SetConfig+0x27e>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e0d2      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e04:	2304      	movs	r3, #4
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0a:	e0ce      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e0ca      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e14:	2310      	movs	r3, #16
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e0c6      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7d      	ldr	r2, [pc, #500]	@ (8003018 <UART_SetConfig+0x2ec>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d138      	bne.n	8002e98 <UART_SetConfig+0x16c>
 8002e26:	4b7b      	ldr	r3, [pc, #492]	@ (8003014 <UART_SetConfig+0x2e8>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d82d      	bhi.n	8002e90 <UART_SetConfig+0x164>
 8002e34:	a201      	add	r2, pc, #4	@ (adr r2, 8002e3c <UART_SetConfig+0x110>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002e91 	.word	0x08002e91
 8002e44:	08002e91 	.word	0x08002e91
 8002e48:	08002e91 	.word	0x08002e91
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002e91 	.word	0x08002e91
 8002e54:	08002e91 	.word	0x08002e91
 8002e58:	08002e91 	.word	0x08002e91
 8002e5c:	08002e79 	.word	0x08002e79
 8002e60:	08002e91 	.word	0x08002e91
 8002e64:	08002e91 	.word	0x08002e91
 8002e68:	08002e91 	.word	0x08002e91
 8002e6c:	08002e89 	.word	0x08002e89
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e76:	e098      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7e:	e094      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e80:	2304      	movs	r3, #4
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e86:	e090      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e88:	2308      	movs	r3, #8
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e8e:	e08c      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e90:	2310      	movs	r3, #16
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e96:	e088      	b.n	8002faa <UART_SetConfig+0x27e>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5f      	ldr	r2, [pc, #380]	@ (800301c <UART_SetConfig+0x2f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d125      	bne.n	8002eee <UART_SetConfig+0x1c2>
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <UART_SetConfig+0x2e8>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002eac:	2b30      	cmp	r3, #48	@ 0x30
 8002eae:	d016      	beq.n	8002ede <UART_SetConfig+0x1b2>
 8002eb0:	2b30      	cmp	r3, #48	@ 0x30
 8002eb2:	d818      	bhi.n	8002ee6 <UART_SetConfig+0x1ba>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d00a      	beq.n	8002ece <UART_SetConfig+0x1a2>
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d814      	bhi.n	8002ee6 <UART_SetConfig+0x1ba>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <UART_SetConfig+0x19a>
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d008      	beq.n	8002ed6 <UART_SetConfig+0x1aa>
 8002ec4:	e00f      	b.n	8002ee6 <UART_SetConfig+0x1ba>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ecc:	e06d      	b.n	8002faa <UART_SetConfig+0x27e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed4:	e069      	b.n	8002faa <UART_SetConfig+0x27e>
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002edc:	e065      	b.n	8002faa <UART_SetConfig+0x27e>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee4:	e061      	b.n	8002faa <UART_SetConfig+0x27e>
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eec:	e05d      	b.n	8002faa <UART_SetConfig+0x27e>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a4b      	ldr	r2, [pc, #300]	@ (8003020 <UART_SetConfig+0x2f4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d125      	bne.n	8002f44 <UART_SetConfig+0x218>
 8002ef8:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <UART_SetConfig+0x2e8>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f04:	d016      	beq.n	8002f34 <UART_SetConfig+0x208>
 8002f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f08:	d818      	bhi.n	8002f3c <UART_SetConfig+0x210>
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d00a      	beq.n	8002f24 <UART_SetConfig+0x1f8>
 8002f0e:	2b80      	cmp	r3, #128	@ 0x80
 8002f10:	d814      	bhi.n	8002f3c <UART_SetConfig+0x210>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <UART_SetConfig+0x1f0>
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d008      	beq.n	8002f2c <UART_SetConfig+0x200>
 8002f1a:	e00f      	b.n	8002f3c <UART_SetConfig+0x210>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f22:	e042      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f24:	2302      	movs	r3, #2
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2a:	e03e      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f32:	e03a      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f34:	2308      	movs	r3, #8
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3a:	e036      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f42:	e032      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a30      	ldr	r2, [pc, #192]	@ (800300c <UART_SetConfig+0x2e0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d12a      	bne.n	8002fa4 <UART_SetConfig+0x278>
 8002f4e:	4b31      	ldr	r3, [pc, #196]	@ (8003014 <UART_SetConfig+0x2e8>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f5c:	d01a      	beq.n	8002f94 <UART_SetConfig+0x268>
 8002f5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f62:	d81b      	bhi.n	8002f9c <UART_SetConfig+0x270>
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f68:	d00c      	beq.n	8002f84 <UART_SetConfig+0x258>
 8002f6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f6e:	d815      	bhi.n	8002f9c <UART_SetConfig+0x270>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <UART_SetConfig+0x250>
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f78:	d008      	beq.n	8002f8c <UART_SetConfig+0x260>
 8002f7a:	e00f      	b.n	8002f9c <UART_SetConfig+0x270>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f82:	e012      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f84:	2302      	movs	r3, #2
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8a:	e00e      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f92:	e00a      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f94:	2308      	movs	r3, #8
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9a:	e006      	b.n	8002faa <UART_SetConfig+0x27e>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e002      	b.n	8002faa <UART_SetConfig+0x27e>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a17      	ldr	r2, [pc, #92]	@ (800300c <UART_SetConfig+0x2e0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	f040 80a8 	bne.w	8003106 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d834      	bhi.n	8003028 <UART_SetConfig+0x2fc>
 8002fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <UART_SetConfig+0x298>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08003029 	.word	0x08003029
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08003029 	.word	0x08003029
 8002fd4:	08002ff7 	.word	0x08002ff7
 8002fd8:	08003029 	.word	0x08003029
 8002fdc:	08003029 	.word	0x08003029
 8002fe0:	08003029 	.word	0x08003029
 8002fe4:	08002fff 	.word	0x08002fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f7ff fb60 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8002fec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fee:	e021      	b.n	8003034 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <UART_SetConfig+0x2f8>)
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ff4:	e01e      	b.n	8003034 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff6:	f7ff faeb 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002ffa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ffc:	e01a      	b.n	8003034 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003004:	e016      	b.n	8003034 <UART_SetConfig+0x308>
 8003006:	bf00      	nop
 8003008:	cfff69f3 	.word	0xcfff69f3
 800300c:	40008000 	.word	0x40008000
 8003010:	40013800 	.word	0x40013800
 8003014:	40021000 	.word	0x40021000
 8003018:	40004400 	.word	0x40004400
 800301c:	40004800 	.word	0x40004800
 8003020:	40004c00 	.word	0x40004c00
 8003024:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003032:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 812a 	beq.w	8003290 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	4a9e      	ldr	r2, [pc, #632]	@ (80032bc <UART_SetConfig+0x590>)
 8003042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003046:	461a      	mov	r2, r3
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	fbb3 f3f2 	udiv	r3, r3, r2
 800304e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	429a      	cmp	r2, r3
 800305e:	d305      	bcc.n	800306c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	429a      	cmp	r2, r3
 800306a:	d903      	bls.n	8003074 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003072:	e10d      	b.n	8003290 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	2200      	movs	r2, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	60fa      	str	r2, [r7, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	4a8e      	ldr	r2, [pc, #568]	@ (80032bc <UART_SetConfig+0x590>)
 8003082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003086:	b29b      	uxth	r3, r3
 8003088:	2200      	movs	r2, #0
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003096:	f7fd fdaf 	bl	8000bf8 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	020b      	lsls	r3, r1, #8
 80030ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030b0:	0202      	lsls	r2, r0, #8
 80030b2:	6979      	ldr	r1, [r7, #20]
 80030b4:	6849      	ldr	r1, [r1, #4]
 80030b6:	0849      	lsrs	r1, r1, #1
 80030b8:	2000      	movs	r0, #0
 80030ba:	460c      	mov	r4, r1
 80030bc:	4605      	mov	r5, r0
 80030be:	eb12 0804 	adds.w	r8, r2, r4
 80030c2:	eb43 0905 	adc.w	r9, r3, r5
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	469a      	mov	sl, r3
 80030ce:	4693      	mov	fp, r2
 80030d0:	4652      	mov	r2, sl
 80030d2:	465b      	mov	r3, fp
 80030d4:	4640      	mov	r0, r8
 80030d6:	4649      	mov	r1, r9
 80030d8:	f7fd fd8e 	bl	8000bf8 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ea:	d308      	bcc.n	80030fe <UART_SetConfig+0x3d2>
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030f2:	d204      	bcs.n	80030fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	e0c8      	b.n	8003290 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003104:	e0c4      	b.n	8003290 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800310e:	d167      	bne.n	80031e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003110:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003114:	2b08      	cmp	r3, #8
 8003116:	d828      	bhi.n	800316a <UART_SetConfig+0x43e>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <UART_SetConfig+0x3f4>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003145 	.word	0x08003145
 8003124:	0800314d 	.word	0x0800314d
 8003128:	08003155 	.word	0x08003155
 800312c:	0800316b 	.word	0x0800316b
 8003130:	0800315b 	.word	0x0800315b
 8003134:	0800316b 	.word	0x0800316b
 8003138:	0800316b 	.word	0x0800316b
 800313c:	0800316b 	.word	0x0800316b
 8003140:	08003163 	.word	0x08003163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7ff fab2 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800314a:	e014      	b.n	8003176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800314c:	f7ff fac4 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8003150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003152:	e010      	b.n	8003176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003154:	4b5a      	ldr	r3, [pc, #360]	@ (80032c0 <UART_SetConfig+0x594>)
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003158:	e00d      	b.n	8003176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315a:	f7ff fa39 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 800315e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003160:	e009      	b.n	8003176 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003168:	e005      	b.n	8003176 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8089 	beq.w	8003290 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	4a4e      	ldr	r2, [pc, #312]	@ (80032bc <UART_SetConfig+0x590>)
 8003184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003188:	461a      	mov	r2, r3
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	441a      	add	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	d916      	bls.n	80031d8 <UART_SetConfig+0x4ac>
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d212      	bcs.n	80031d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	8bfb      	ldrh	r3, [r7, #30]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	8bfa      	ldrh	r2, [r7, #30]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	e05b      	b.n	8003290 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031de:	e057      	b.n	8003290 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d828      	bhi.n	800323a <UART_SetConfig+0x50e>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0x4c4>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003225 	.word	0x08003225
 80031fc:	0800323b 	.word	0x0800323b
 8003200:	0800322b 	.word	0x0800322b
 8003204:	0800323b 	.word	0x0800323b
 8003208:	0800323b 	.word	0x0800323b
 800320c:	0800323b 	.word	0x0800323b
 8003210:	08003233 	.word	0x08003233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7ff fa4a 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800321a:	e014      	b.n	8003246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff fa5c 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8003220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003222:	e010      	b.n	8003246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003224:	4b26      	ldr	r3, [pc, #152]	@ (80032c0 <UART_SetConfig+0x594>)
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003228:	e00d      	b.n	8003246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322a:	f7ff f9d1 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 800322e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003230:	e009      	b.n	8003246 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003238:	e005      	b.n	8003246 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003244:	bf00      	nop
    }

    if (pclk != 0U)
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d021      	beq.n	8003290 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	4a1a      	ldr	r2, [pc, #104]	@ (80032bc <UART_SetConfig+0x590>)
 8003252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003256:	461a      	mov	r2, r3
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	fbb3 f2f2 	udiv	r2, r3, r2
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	441a      	add	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	d909      	bls.n	800328a <UART_SetConfig+0x55e>
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327c:	d205      	bcs.n	800328a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	b29a      	uxth	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	e002      	b.n	8003290 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2201      	movs	r2, #1
 8003294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2201      	movs	r2, #1
 800329c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3730      	adds	r7, #48	@ 0x30
 80032b4:	46bd      	mov	sp, r7
 80032b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ba:	bf00      	nop
 80032bc:	08006658 	.word	0x08006658
 80032c0:	00f42400 	.word	0x00f42400

080032c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01a      	beq.n	80033da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c2:	d10a      	bne.n	80033da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b098      	sub	sp, #96	@ 0x60
 800340c:	af02      	add	r7, sp, #8
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003418:	f7fe f914 	bl	8001644 <HAL_GetTick>
 800341c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d12f      	bne.n	800348c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f88e 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d022      	beq.n	800348c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800345a:	653b      	str	r3, [r7, #80]	@ 0x50
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003464:	647b      	str	r3, [r7, #68]	@ 0x44
 8003466:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800346a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e6      	bne.n	8003446 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e063      	b.n	8003554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d149      	bne.n	800352e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800349a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a2:	2200      	movs	r2, #0
 80034a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f857 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d03c      	beq.n	800352e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	623b      	str	r3, [r7, #32]
   return(result);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e6      	bne.n	80034b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3308      	adds	r3, #8
 80034ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003506:	61fa      	str	r2, [r7, #28]
 8003508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	617b      	str	r3, [r7, #20]
   return(result);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e012      	b.n	8003554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3758      	adds	r7, #88	@ 0x58
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356c:	e04f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d04b      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fe f865 	bl	8001644 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <UART_WaitOnFlagUntilTimeout+0x30>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e04e      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d037      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0xb2>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b80      	cmp	r3, #128	@ 0x80
 80035a2:	d034      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b40      	cmp	r3, #64	@ 0x40
 80035a8:	d031      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d110      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2208      	movs	r2, #8
 80035be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f838 	bl	8003636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2208      	movs	r2, #8
 80035ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e029      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e8:	d111      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f81e 	bl	8003636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e00f      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d0a0      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003636:	b480      	push	{r7}
 8003638:	b095      	sub	sp, #84	@ 0x54
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800364c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800365c:	643b      	str	r3, [r7, #64]	@ 0x40
 800365e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e6      	bne.n	800363e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e3      	bne.n	8003670 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d118      	bne.n	80036e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 0310 	bic.w	r3, r3, #16
 80036c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	613b      	str	r3, [r7, #16]
   return(result);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e6      	bne.n	80036b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80036f6:	bf00      	nop
 80036f8:	3754      	adds	r7, #84	@ 0x54
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	@ 0x24
 8003798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	@ 0x24
 8003814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	@ (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	@ (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	@ (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	@ (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08006670 	.word	0x08006670
 8003904:	08006678 	.word	0x08006678

08003908 <__cvt>:
 8003908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	ec57 6b10 	vmov	r6, r7, d0
 8003910:	2f00      	cmp	r7, #0
 8003912:	460c      	mov	r4, r1
 8003914:	4619      	mov	r1, r3
 8003916:	463b      	mov	r3, r7
 8003918:	bfbb      	ittet	lt
 800391a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800391e:	461f      	movlt	r7, r3
 8003920:	2300      	movge	r3, #0
 8003922:	232d      	movlt	r3, #45	@ 0x2d
 8003924:	700b      	strb	r3, [r1, #0]
 8003926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003928:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800392c:	4691      	mov	r9, r2
 800392e:	f023 0820 	bic.w	r8, r3, #32
 8003932:	bfbc      	itt	lt
 8003934:	4632      	movlt	r2, r6
 8003936:	4616      	movlt	r6, r2
 8003938:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800393c:	d005      	beq.n	800394a <__cvt+0x42>
 800393e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003942:	d100      	bne.n	8003946 <__cvt+0x3e>
 8003944:	3401      	adds	r4, #1
 8003946:	2102      	movs	r1, #2
 8003948:	e000      	b.n	800394c <__cvt+0x44>
 800394a:	2103      	movs	r1, #3
 800394c:	ab03      	add	r3, sp, #12
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	ab02      	add	r3, sp, #8
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	ec47 6b10 	vmov	d0, r6, r7
 8003958:	4653      	mov	r3, sl
 800395a:	4622      	mov	r2, r4
 800395c:	f000 fe5c 	bl	8004618 <_dtoa_r>
 8003960:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003964:	4605      	mov	r5, r0
 8003966:	d119      	bne.n	800399c <__cvt+0x94>
 8003968:	f019 0f01 	tst.w	r9, #1
 800396c:	d00e      	beq.n	800398c <__cvt+0x84>
 800396e:	eb00 0904 	add.w	r9, r0, r4
 8003972:	2200      	movs	r2, #0
 8003974:	2300      	movs	r3, #0
 8003976:	4630      	mov	r0, r6
 8003978:	4639      	mov	r1, r7
 800397a:	f7fd f8cd 	bl	8000b18 <__aeabi_dcmpeq>
 800397e:	b108      	cbz	r0, 8003984 <__cvt+0x7c>
 8003980:	f8cd 900c 	str.w	r9, [sp, #12]
 8003984:	2230      	movs	r2, #48	@ 0x30
 8003986:	9b03      	ldr	r3, [sp, #12]
 8003988:	454b      	cmp	r3, r9
 800398a:	d31e      	bcc.n	80039ca <__cvt+0xc2>
 800398c:	9b03      	ldr	r3, [sp, #12]
 800398e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003990:	1b5b      	subs	r3, r3, r5
 8003992:	4628      	mov	r0, r5
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	b004      	add	sp, #16
 8003998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80039a0:	eb00 0904 	add.w	r9, r0, r4
 80039a4:	d1e5      	bne.n	8003972 <__cvt+0x6a>
 80039a6:	7803      	ldrb	r3, [r0, #0]
 80039a8:	2b30      	cmp	r3, #48	@ 0x30
 80039aa:	d10a      	bne.n	80039c2 <__cvt+0xba>
 80039ac:	2200      	movs	r2, #0
 80039ae:	2300      	movs	r3, #0
 80039b0:	4630      	mov	r0, r6
 80039b2:	4639      	mov	r1, r7
 80039b4:	f7fd f8b0 	bl	8000b18 <__aeabi_dcmpeq>
 80039b8:	b918      	cbnz	r0, 80039c2 <__cvt+0xba>
 80039ba:	f1c4 0401 	rsb	r4, r4, #1
 80039be:	f8ca 4000 	str.w	r4, [sl]
 80039c2:	f8da 3000 	ldr.w	r3, [sl]
 80039c6:	4499      	add	r9, r3
 80039c8:	e7d3      	b.n	8003972 <__cvt+0x6a>
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	9103      	str	r1, [sp, #12]
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e7d9      	b.n	8003986 <__cvt+0x7e>

080039d2 <__exponent>:
 80039d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039d4:	2900      	cmp	r1, #0
 80039d6:	bfba      	itte	lt
 80039d8:	4249      	neglt	r1, r1
 80039da:	232d      	movlt	r3, #45	@ 0x2d
 80039dc:	232b      	movge	r3, #43	@ 0x2b
 80039de:	2909      	cmp	r1, #9
 80039e0:	7002      	strb	r2, [r0, #0]
 80039e2:	7043      	strb	r3, [r0, #1]
 80039e4:	dd29      	ble.n	8003a3a <__exponent+0x68>
 80039e6:	f10d 0307 	add.w	r3, sp, #7
 80039ea:	461d      	mov	r5, r3
 80039ec:	270a      	movs	r7, #10
 80039ee:	461a      	mov	r2, r3
 80039f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80039f4:	fb07 1416 	mls	r4, r7, r6, r1
 80039f8:	3430      	adds	r4, #48	@ 0x30
 80039fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80039fe:	460c      	mov	r4, r1
 8003a00:	2c63      	cmp	r4, #99	@ 0x63
 8003a02:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a06:	4631      	mov	r1, r6
 8003a08:	dcf1      	bgt.n	80039ee <__exponent+0x1c>
 8003a0a:	3130      	adds	r1, #48	@ 0x30
 8003a0c:	1e94      	subs	r4, r2, #2
 8003a0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a12:	1c41      	adds	r1, r0, #1
 8003a14:	4623      	mov	r3, r4
 8003a16:	42ab      	cmp	r3, r5
 8003a18:	d30a      	bcc.n	8003a30 <__exponent+0x5e>
 8003a1a:	f10d 0309 	add.w	r3, sp, #9
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	42ac      	cmp	r4, r5
 8003a22:	bf88      	it	hi
 8003a24:	2300      	movhi	r3, #0
 8003a26:	3302      	adds	r3, #2
 8003a28:	4403      	add	r3, r0
 8003a2a:	1a18      	subs	r0, r3, r0
 8003a2c:	b003      	add	sp, #12
 8003a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003a34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003a38:	e7ed      	b.n	8003a16 <__exponent+0x44>
 8003a3a:	2330      	movs	r3, #48	@ 0x30
 8003a3c:	3130      	adds	r1, #48	@ 0x30
 8003a3e:	7083      	strb	r3, [r0, #2]
 8003a40:	70c1      	strb	r1, [r0, #3]
 8003a42:	1d03      	adds	r3, r0, #4
 8003a44:	e7f1      	b.n	8003a2a <__exponent+0x58>
	...

08003a48 <_printf_float>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	b08d      	sub	sp, #52	@ 0x34
 8003a4e:	460c      	mov	r4, r1
 8003a50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003a54:	4616      	mov	r6, r2
 8003a56:	461f      	mov	r7, r3
 8003a58:	4605      	mov	r5, r0
 8003a5a:	f000 fcdb 	bl	8004414 <_localeconv_r>
 8003a5e:	6803      	ldr	r3, [r0, #0]
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fc fc2c 	bl	80002c0 <strlen>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a70:	9005      	str	r0, [sp, #20]
 8003a72:	3307      	adds	r3, #7
 8003a74:	f023 0307 	bic.w	r3, r3, #7
 8003a78:	f103 0208 	add.w	r2, r3, #8
 8003a7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a80:	f8d4 b000 	ldr.w	fp, [r4]
 8003a84:	f8c8 2000 	str.w	r2, [r8]
 8003a88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003a90:	9307      	str	r3, [sp, #28]
 8003a92:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003d10 <_printf_float+0x2c8>)
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	f7fd f86a 	bl	8000b7c <__aeabi_dcmpun>
 8003aa8:	bb70      	cbnz	r0, 8003b08 <_printf_float+0xc0>
 8003aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aae:	4b98      	ldr	r3, [pc, #608]	@ (8003d10 <_printf_float+0x2c8>)
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	f7fd f844 	bl	8000b40 <__aeabi_dcmple>
 8003ab8:	bb30      	cbnz	r0, 8003b08 <_printf_float+0xc0>
 8003aba:	2200      	movs	r2, #0
 8003abc:	2300      	movs	r3, #0
 8003abe:	4640      	mov	r0, r8
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	f7fd f833 	bl	8000b2c <__aeabi_dcmplt>
 8003ac6:	b110      	cbz	r0, 8003ace <_printf_float+0x86>
 8003ac8:	232d      	movs	r3, #45	@ 0x2d
 8003aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ace:	4a91      	ldr	r2, [pc, #580]	@ (8003d14 <_printf_float+0x2cc>)
 8003ad0:	4b91      	ldr	r3, [pc, #580]	@ (8003d18 <_printf_float+0x2d0>)
 8003ad2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003ad6:	bf94      	ite	ls
 8003ad8:	4690      	movls	r8, r2
 8003ada:	4698      	movhi	r8, r3
 8003adc:	2303      	movs	r3, #3
 8003ade:	6123      	str	r3, [r4, #16]
 8003ae0:	f02b 0304 	bic.w	r3, fp, #4
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	f04f 0900 	mov.w	r9, #0
 8003aea:	9700      	str	r7, [sp, #0]
 8003aec:	4633      	mov	r3, r6
 8003aee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003af0:	4621      	mov	r1, r4
 8003af2:	4628      	mov	r0, r5
 8003af4:	f000 f9d2 	bl	8003e9c <_printf_common>
 8003af8:	3001      	adds	r0, #1
 8003afa:	f040 808d 	bne.w	8003c18 <_printf_float+0x1d0>
 8003afe:	f04f 30ff 	mov.w	r0, #4294967295
 8003b02:	b00d      	add	sp, #52	@ 0x34
 8003b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4649      	mov	r1, r9
 8003b10:	f7fd f834 	bl	8000b7c <__aeabi_dcmpun>
 8003b14:	b140      	cbz	r0, 8003b28 <_printf_float+0xe0>
 8003b16:	464b      	mov	r3, r9
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bfbc      	itt	lt
 8003b1c:	232d      	movlt	r3, #45	@ 0x2d
 8003b1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003b22:	4a7e      	ldr	r2, [pc, #504]	@ (8003d1c <_printf_float+0x2d4>)
 8003b24:	4b7e      	ldr	r3, [pc, #504]	@ (8003d20 <_printf_float+0x2d8>)
 8003b26:	e7d4      	b.n	8003ad2 <_printf_float+0x8a>
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003b2e:	9206      	str	r2, [sp, #24]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	d13b      	bne.n	8003bac <_printf_float+0x164>
 8003b34:	2306      	movs	r3, #6
 8003b36:	6063      	str	r3, [r4, #4]
 8003b38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6022      	str	r2, [r4, #0]
 8003b40:	9303      	str	r3, [sp, #12]
 8003b42:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003b48:	ab09      	add	r3, sp, #36	@ 0x24
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	6861      	ldr	r1, [r4, #4]
 8003b4e:	ec49 8b10 	vmov	d0, r8, r9
 8003b52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003b56:	4628      	mov	r0, r5
 8003b58:	f7ff fed6 	bl	8003908 <__cvt>
 8003b5c:	9b06      	ldr	r3, [sp, #24]
 8003b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003b60:	2b47      	cmp	r3, #71	@ 0x47
 8003b62:	4680      	mov	r8, r0
 8003b64:	d129      	bne.n	8003bba <_printf_float+0x172>
 8003b66:	1cc8      	adds	r0, r1, #3
 8003b68:	db02      	blt.n	8003b70 <_printf_float+0x128>
 8003b6a:	6863      	ldr	r3, [r4, #4]
 8003b6c:	4299      	cmp	r1, r3
 8003b6e:	dd41      	ble.n	8003bf4 <_printf_float+0x1ac>
 8003b70:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b74:	fa5f fa8a 	uxtb.w	sl, sl
 8003b78:	3901      	subs	r1, #1
 8003b7a:	4652      	mov	r2, sl
 8003b7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003b80:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b82:	f7ff ff26 	bl	80039d2 <__exponent>
 8003b86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b88:	1813      	adds	r3, r2, r0
 8003b8a:	2a01      	cmp	r2, #1
 8003b8c:	4681      	mov	r9, r0
 8003b8e:	6123      	str	r3, [r4, #16]
 8003b90:	dc02      	bgt.n	8003b98 <_printf_float+0x150>
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	07d2      	lsls	r2, r2, #31
 8003b96:	d501      	bpl.n	8003b9c <_printf_float+0x154>
 8003b98:	3301      	adds	r3, #1
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0a2      	beq.n	8003aea <_printf_float+0xa2>
 8003ba4:	232d      	movs	r3, #45	@ 0x2d
 8003ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003baa:	e79e      	b.n	8003aea <_printf_float+0xa2>
 8003bac:	9a06      	ldr	r2, [sp, #24]
 8003bae:	2a47      	cmp	r2, #71	@ 0x47
 8003bb0:	d1c2      	bne.n	8003b38 <_printf_float+0xf0>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1c0      	bne.n	8003b38 <_printf_float+0xf0>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e7bd      	b.n	8003b36 <_printf_float+0xee>
 8003bba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003bbe:	d9db      	bls.n	8003b78 <_printf_float+0x130>
 8003bc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003bc4:	d118      	bne.n	8003bf8 <_printf_float+0x1b0>
 8003bc6:	2900      	cmp	r1, #0
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	dd0b      	ble.n	8003be4 <_printf_float+0x19c>
 8003bcc:	6121      	str	r1, [r4, #16]
 8003bce:	b913      	cbnz	r3, 8003bd6 <_printf_float+0x18e>
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	07d0      	lsls	r0, r2, #31
 8003bd4:	d502      	bpl.n	8003bdc <_printf_float+0x194>
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	440b      	add	r3, r1
 8003bda:	6123      	str	r3, [r4, #16]
 8003bdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003bde:	f04f 0900 	mov.w	r9, #0
 8003be2:	e7db      	b.n	8003b9c <_printf_float+0x154>
 8003be4:	b913      	cbnz	r3, 8003bec <_printf_float+0x1a4>
 8003be6:	6822      	ldr	r2, [r4, #0]
 8003be8:	07d2      	lsls	r2, r2, #31
 8003bea:	d501      	bpl.n	8003bf0 <_printf_float+0x1a8>
 8003bec:	3302      	adds	r3, #2
 8003bee:	e7f4      	b.n	8003bda <_printf_float+0x192>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e7f2      	b.n	8003bda <_printf_float+0x192>
 8003bf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	db05      	blt.n	8003c0a <_printf_float+0x1c2>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	6121      	str	r1, [r4, #16]
 8003c02:	07d8      	lsls	r0, r3, #31
 8003c04:	d5ea      	bpl.n	8003bdc <_printf_float+0x194>
 8003c06:	1c4b      	adds	r3, r1, #1
 8003c08:	e7e7      	b.n	8003bda <_printf_float+0x192>
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	bfd4      	ite	le
 8003c0e:	f1c1 0202 	rsble	r2, r1, #2
 8003c12:	2201      	movgt	r2, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	e7e0      	b.n	8003bda <_printf_float+0x192>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	055a      	lsls	r2, r3, #21
 8003c1c:	d407      	bmi.n	8003c2e <_printf_float+0x1e6>
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	4642      	mov	r2, r8
 8003c22:	4631      	mov	r1, r6
 8003c24:	4628      	mov	r0, r5
 8003c26:	47b8      	blx	r7
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d12b      	bne.n	8003c84 <_printf_float+0x23c>
 8003c2c:	e767      	b.n	8003afe <_printf_float+0xb6>
 8003c2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c32:	f240 80dd 	bls.w	8003df0 <_printf_float+0x3a8>
 8003c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f7fc ff6b 	bl	8000b18 <__aeabi_dcmpeq>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d033      	beq.n	8003cae <_printf_float+0x266>
 8003c46:	4a37      	ldr	r2, [pc, #220]	@ (8003d24 <_printf_float+0x2dc>)
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b8      	blx	r7
 8003c50:	3001      	adds	r0, #1
 8003c52:	f43f af54 	beq.w	8003afe <_printf_float+0xb6>
 8003c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003c5a:	4543      	cmp	r3, r8
 8003c5c:	db02      	blt.n	8003c64 <_printf_float+0x21c>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	07d8      	lsls	r0, r3, #31
 8003c62:	d50f      	bpl.n	8003c84 <_printf_float+0x23c>
 8003c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c68:	4631      	mov	r1, r6
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	47b8      	blx	r7
 8003c6e:	3001      	adds	r0, #1
 8003c70:	f43f af45 	beq.w	8003afe <_printf_float+0xb6>
 8003c74:	f04f 0900 	mov.w	r9, #0
 8003c78:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c7c:	f104 0a1a 	add.w	sl, r4, #26
 8003c80:	45c8      	cmp	r8, r9
 8003c82:	dc09      	bgt.n	8003c98 <_printf_float+0x250>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	079b      	lsls	r3, r3, #30
 8003c88:	f100 8103 	bmi.w	8003e92 <_printf_float+0x44a>
 8003c8c:	68e0      	ldr	r0, [r4, #12]
 8003c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c90:	4298      	cmp	r0, r3
 8003c92:	bfb8      	it	lt
 8003c94:	4618      	movlt	r0, r3
 8003c96:	e734      	b.n	8003b02 <_printf_float+0xba>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4652      	mov	r2, sl
 8003c9c:	4631      	mov	r1, r6
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	47b8      	blx	r7
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f43f af2b 	beq.w	8003afe <_printf_float+0xb6>
 8003ca8:	f109 0901 	add.w	r9, r9, #1
 8003cac:	e7e8      	b.n	8003c80 <_printf_float+0x238>
 8003cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	dc39      	bgt.n	8003d28 <_printf_float+0x2e0>
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <_printf_float+0x2dc>)
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4631      	mov	r1, r6
 8003cba:	4628      	mov	r0, r5
 8003cbc:	47b8      	blx	r7
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	f43f af1d 	beq.w	8003afe <_printf_float+0xb6>
 8003cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003cc8:	ea59 0303 	orrs.w	r3, r9, r3
 8003ccc:	d102      	bne.n	8003cd4 <_printf_float+0x28c>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	07d9      	lsls	r1, r3, #31
 8003cd2:	d5d7      	bpl.n	8003c84 <_printf_float+0x23c>
 8003cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cd8:	4631      	mov	r1, r6
 8003cda:	4628      	mov	r0, r5
 8003cdc:	47b8      	blx	r7
 8003cde:	3001      	adds	r0, #1
 8003ce0:	f43f af0d 	beq.w	8003afe <_printf_float+0xb6>
 8003ce4:	f04f 0a00 	mov.w	sl, #0
 8003ce8:	f104 0b1a 	add.w	fp, r4, #26
 8003cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cee:	425b      	negs	r3, r3
 8003cf0:	4553      	cmp	r3, sl
 8003cf2:	dc01      	bgt.n	8003cf8 <_printf_float+0x2b0>
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	e793      	b.n	8003c20 <_printf_float+0x1d8>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	465a      	mov	r2, fp
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b8      	blx	r7
 8003d02:	3001      	adds	r0, #1
 8003d04:	f43f aefb 	beq.w	8003afe <_printf_float+0xb6>
 8003d08:	f10a 0a01 	add.w	sl, sl, #1
 8003d0c:	e7ee      	b.n	8003cec <_printf_float+0x2a4>
 8003d0e:	bf00      	nop
 8003d10:	7fefffff 	.word	0x7fefffff
 8003d14:	08006680 	.word	0x08006680
 8003d18:	08006684 	.word	0x08006684
 8003d1c:	08006688 	.word	0x08006688
 8003d20:	0800668c 	.word	0x0800668c
 8003d24:	08006690 	.word	0x08006690
 8003d28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d2e:	4553      	cmp	r3, sl
 8003d30:	bfa8      	it	ge
 8003d32:	4653      	movge	r3, sl
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	4699      	mov	r9, r3
 8003d38:	dc36      	bgt.n	8003da8 <_printf_float+0x360>
 8003d3a:	f04f 0b00 	mov.w	fp, #0
 8003d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d42:	f104 021a 	add.w	r2, r4, #26
 8003d46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d48:	9306      	str	r3, [sp, #24]
 8003d4a:	eba3 0309 	sub.w	r3, r3, r9
 8003d4e:	455b      	cmp	r3, fp
 8003d50:	dc31      	bgt.n	8003db6 <_printf_float+0x36e>
 8003d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d54:	459a      	cmp	sl, r3
 8003d56:	dc3a      	bgt.n	8003dce <_printf_float+0x386>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	07da      	lsls	r2, r3, #31
 8003d5c:	d437      	bmi.n	8003dce <_printf_float+0x386>
 8003d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d60:	ebaa 0903 	sub.w	r9, sl, r3
 8003d64:	9b06      	ldr	r3, [sp, #24]
 8003d66:	ebaa 0303 	sub.w	r3, sl, r3
 8003d6a:	4599      	cmp	r9, r3
 8003d6c:	bfa8      	it	ge
 8003d6e:	4699      	movge	r9, r3
 8003d70:	f1b9 0f00 	cmp.w	r9, #0
 8003d74:	dc33      	bgt.n	8003dde <_printf_float+0x396>
 8003d76:	f04f 0800 	mov.w	r8, #0
 8003d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d7e:	f104 0b1a 	add.w	fp, r4, #26
 8003d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d84:	ebaa 0303 	sub.w	r3, sl, r3
 8003d88:	eba3 0309 	sub.w	r3, r3, r9
 8003d8c:	4543      	cmp	r3, r8
 8003d8e:	f77f af79 	ble.w	8003c84 <_printf_float+0x23c>
 8003d92:	2301      	movs	r3, #1
 8003d94:	465a      	mov	r2, fp
 8003d96:	4631      	mov	r1, r6
 8003d98:	4628      	mov	r0, r5
 8003d9a:	47b8      	blx	r7
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	f43f aeae 	beq.w	8003afe <_printf_float+0xb6>
 8003da2:	f108 0801 	add.w	r8, r8, #1
 8003da6:	e7ec      	b.n	8003d82 <_printf_float+0x33a>
 8003da8:	4642      	mov	r2, r8
 8003daa:	4631      	mov	r1, r6
 8003dac:	4628      	mov	r0, r5
 8003dae:	47b8      	blx	r7
 8003db0:	3001      	adds	r0, #1
 8003db2:	d1c2      	bne.n	8003d3a <_printf_float+0x2f2>
 8003db4:	e6a3      	b.n	8003afe <_printf_float+0xb6>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4631      	mov	r1, r6
 8003dba:	4628      	mov	r0, r5
 8003dbc:	9206      	str	r2, [sp, #24]
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	f43f ae9c 	beq.w	8003afe <_printf_float+0xb6>
 8003dc6:	9a06      	ldr	r2, [sp, #24]
 8003dc8:	f10b 0b01 	add.w	fp, fp, #1
 8003dcc:	e7bb      	b.n	8003d46 <_printf_float+0x2fe>
 8003dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	47b8      	blx	r7
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d1c0      	bne.n	8003d5e <_printf_float+0x316>
 8003ddc:	e68f      	b.n	8003afe <_printf_float+0xb6>
 8003dde:	9a06      	ldr	r2, [sp, #24]
 8003de0:	464b      	mov	r3, r9
 8003de2:	4442      	add	r2, r8
 8003de4:	4631      	mov	r1, r6
 8003de6:	4628      	mov	r0, r5
 8003de8:	47b8      	blx	r7
 8003dea:	3001      	adds	r0, #1
 8003dec:	d1c3      	bne.n	8003d76 <_printf_float+0x32e>
 8003dee:	e686      	b.n	8003afe <_printf_float+0xb6>
 8003df0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003df4:	f1ba 0f01 	cmp.w	sl, #1
 8003df8:	dc01      	bgt.n	8003dfe <_printf_float+0x3b6>
 8003dfa:	07db      	lsls	r3, r3, #31
 8003dfc:	d536      	bpl.n	8003e6c <_printf_float+0x424>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	4642      	mov	r2, r8
 8003e02:	4631      	mov	r1, r6
 8003e04:	4628      	mov	r0, r5
 8003e06:	47b8      	blx	r7
 8003e08:	3001      	adds	r0, #1
 8003e0a:	f43f ae78 	beq.w	8003afe <_printf_float+0xb6>
 8003e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e12:	4631      	mov	r1, r6
 8003e14:	4628      	mov	r0, r5
 8003e16:	47b8      	blx	r7
 8003e18:	3001      	adds	r0, #1
 8003e1a:	f43f ae70 	beq.w	8003afe <_printf_float+0xb6>
 8003e1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e22:	2200      	movs	r2, #0
 8003e24:	2300      	movs	r3, #0
 8003e26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e2a:	f7fc fe75 	bl	8000b18 <__aeabi_dcmpeq>
 8003e2e:	b9c0      	cbnz	r0, 8003e62 <_printf_float+0x41a>
 8003e30:	4653      	mov	r3, sl
 8003e32:	f108 0201 	add.w	r2, r8, #1
 8003e36:	4631      	mov	r1, r6
 8003e38:	4628      	mov	r0, r5
 8003e3a:	47b8      	blx	r7
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d10c      	bne.n	8003e5a <_printf_float+0x412>
 8003e40:	e65d      	b.n	8003afe <_printf_float+0xb6>
 8003e42:	2301      	movs	r3, #1
 8003e44:	465a      	mov	r2, fp
 8003e46:	4631      	mov	r1, r6
 8003e48:	4628      	mov	r0, r5
 8003e4a:	47b8      	blx	r7
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	f43f ae56 	beq.w	8003afe <_printf_float+0xb6>
 8003e52:	f108 0801 	add.w	r8, r8, #1
 8003e56:	45d0      	cmp	r8, sl
 8003e58:	dbf3      	blt.n	8003e42 <_printf_float+0x3fa>
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003e60:	e6df      	b.n	8003c22 <_printf_float+0x1da>
 8003e62:	f04f 0800 	mov.w	r8, #0
 8003e66:	f104 0b1a 	add.w	fp, r4, #26
 8003e6a:	e7f4      	b.n	8003e56 <_printf_float+0x40e>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4642      	mov	r2, r8
 8003e70:	e7e1      	b.n	8003e36 <_printf_float+0x3ee>
 8003e72:	2301      	movs	r3, #1
 8003e74:	464a      	mov	r2, r9
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b8      	blx	r7
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	f43f ae3e 	beq.w	8003afe <_printf_float+0xb6>
 8003e82:	f108 0801 	add.w	r8, r8, #1
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003e8a:	1a5b      	subs	r3, r3, r1
 8003e8c:	4543      	cmp	r3, r8
 8003e8e:	dcf0      	bgt.n	8003e72 <_printf_float+0x42a>
 8003e90:	e6fc      	b.n	8003c8c <_printf_float+0x244>
 8003e92:	f04f 0800 	mov.w	r8, #0
 8003e96:	f104 0919 	add.w	r9, r4, #25
 8003e9a:	e7f4      	b.n	8003e86 <_printf_float+0x43e>

08003e9c <_printf_common>:
 8003e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	4616      	mov	r6, r2
 8003ea2:	4698      	mov	r8, r3
 8003ea4:	688a      	ldr	r2, [r1, #8]
 8003ea6:	690b      	ldr	r3, [r1, #16]
 8003ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bfb8      	it	lt
 8003eb0:	4613      	movlt	r3, r2
 8003eb2:	6033      	str	r3, [r6, #0]
 8003eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eb8:	4607      	mov	r7, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	b10a      	cbz	r2, 8003ec2 <_printf_common+0x26>
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	6033      	str	r3, [r6, #0]
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	0699      	lsls	r1, r3, #26
 8003ec6:	bf42      	ittt	mi
 8003ec8:	6833      	ldrmi	r3, [r6, #0]
 8003eca:	3302      	addmi	r3, #2
 8003ecc:	6033      	strmi	r3, [r6, #0]
 8003ece:	6825      	ldr	r5, [r4, #0]
 8003ed0:	f015 0506 	ands.w	r5, r5, #6
 8003ed4:	d106      	bne.n	8003ee4 <_printf_common+0x48>
 8003ed6:	f104 0a19 	add.w	sl, r4, #25
 8003eda:	68e3      	ldr	r3, [r4, #12]
 8003edc:	6832      	ldr	r2, [r6, #0]
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	42ab      	cmp	r3, r5
 8003ee2:	dc26      	bgt.n	8003f32 <_printf_common+0x96>
 8003ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	3b00      	subs	r3, #0
 8003eec:	bf18      	it	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	0692      	lsls	r2, r2, #26
 8003ef2:	d42b      	bmi.n	8003f4c <_printf_common+0xb0>
 8003ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ef8:	4641      	mov	r1, r8
 8003efa:	4638      	mov	r0, r7
 8003efc:	47c8      	blx	r9
 8003efe:	3001      	adds	r0, #1
 8003f00:	d01e      	beq.n	8003f40 <_printf_common+0xa4>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	6922      	ldr	r2, [r4, #16]
 8003f06:	f003 0306 	and.w	r3, r3, #6
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	bf02      	ittt	eq
 8003f0e:	68e5      	ldreq	r5, [r4, #12]
 8003f10:	6833      	ldreq	r3, [r6, #0]
 8003f12:	1aed      	subeq	r5, r5, r3
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	bf0c      	ite	eq
 8003f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f1c:	2500      	movne	r5, #0
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	bfc4      	itt	gt
 8003f22:	1a9b      	subgt	r3, r3, r2
 8003f24:	18ed      	addgt	r5, r5, r3
 8003f26:	2600      	movs	r6, #0
 8003f28:	341a      	adds	r4, #26
 8003f2a:	42b5      	cmp	r5, r6
 8003f2c:	d11a      	bne.n	8003f64 <_printf_common+0xc8>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	e008      	b.n	8003f44 <_printf_common+0xa8>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4652      	mov	r2, sl
 8003f36:	4641      	mov	r1, r8
 8003f38:	4638      	mov	r0, r7
 8003f3a:	47c8      	blx	r9
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d103      	bne.n	8003f48 <_printf_common+0xac>
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	3501      	adds	r5, #1
 8003f4a:	e7c6      	b.n	8003eda <_printf_common+0x3e>
 8003f4c:	18e1      	adds	r1, r4, r3
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	2030      	movs	r0, #48	@ 0x30
 8003f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f56:	4422      	add	r2, r4
 8003f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f60:	3302      	adds	r3, #2
 8003f62:	e7c7      	b.n	8003ef4 <_printf_common+0x58>
 8003f64:	2301      	movs	r3, #1
 8003f66:	4622      	mov	r2, r4
 8003f68:	4641      	mov	r1, r8
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	47c8      	blx	r9
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d0e6      	beq.n	8003f40 <_printf_common+0xa4>
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7d9      	b.n	8003f2a <_printf_common+0x8e>
	...

08003f78 <_printf_i>:
 8003f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7c:	7e0f      	ldrb	r7, [r1, #24]
 8003f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f80:	2f78      	cmp	r7, #120	@ 0x78
 8003f82:	4691      	mov	r9, r2
 8003f84:	4680      	mov	r8, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	469a      	mov	sl, r3
 8003f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f8e:	d807      	bhi.n	8003fa0 <_printf_i+0x28>
 8003f90:	2f62      	cmp	r7, #98	@ 0x62
 8003f92:	d80a      	bhi.n	8003faa <_printf_i+0x32>
 8003f94:	2f00      	cmp	r7, #0
 8003f96:	f000 80d2 	beq.w	800413e <_printf_i+0x1c6>
 8003f9a:	2f58      	cmp	r7, #88	@ 0x58
 8003f9c:	f000 80b9 	beq.w	8004112 <_printf_i+0x19a>
 8003fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fa8:	e03a      	b.n	8004020 <_printf_i+0xa8>
 8003faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fae:	2b15      	cmp	r3, #21
 8003fb0:	d8f6      	bhi.n	8003fa0 <_printf_i+0x28>
 8003fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8003fb8 <_printf_i+0x40>)
 8003fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004025 	.word	0x08004025
 8003fc0:	08003fa1 	.word	0x08003fa1
 8003fc4:	08003fa1 	.word	0x08003fa1
 8003fc8:	08003fa1 	.word	0x08003fa1
 8003fcc:	08003fa1 	.word	0x08003fa1
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08003fa1 	.word	0x08003fa1
 8003fd8:	08003fa1 	.word	0x08003fa1
 8003fdc:	08003fa1 	.word	0x08003fa1
 8003fe0:	08003fa1 	.word	0x08003fa1
 8003fe4:	08004125 	.word	0x08004125
 8003fe8:	0800404f 	.word	0x0800404f
 8003fec:	080040df 	.word	0x080040df
 8003ff0:	08003fa1 	.word	0x08003fa1
 8003ff4:	08003fa1 	.word	0x08003fa1
 8003ff8:	08004147 	.word	0x08004147
 8003ffc:	08003fa1 	.word	0x08003fa1
 8004000:	0800404f 	.word	0x0800404f
 8004004:	08003fa1 	.word	0x08003fa1
 8004008:	08003fa1 	.word	0x08003fa1
 800400c:	080040e7 	.word	0x080040e7
 8004010:	6833      	ldr	r3, [r6, #0]
 8004012:	1d1a      	adds	r2, r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6032      	str	r2, [r6, #0]
 8004018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800401c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004020:	2301      	movs	r3, #1
 8004022:	e09d      	b.n	8004160 <_printf_i+0x1e8>
 8004024:	6833      	ldr	r3, [r6, #0]
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	1d19      	adds	r1, r3, #4
 800402a:	6031      	str	r1, [r6, #0]
 800402c:	0606      	lsls	r6, r0, #24
 800402e:	d501      	bpl.n	8004034 <_printf_i+0xbc>
 8004030:	681d      	ldr	r5, [r3, #0]
 8004032:	e003      	b.n	800403c <_printf_i+0xc4>
 8004034:	0645      	lsls	r5, r0, #25
 8004036:	d5fb      	bpl.n	8004030 <_printf_i+0xb8>
 8004038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800403c:	2d00      	cmp	r5, #0
 800403e:	da03      	bge.n	8004048 <_printf_i+0xd0>
 8004040:	232d      	movs	r3, #45	@ 0x2d
 8004042:	426d      	negs	r5, r5
 8004044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004048:	4859      	ldr	r0, [pc, #356]	@ (80041b0 <_printf_i+0x238>)
 800404a:	230a      	movs	r3, #10
 800404c:	e011      	b.n	8004072 <_printf_i+0xfa>
 800404e:	6821      	ldr	r1, [r4, #0]
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	0608      	lsls	r0, r1, #24
 8004054:	f853 5b04 	ldr.w	r5, [r3], #4
 8004058:	d402      	bmi.n	8004060 <_printf_i+0xe8>
 800405a:	0649      	lsls	r1, r1, #25
 800405c:	bf48      	it	mi
 800405e:	b2ad      	uxthmi	r5, r5
 8004060:	2f6f      	cmp	r7, #111	@ 0x6f
 8004062:	4853      	ldr	r0, [pc, #332]	@ (80041b0 <_printf_i+0x238>)
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	bf14      	ite	ne
 8004068:	230a      	movne	r3, #10
 800406a:	2308      	moveq	r3, #8
 800406c:	2100      	movs	r1, #0
 800406e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004072:	6866      	ldr	r6, [r4, #4]
 8004074:	60a6      	str	r6, [r4, #8]
 8004076:	2e00      	cmp	r6, #0
 8004078:	bfa2      	ittt	ge
 800407a:	6821      	ldrge	r1, [r4, #0]
 800407c:	f021 0104 	bicge.w	r1, r1, #4
 8004080:	6021      	strge	r1, [r4, #0]
 8004082:	b90d      	cbnz	r5, 8004088 <_printf_i+0x110>
 8004084:	2e00      	cmp	r6, #0
 8004086:	d04b      	beq.n	8004120 <_printf_i+0x1a8>
 8004088:	4616      	mov	r6, r2
 800408a:	fbb5 f1f3 	udiv	r1, r5, r3
 800408e:	fb03 5711 	mls	r7, r3, r1, r5
 8004092:	5dc7      	ldrb	r7, [r0, r7]
 8004094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004098:	462f      	mov	r7, r5
 800409a:	42bb      	cmp	r3, r7
 800409c:	460d      	mov	r5, r1
 800409e:	d9f4      	bls.n	800408a <_printf_i+0x112>
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d10b      	bne.n	80040bc <_printf_i+0x144>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	07df      	lsls	r7, r3, #31
 80040a8:	d508      	bpl.n	80040bc <_printf_i+0x144>
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	6861      	ldr	r1, [r4, #4]
 80040ae:	4299      	cmp	r1, r3
 80040b0:	bfde      	ittt	le
 80040b2:	2330      	movle	r3, #48	@ 0x30
 80040b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040bc:	1b92      	subs	r2, r2, r6
 80040be:	6122      	str	r2, [r4, #16]
 80040c0:	f8cd a000 	str.w	sl, [sp]
 80040c4:	464b      	mov	r3, r9
 80040c6:	aa03      	add	r2, sp, #12
 80040c8:	4621      	mov	r1, r4
 80040ca:	4640      	mov	r0, r8
 80040cc:	f7ff fee6 	bl	8003e9c <_printf_common>
 80040d0:	3001      	adds	r0, #1
 80040d2:	d14a      	bne.n	800416a <_printf_i+0x1f2>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	b004      	add	sp, #16
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	4833      	ldr	r0, [pc, #204]	@ (80041b4 <_printf_i+0x23c>)
 80040e8:	2778      	movs	r7, #120	@ 0x78
 80040ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	6831      	ldr	r1, [r6, #0]
 80040f2:	061f      	lsls	r7, r3, #24
 80040f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80040f8:	d402      	bmi.n	8004100 <_printf_i+0x188>
 80040fa:	065f      	lsls	r7, r3, #25
 80040fc:	bf48      	it	mi
 80040fe:	b2ad      	uxthmi	r5, r5
 8004100:	6031      	str	r1, [r6, #0]
 8004102:	07d9      	lsls	r1, r3, #31
 8004104:	bf44      	itt	mi
 8004106:	f043 0320 	orrmi.w	r3, r3, #32
 800410a:	6023      	strmi	r3, [r4, #0]
 800410c:	b11d      	cbz	r5, 8004116 <_printf_i+0x19e>
 800410e:	2310      	movs	r3, #16
 8004110:	e7ac      	b.n	800406c <_printf_i+0xf4>
 8004112:	4827      	ldr	r0, [pc, #156]	@ (80041b0 <_printf_i+0x238>)
 8004114:	e7e9      	b.n	80040ea <_printf_i+0x172>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f023 0320 	bic.w	r3, r3, #32
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	e7f6      	b.n	800410e <_printf_i+0x196>
 8004120:	4616      	mov	r6, r2
 8004122:	e7bd      	b.n	80040a0 <_printf_i+0x128>
 8004124:	6833      	ldr	r3, [r6, #0]
 8004126:	6825      	ldr	r5, [r4, #0]
 8004128:	6961      	ldr	r1, [r4, #20]
 800412a:	1d18      	adds	r0, r3, #4
 800412c:	6030      	str	r0, [r6, #0]
 800412e:	062e      	lsls	r6, r5, #24
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	d501      	bpl.n	8004138 <_printf_i+0x1c0>
 8004134:	6019      	str	r1, [r3, #0]
 8004136:	e002      	b.n	800413e <_printf_i+0x1c6>
 8004138:	0668      	lsls	r0, r5, #25
 800413a:	d5fb      	bpl.n	8004134 <_printf_i+0x1bc>
 800413c:	8019      	strh	r1, [r3, #0]
 800413e:	2300      	movs	r3, #0
 8004140:	6123      	str	r3, [r4, #16]
 8004142:	4616      	mov	r6, r2
 8004144:	e7bc      	b.n	80040c0 <_printf_i+0x148>
 8004146:	6833      	ldr	r3, [r6, #0]
 8004148:	1d1a      	adds	r2, r3, #4
 800414a:	6032      	str	r2, [r6, #0]
 800414c:	681e      	ldr	r6, [r3, #0]
 800414e:	6862      	ldr	r2, [r4, #4]
 8004150:	2100      	movs	r1, #0
 8004152:	4630      	mov	r0, r6
 8004154:	f7fc f864 	bl	8000220 <memchr>
 8004158:	b108      	cbz	r0, 800415e <_printf_i+0x1e6>
 800415a:	1b80      	subs	r0, r0, r6
 800415c:	6060      	str	r0, [r4, #4]
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	6123      	str	r3, [r4, #16]
 8004162:	2300      	movs	r3, #0
 8004164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004168:	e7aa      	b.n	80040c0 <_printf_i+0x148>
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	4632      	mov	r2, r6
 800416e:	4649      	mov	r1, r9
 8004170:	4640      	mov	r0, r8
 8004172:	47d0      	blx	sl
 8004174:	3001      	adds	r0, #1
 8004176:	d0ad      	beq.n	80040d4 <_printf_i+0x15c>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	079b      	lsls	r3, r3, #30
 800417c:	d413      	bmi.n	80041a6 <_printf_i+0x22e>
 800417e:	68e0      	ldr	r0, [r4, #12]
 8004180:	9b03      	ldr	r3, [sp, #12]
 8004182:	4298      	cmp	r0, r3
 8004184:	bfb8      	it	lt
 8004186:	4618      	movlt	r0, r3
 8004188:	e7a6      	b.n	80040d8 <_printf_i+0x160>
 800418a:	2301      	movs	r3, #1
 800418c:	4632      	mov	r2, r6
 800418e:	4649      	mov	r1, r9
 8004190:	4640      	mov	r0, r8
 8004192:	47d0      	blx	sl
 8004194:	3001      	adds	r0, #1
 8004196:	d09d      	beq.n	80040d4 <_printf_i+0x15c>
 8004198:	3501      	adds	r5, #1
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	9903      	ldr	r1, [sp, #12]
 800419e:	1a5b      	subs	r3, r3, r1
 80041a0:	42ab      	cmp	r3, r5
 80041a2:	dcf2      	bgt.n	800418a <_printf_i+0x212>
 80041a4:	e7eb      	b.n	800417e <_printf_i+0x206>
 80041a6:	2500      	movs	r5, #0
 80041a8:	f104 0619 	add.w	r6, r4, #25
 80041ac:	e7f5      	b.n	800419a <_printf_i+0x222>
 80041ae:	bf00      	nop
 80041b0:	08006692 	.word	0x08006692
 80041b4:	080066a3 	.word	0x080066a3

080041b8 <std>:
 80041b8:	2300      	movs	r3, #0
 80041ba:	b510      	push	{r4, lr}
 80041bc:	4604      	mov	r4, r0
 80041be:	e9c0 3300 	strd	r3, r3, [r0]
 80041c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041c6:	6083      	str	r3, [r0, #8]
 80041c8:	8181      	strh	r1, [r0, #12]
 80041ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80041cc:	81c2      	strh	r2, [r0, #14]
 80041ce:	6183      	str	r3, [r0, #24]
 80041d0:	4619      	mov	r1, r3
 80041d2:	2208      	movs	r2, #8
 80041d4:	305c      	adds	r0, #92	@ 0x5c
 80041d6:	f000 f914 	bl	8004402 <memset>
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <std+0x58>)
 80041dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <std+0x5c>)
 80041e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <std+0x60>)
 80041e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <std+0x64>)
 80041e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <std+0x68>)
 80041ec:	6224      	str	r4, [r4, #32]
 80041ee:	429c      	cmp	r4, r3
 80041f0:	d006      	beq.n	8004200 <std+0x48>
 80041f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041f6:	4294      	cmp	r4, r2
 80041f8:	d002      	beq.n	8004200 <std+0x48>
 80041fa:	33d0      	adds	r3, #208	@ 0xd0
 80041fc:	429c      	cmp	r4, r3
 80041fe:	d105      	bne.n	800420c <std+0x54>
 8004200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004208:	f000 b978 	b.w	80044fc <__retarget_lock_init_recursive>
 800420c:	bd10      	pop	{r4, pc}
 800420e:	bf00      	nop
 8004210:	0800437d 	.word	0x0800437d
 8004214:	0800439f 	.word	0x0800439f
 8004218:	080043d7 	.word	0x080043d7
 800421c:	080043fb 	.word	0x080043fb
 8004220:	2000028c 	.word	0x2000028c

08004224 <stdio_exit_handler>:
 8004224:	4a02      	ldr	r2, [pc, #8]	@ (8004230 <stdio_exit_handler+0xc>)
 8004226:	4903      	ldr	r1, [pc, #12]	@ (8004234 <stdio_exit_handler+0x10>)
 8004228:	4803      	ldr	r0, [pc, #12]	@ (8004238 <stdio_exit_handler+0x14>)
 800422a:	f000 b869 	b.w	8004300 <_fwalk_sglue>
 800422e:	bf00      	nop
 8004230:	2000000c 	.word	0x2000000c
 8004234:	08005e5d 	.word	0x08005e5d
 8004238:	2000001c 	.word	0x2000001c

0800423c <cleanup_stdio>:
 800423c:	6841      	ldr	r1, [r0, #4]
 800423e:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <cleanup_stdio+0x34>)
 8004240:	4299      	cmp	r1, r3
 8004242:	b510      	push	{r4, lr}
 8004244:	4604      	mov	r4, r0
 8004246:	d001      	beq.n	800424c <cleanup_stdio+0x10>
 8004248:	f001 fe08 	bl	8005e5c <_fflush_r>
 800424c:	68a1      	ldr	r1, [r4, #8]
 800424e:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <cleanup_stdio+0x38>)
 8004250:	4299      	cmp	r1, r3
 8004252:	d002      	beq.n	800425a <cleanup_stdio+0x1e>
 8004254:	4620      	mov	r0, r4
 8004256:	f001 fe01 	bl	8005e5c <_fflush_r>
 800425a:	68e1      	ldr	r1, [r4, #12]
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <cleanup_stdio+0x3c>)
 800425e:	4299      	cmp	r1, r3
 8004260:	d004      	beq.n	800426c <cleanup_stdio+0x30>
 8004262:	4620      	mov	r0, r4
 8004264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004268:	f001 bdf8 	b.w	8005e5c <_fflush_r>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	2000028c 	.word	0x2000028c
 8004274:	200002f4 	.word	0x200002f4
 8004278:	2000035c 	.word	0x2000035c

0800427c <global_stdio_init.part.0>:
 800427c:	b510      	push	{r4, lr}
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <global_stdio_init.part.0+0x30>)
 8004280:	4c0b      	ldr	r4, [pc, #44]	@ (80042b0 <global_stdio_init.part.0+0x34>)
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <global_stdio_init.part.0+0x38>)
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	4620      	mov	r0, r4
 8004288:	2200      	movs	r2, #0
 800428a:	2104      	movs	r1, #4
 800428c:	f7ff ff94 	bl	80041b8 <std>
 8004290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004294:	2201      	movs	r2, #1
 8004296:	2109      	movs	r1, #9
 8004298:	f7ff ff8e 	bl	80041b8 <std>
 800429c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042a0:	2202      	movs	r2, #2
 80042a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a6:	2112      	movs	r1, #18
 80042a8:	f7ff bf86 	b.w	80041b8 <std>
 80042ac:	200003c4 	.word	0x200003c4
 80042b0:	2000028c 	.word	0x2000028c
 80042b4:	08004225 	.word	0x08004225

080042b8 <__sfp_lock_acquire>:
 80042b8:	4801      	ldr	r0, [pc, #4]	@ (80042c0 <__sfp_lock_acquire+0x8>)
 80042ba:	f000 b920 	b.w	80044fe <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	200003cd 	.word	0x200003cd

080042c4 <__sfp_lock_release>:
 80042c4:	4801      	ldr	r0, [pc, #4]	@ (80042cc <__sfp_lock_release+0x8>)
 80042c6:	f000 b91b 	b.w	8004500 <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	200003cd 	.word	0x200003cd

080042d0 <__sinit>:
 80042d0:	b510      	push	{r4, lr}
 80042d2:	4604      	mov	r4, r0
 80042d4:	f7ff fff0 	bl	80042b8 <__sfp_lock_acquire>
 80042d8:	6a23      	ldr	r3, [r4, #32]
 80042da:	b11b      	cbz	r3, 80042e4 <__sinit+0x14>
 80042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e0:	f7ff bff0 	b.w	80042c4 <__sfp_lock_release>
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <__sinit+0x28>)
 80042e6:	6223      	str	r3, [r4, #32]
 80042e8:	4b04      	ldr	r3, [pc, #16]	@ (80042fc <__sinit+0x2c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f5      	bne.n	80042dc <__sinit+0xc>
 80042f0:	f7ff ffc4 	bl	800427c <global_stdio_init.part.0>
 80042f4:	e7f2      	b.n	80042dc <__sinit+0xc>
 80042f6:	bf00      	nop
 80042f8:	0800423d 	.word	0x0800423d
 80042fc:	200003c4 	.word	0x200003c4

08004300 <_fwalk_sglue>:
 8004300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004304:	4607      	mov	r7, r0
 8004306:	4688      	mov	r8, r1
 8004308:	4614      	mov	r4, r2
 800430a:	2600      	movs	r6, #0
 800430c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004310:	f1b9 0901 	subs.w	r9, r9, #1
 8004314:	d505      	bpl.n	8004322 <_fwalk_sglue+0x22>
 8004316:	6824      	ldr	r4, [r4, #0]
 8004318:	2c00      	cmp	r4, #0
 800431a:	d1f7      	bne.n	800430c <_fwalk_sglue+0xc>
 800431c:	4630      	mov	r0, r6
 800431e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d907      	bls.n	8004338 <_fwalk_sglue+0x38>
 8004328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800432c:	3301      	adds	r3, #1
 800432e:	d003      	beq.n	8004338 <_fwalk_sglue+0x38>
 8004330:	4629      	mov	r1, r5
 8004332:	4638      	mov	r0, r7
 8004334:	47c0      	blx	r8
 8004336:	4306      	orrs	r6, r0
 8004338:	3568      	adds	r5, #104	@ 0x68
 800433a:	e7e9      	b.n	8004310 <_fwalk_sglue+0x10>

0800433c <siprintf>:
 800433c:	b40e      	push	{r1, r2, r3}
 800433e:	b500      	push	{lr}
 8004340:	b09c      	sub	sp, #112	@ 0x70
 8004342:	ab1d      	add	r3, sp, #116	@ 0x74
 8004344:	9002      	str	r0, [sp, #8]
 8004346:	9006      	str	r0, [sp, #24]
 8004348:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800434c:	4809      	ldr	r0, [pc, #36]	@ (8004374 <siprintf+0x38>)
 800434e:	9107      	str	r1, [sp, #28]
 8004350:	9104      	str	r1, [sp, #16]
 8004352:	4909      	ldr	r1, [pc, #36]	@ (8004378 <siprintf+0x3c>)
 8004354:	f853 2b04 	ldr.w	r2, [r3], #4
 8004358:	9105      	str	r1, [sp, #20]
 800435a:	6800      	ldr	r0, [r0, #0]
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	a902      	add	r1, sp, #8
 8004360:	f001 fbfc 	bl	8005b5c <_svfiprintf_r>
 8004364:	9b02      	ldr	r3, [sp, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	b01c      	add	sp, #112	@ 0x70
 800436c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004370:	b003      	add	sp, #12
 8004372:	4770      	bx	lr
 8004374:	20000018 	.word	0x20000018
 8004378:	ffff0208 	.word	0xffff0208

0800437c <__sread>:
 800437c:	b510      	push	{r4, lr}
 800437e:	460c      	mov	r4, r1
 8004380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004384:	f000 f86c 	bl	8004460 <_read_r>
 8004388:	2800      	cmp	r0, #0
 800438a:	bfab      	itete	ge
 800438c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800438e:	89a3      	ldrhlt	r3, [r4, #12]
 8004390:	181b      	addge	r3, r3, r0
 8004392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004396:	bfac      	ite	ge
 8004398:	6563      	strge	r3, [r4, #84]	@ 0x54
 800439a:	81a3      	strhlt	r3, [r4, #12]
 800439c:	bd10      	pop	{r4, pc}

0800439e <__swrite>:
 800439e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a2:	461f      	mov	r7, r3
 80043a4:	898b      	ldrh	r3, [r1, #12]
 80043a6:	05db      	lsls	r3, r3, #23
 80043a8:	4605      	mov	r5, r0
 80043aa:	460c      	mov	r4, r1
 80043ac:	4616      	mov	r6, r2
 80043ae:	d505      	bpl.n	80043bc <__swrite+0x1e>
 80043b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b4:	2302      	movs	r3, #2
 80043b6:	2200      	movs	r2, #0
 80043b8:	f000 f840 	bl	800443c <_lseek_r>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	4632      	mov	r2, r6
 80043ca:	463b      	mov	r3, r7
 80043cc:	4628      	mov	r0, r5
 80043ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043d2:	f000 b857 	b.w	8004484 <_write_r>

080043d6 <__sseek>:
 80043d6:	b510      	push	{r4, lr}
 80043d8:	460c      	mov	r4, r1
 80043da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043de:	f000 f82d 	bl	800443c <_lseek_r>
 80043e2:	1c43      	adds	r3, r0, #1
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	bf15      	itete	ne
 80043e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043f2:	81a3      	strheq	r3, [r4, #12]
 80043f4:	bf18      	it	ne
 80043f6:	81a3      	strhne	r3, [r4, #12]
 80043f8:	bd10      	pop	{r4, pc}

080043fa <__sclose>:
 80043fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fe:	f000 b80d 	b.w	800441c <_close_r>

08004402 <memset>:
 8004402:	4402      	add	r2, r0
 8004404:	4603      	mov	r3, r0
 8004406:	4293      	cmp	r3, r2
 8004408:	d100      	bne.n	800440c <memset+0xa>
 800440a:	4770      	bx	lr
 800440c:	f803 1b01 	strb.w	r1, [r3], #1
 8004410:	e7f9      	b.n	8004406 <memset+0x4>
	...

08004414 <_localeconv_r>:
 8004414:	4800      	ldr	r0, [pc, #0]	@ (8004418 <_localeconv_r+0x4>)
 8004416:	4770      	bx	lr
 8004418:	20000158 	.word	0x20000158

0800441c <_close_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4d06      	ldr	r5, [pc, #24]	@ (8004438 <_close_r+0x1c>)
 8004420:	2300      	movs	r3, #0
 8004422:	4604      	mov	r4, r0
 8004424:	4608      	mov	r0, r1
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	f7fd f801 	bl	800142e <_close>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_close_r+0x1a>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_close_r+0x1a>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	200003c8 	.word	0x200003c8

0800443c <_lseek_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4d07      	ldr	r5, [pc, #28]	@ (800445c <_lseek_r+0x20>)
 8004440:	4604      	mov	r4, r0
 8004442:	4608      	mov	r0, r1
 8004444:	4611      	mov	r1, r2
 8004446:	2200      	movs	r2, #0
 8004448:	602a      	str	r2, [r5, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	f7fd f816 	bl	800147c <_lseek>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_lseek_r+0x1e>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	b103      	cbz	r3, 800445a <_lseek_r+0x1e>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	200003c8 	.word	0x200003c8

08004460 <_read_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4d07      	ldr	r5, [pc, #28]	@ (8004480 <_read_r+0x20>)
 8004464:	4604      	mov	r4, r0
 8004466:	4608      	mov	r0, r1
 8004468:	4611      	mov	r1, r2
 800446a:	2200      	movs	r2, #0
 800446c:	602a      	str	r2, [r5, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f7fc ffa4 	bl	80013bc <_read>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_read_r+0x1e>
 8004478:	682b      	ldr	r3, [r5, #0]
 800447a:	b103      	cbz	r3, 800447e <_read_r+0x1e>
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	200003c8 	.word	0x200003c8

08004484 <_write_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4d07      	ldr	r5, [pc, #28]	@ (80044a4 <_write_r+0x20>)
 8004488:	4604      	mov	r4, r0
 800448a:	4608      	mov	r0, r1
 800448c:	4611      	mov	r1, r2
 800448e:	2200      	movs	r2, #0
 8004490:	602a      	str	r2, [r5, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f7fc ffaf 	bl	80013f6 <_write>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_write_r+0x1e>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_write_r+0x1e>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	200003c8 	.word	0x200003c8

080044a8 <__errno>:
 80044a8:	4b01      	ldr	r3, [pc, #4]	@ (80044b0 <__errno+0x8>)
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000018 	.word	0x20000018

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4d0d      	ldr	r5, [pc, #52]	@ (80044ec <__libc_init_array+0x38>)
 80044b8:	4c0d      	ldr	r4, [pc, #52]	@ (80044f0 <__libc_init_array+0x3c>)
 80044ba:	1b64      	subs	r4, r4, r5
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	2600      	movs	r6, #0
 80044c0:	42a6      	cmp	r6, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	4d0b      	ldr	r5, [pc, #44]	@ (80044f4 <__libc_init_array+0x40>)
 80044c6:	4c0c      	ldr	r4, [pc, #48]	@ (80044f8 <__libc_init_array+0x44>)
 80044c8:	f002 f866 	bl	8006598 <_init>
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	2600      	movs	r6, #0
 80044d2:	42a6      	cmp	r6, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044dc:	4798      	blx	r3
 80044de:	3601      	adds	r6, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e6:	4798      	blx	r3
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	080069f8 	.word	0x080069f8
 80044f0:	080069f8 	.word	0x080069f8
 80044f4:	080069f8 	.word	0x080069f8
 80044f8:	080069fc 	.word	0x080069fc

080044fc <__retarget_lock_init_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_acquire_recursive>:
 80044fe:	4770      	bx	lr

08004500 <__retarget_lock_release_recursive>:
 8004500:	4770      	bx	lr

08004502 <quorem>:
 8004502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004506:	6903      	ldr	r3, [r0, #16]
 8004508:	690c      	ldr	r4, [r1, #16]
 800450a:	42a3      	cmp	r3, r4
 800450c:	4607      	mov	r7, r0
 800450e:	db7e      	blt.n	800460e <quorem+0x10c>
 8004510:	3c01      	subs	r4, #1
 8004512:	f101 0814 	add.w	r8, r1, #20
 8004516:	00a3      	lsls	r3, r4, #2
 8004518:	f100 0514 	add.w	r5, r0, #20
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800452c:	3301      	adds	r3, #1
 800452e:	429a      	cmp	r2, r3
 8004530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004534:	fbb2 f6f3 	udiv	r6, r2, r3
 8004538:	d32e      	bcc.n	8004598 <quorem+0x96>
 800453a:	f04f 0a00 	mov.w	sl, #0
 800453e:	46c4      	mov	ip, r8
 8004540:	46ae      	mov	lr, r5
 8004542:	46d3      	mov	fp, sl
 8004544:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004548:	b298      	uxth	r0, r3
 800454a:	fb06 a000 	mla	r0, r6, r0, sl
 800454e:	0c02      	lsrs	r2, r0, #16
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	fb06 2303 	mla	r3, r6, r3, r2
 8004556:	f8de 2000 	ldr.w	r2, [lr]
 800455a:	b280      	uxth	r0, r0
 800455c:	b292      	uxth	r2, r2
 800455e:	1a12      	subs	r2, r2, r0
 8004560:	445a      	add	r2, fp
 8004562:	f8de 0000 	ldr.w	r0, [lr]
 8004566:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800456a:	b29b      	uxth	r3, r3
 800456c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004570:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004574:	b292      	uxth	r2, r2
 8004576:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800457a:	45e1      	cmp	r9, ip
 800457c:	f84e 2b04 	str.w	r2, [lr], #4
 8004580:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004584:	d2de      	bcs.n	8004544 <quorem+0x42>
 8004586:	9b00      	ldr	r3, [sp, #0]
 8004588:	58eb      	ldr	r3, [r5, r3]
 800458a:	b92b      	cbnz	r3, 8004598 <quorem+0x96>
 800458c:	9b01      	ldr	r3, [sp, #4]
 800458e:	3b04      	subs	r3, #4
 8004590:	429d      	cmp	r5, r3
 8004592:	461a      	mov	r2, r3
 8004594:	d32f      	bcc.n	80045f6 <quorem+0xf4>
 8004596:	613c      	str	r4, [r7, #16]
 8004598:	4638      	mov	r0, r7
 800459a:	f001 f97b 	bl	8005894 <__mcmp>
 800459e:	2800      	cmp	r0, #0
 80045a0:	db25      	blt.n	80045ee <quorem+0xec>
 80045a2:	4629      	mov	r1, r5
 80045a4:	2000      	movs	r0, #0
 80045a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80045aa:	f8d1 c000 	ldr.w	ip, [r1]
 80045ae:	fa1f fe82 	uxth.w	lr, r2
 80045b2:	fa1f f38c 	uxth.w	r3, ip
 80045b6:	eba3 030e 	sub.w	r3, r3, lr
 80045ba:	4403      	add	r3, r0
 80045bc:	0c12      	lsrs	r2, r2, #16
 80045be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045cc:	45c1      	cmp	r9, r8
 80045ce:	f841 3b04 	str.w	r3, [r1], #4
 80045d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045d6:	d2e6      	bcs.n	80045a6 <quorem+0xa4>
 80045d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045e0:	b922      	cbnz	r2, 80045ec <quorem+0xea>
 80045e2:	3b04      	subs	r3, #4
 80045e4:	429d      	cmp	r5, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	d30b      	bcc.n	8004602 <quorem+0x100>
 80045ea:	613c      	str	r4, [r7, #16]
 80045ec:	3601      	adds	r6, #1
 80045ee:	4630      	mov	r0, r6
 80045f0:	b003      	add	sp, #12
 80045f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	3b04      	subs	r3, #4
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d1cb      	bne.n	8004596 <quorem+0x94>
 80045fe:	3c01      	subs	r4, #1
 8004600:	e7c6      	b.n	8004590 <quorem+0x8e>
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	3b04      	subs	r3, #4
 8004606:	2a00      	cmp	r2, #0
 8004608:	d1ef      	bne.n	80045ea <quorem+0xe8>
 800460a:	3c01      	subs	r4, #1
 800460c:	e7ea      	b.n	80045e4 <quorem+0xe2>
 800460e:	2000      	movs	r0, #0
 8004610:	e7ee      	b.n	80045f0 <quorem+0xee>
 8004612:	0000      	movs	r0, r0
 8004614:	0000      	movs	r0, r0
	...

08004618 <_dtoa_r>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	69c7      	ldr	r7, [r0, #28]
 800461e:	b099      	sub	sp, #100	@ 0x64
 8004620:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004624:	ec55 4b10 	vmov	r4, r5, d0
 8004628:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800462a:	9109      	str	r1, [sp, #36]	@ 0x24
 800462c:	4683      	mov	fp, r0
 800462e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004630:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004632:	b97f      	cbnz	r7, 8004654 <_dtoa_r+0x3c>
 8004634:	2010      	movs	r0, #16
 8004636:	f000 fdfd 	bl	8005234 <malloc>
 800463a:	4602      	mov	r2, r0
 800463c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004640:	b920      	cbnz	r0, 800464c <_dtoa_r+0x34>
 8004642:	4ba7      	ldr	r3, [pc, #668]	@ (80048e0 <_dtoa_r+0x2c8>)
 8004644:	21ef      	movs	r1, #239	@ 0xef
 8004646:	48a7      	ldr	r0, [pc, #668]	@ (80048e4 <_dtoa_r+0x2cc>)
 8004648:	f001 fc68 	bl	8005f1c <__assert_func>
 800464c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004650:	6007      	str	r7, [r0, #0]
 8004652:	60c7      	str	r7, [r0, #12]
 8004654:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	b159      	cbz	r1, 8004674 <_dtoa_r+0x5c>
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	604a      	str	r2, [r1, #4]
 8004660:	2301      	movs	r3, #1
 8004662:	4093      	lsls	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
 8004666:	4658      	mov	r0, fp
 8004668:	f000 feda 	bl	8005420 <_Bfree>
 800466c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	1e2b      	subs	r3, r5, #0
 8004676:	bfb9      	ittee	lt
 8004678:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800467c:	9303      	strlt	r3, [sp, #12]
 800467e:	2300      	movge	r3, #0
 8004680:	6033      	strge	r3, [r6, #0]
 8004682:	9f03      	ldr	r7, [sp, #12]
 8004684:	4b98      	ldr	r3, [pc, #608]	@ (80048e8 <_dtoa_r+0x2d0>)
 8004686:	bfbc      	itt	lt
 8004688:	2201      	movlt	r2, #1
 800468a:	6032      	strlt	r2, [r6, #0]
 800468c:	43bb      	bics	r3, r7
 800468e:	d112      	bne.n	80046b6 <_dtoa_r+0x9e>
 8004690:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004692:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800469c:	4323      	orrs	r3, r4
 800469e:	f000 854d 	beq.w	800513c <_dtoa_r+0xb24>
 80046a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80048fc <_dtoa_r+0x2e4>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 854f 	beq.w	800514c <_dtoa_r+0xb34>
 80046ae:	f10a 0303 	add.w	r3, sl, #3
 80046b2:	f000 bd49 	b.w	8005148 <_dtoa_r+0xb30>
 80046b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	ec51 0b17 	vmov	r0, r1, d7
 80046c0:	2300      	movs	r3, #0
 80046c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80046c6:	f7fc fa27 	bl	8000b18 <__aeabi_dcmpeq>
 80046ca:	4680      	mov	r8, r0
 80046cc:	b158      	cbz	r0, 80046e6 <_dtoa_r+0xce>
 80046ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80046d0:	2301      	movs	r3, #1
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046d6:	b113      	cbz	r3, 80046de <_dtoa_r+0xc6>
 80046d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80046da:	4b84      	ldr	r3, [pc, #528]	@ (80048ec <_dtoa_r+0x2d4>)
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004900 <_dtoa_r+0x2e8>
 80046e2:	f000 bd33 	b.w	800514c <_dtoa_r+0xb34>
 80046e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80046ea:	aa16      	add	r2, sp, #88	@ 0x58
 80046ec:	a917      	add	r1, sp, #92	@ 0x5c
 80046ee:	4658      	mov	r0, fp
 80046f0:	f001 f980 	bl	80059f4 <__d2b>
 80046f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80046f8:	4681      	mov	r9, r0
 80046fa:	2e00      	cmp	r6, #0
 80046fc:	d077      	beq.n	80047ee <_dtoa_r+0x1d6>
 80046fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004700:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800470c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004710:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004714:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004718:	4619      	mov	r1, r3
 800471a:	2200      	movs	r2, #0
 800471c:	4b74      	ldr	r3, [pc, #464]	@ (80048f0 <_dtoa_r+0x2d8>)
 800471e:	f7fb fddb 	bl	80002d8 <__aeabi_dsub>
 8004722:	a369      	add	r3, pc, #420	@ (adr r3, 80048c8 <_dtoa_r+0x2b0>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb ff8e 	bl	8000648 <__aeabi_dmul>
 800472c:	a368      	add	r3, pc, #416	@ (adr r3, 80048d0 <_dtoa_r+0x2b8>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb fdd3 	bl	80002dc <__adddf3>
 8004736:	4604      	mov	r4, r0
 8004738:	4630      	mov	r0, r6
 800473a:	460d      	mov	r5, r1
 800473c:	f7fb ff1a 	bl	8000574 <__aeabi_i2d>
 8004740:	a365      	add	r3, pc, #404	@ (adr r3, 80048d8 <_dtoa_r+0x2c0>)
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f7fb ff7f 	bl	8000648 <__aeabi_dmul>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fdc3 	bl	80002dc <__adddf3>
 8004756:	4604      	mov	r4, r0
 8004758:	460d      	mov	r5, r1
 800475a:	f7fc fa25 	bl	8000ba8 <__aeabi_d2iz>
 800475e:	2200      	movs	r2, #0
 8004760:	4607      	mov	r7, r0
 8004762:	2300      	movs	r3, #0
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fc f9e0 	bl	8000b2c <__aeabi_dcmplt>
 800476c:	b140      	cbz	r0, 8004780 <_dtoa_r+0x168>
 800476e:	4638      	mov	r0, r7
 8004770:	f7fb ff00 	bl	8000574 <__aeabi_i2d>
 8004774:	4622      	mov	r2, r4
 8004776:	462b      	mov	r3, r5
 8004778:	f7fc f9ce 	bl	8000b18 <__aeabi_dcmpeq>
 800477c:	b900      	cbnz	r0, 8004780 <_dtoa_r+0x168>
 800477e:	3f01      	subs	r7, #1
 8004780:	2f16      	cmp	r7, #22
 8004782:	d851      	bhi.n	8004828 <_dtoa_r+0x210>
 8004784:	4b5b      	ldr	r3, [pc, #364]	@ (80048f4 <_dtoa_r+0x2dc>)
 8004786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004792:	f7fc f9cb 	bl	8000b2c <__aeabi_dcmplt>
 8004796:	2800      	cmp	r0, #0
 8004798:	d048      	beq.n	800482c <_dtoa_r+0x214>
 800479a:	3f01      	subs	r7, #1
 800479c:	2300      	movs	r3, #0
 800479e:	9312      	str	r3, [sp, #72]	@ 0x48
 80047a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80047a2:	1b9b      	subs	r3, r3, r6
 80047a4:	1e5a      	subs	r2, r3, #1
 80047a6:	bf44      	itt	mi
 80047a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80047ac:	2300      	movmi	r3, #0
 80047ae:	9208      	str	r2, [sp, #32]
 80047b0:	bf54      	ite	pl
 80047b2:	f04f 0800 	movpl.w	r8, #0
 80047b6:	9308      	strmi	r3, [sp, #32]
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	db39      	blt.n	8004830 <_dtoa_r+0x218>
 80047bc:	9b08      	ldr	r3, [sp, #32]
 80047be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80047c0:	443b      	add	r3, r7
 80047c2:	9308      	str	r3, [sp, #32]
 80047c4:	2300      	movs	r3, #0
 80047c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d864      	bhi.n	8004898 <_dtoa_r+0x280>
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	bfc4      	itt	gt
 80047d2:	3b04      	subgt	r3, #4
 80047d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80047d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047d8:	f1a3 0302 	sub.w	r3, r3, #2
 80047dc:	bfcc      	ite	gt
 80047de:	2400      	movgt	r4, #0
 80047e0:	2401      	movle	r4, #1
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d863      	bhi.n	80048ae <_dtoa_r+0x296>
 80047e6:	e8df f003 	tbb	[pc, r3]
 80047ea:	372a      	.short	0x372a
 80047ec:	5535      	.short	0x5535
 80047ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80047f2:	441e      	add	r6, r3
 80047f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	bfc1      	itttt	gt
 80047fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004800:	409f      	lslgt	r7, r3
 8004802:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004806:	fa24 f303 	lsrgt.w	r3, r4, r3
 800480a:	bfd6      	itet	le
 800480c:	f1c3 0320 	rsble	r3, r3, #32
 8004810:	ea47 0003 	orrgt.w	r0, r7, r3
 8004814:	fa04 f003 	lslle.w	r0, r4, r3
 8004818:	f7fb fe9c 	bl	8000554 <__aeabi_ui2d>
 800481c:	2201      	movs	r2, #1
 800481e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004822:	3e01      	subs	r6, #1
 8004824:	9214      	str	r2, [sp, #80]	@ 0x50
 8004826:	e777      	b.n	8004718 <_dtoa_r+0x100>
 8004828:	2301      	movs	r3, #1
 800482a:	e7b8      	b.n	800479e <_dtoa_r+0x186>
 800482c:	9012      	str	r0, [sp, #72]	@ 0x48
 800482e:	e7b7      	b.n	80047a0 <_dtoa_r+0x188>
 8004830:	427b      	negs	r3, r7
 8004832:	930a      	str	r3, [sp, #40]	@ 0x28
 8004834:	2300      	movs	r3, #0
 8004836:	eba8 0807 	sub.w	r8, r8, r7
 800483a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800483c:	e7c4      	b.n	80047c8 <_dtoa_r+0x1b0>
 800483e:	2300      	movs	r3, #0
 8004840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	dc35      	bgt.n	80048b4 <_dtoa_r+0x29c>
 8004848:	2301      	movs	r3, #1
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	9307      	str	r3, [sp, #28]
 800484e:	461a      	mov	r2, r3
 8004850:	920e      	str	r2, [sp, #56]	@ 0x38
 8004852:	e00b      	b.n	800486c <_dtoa_r+0x254>
 8004854:	2301      	movs	r3, #1
 8004856:	e7f3      	b.n	8004840 <_dtoa_r+0x228>
 8004858:	2300      	movs	r3, #0
 800485a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800485c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	9307      	str	r3, [sp, #28]
 8004868:	bfb8      	it	lt
 800486a:	2301      	movlt	r3, #1
 800486c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004870:	2100      	movs	r1, #0
 8004872:	2204      	movs	r2, #4
 8004874:	f102 0514 	add.w	r5, r2, #20
 8004878:	429d      	cmp	r5, r3
 800487a:	d91f      	bls.n	80048bc <_dtoa_r+0x2a4>
 800487c:	6041      	str	r1, [r0, #4]
 800487e:	4658      	mov	r0, fp
 8004880:	f000 fd8e 	bl	80053a0 <_Balloc>
 8004884:	4682      	mov	sl, r0
 8004886:	2800      	cmp	r0, #0
 8004888:	d13c      	bne.n	8004904 <_dtoa_r+0x2ec>
 800488a:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <_dtoa_r+0x2e0>)
 800488c:	4602      	mov	r2, r0
 800488e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004892:	e6d8      	b.n	8004646 <_dtoa_r+0x2e>
 8004894:	2301      	movs	r3, #1
 8004896:	e7e0      	b.n	800485a <_dtoa_r+0x242>
 8004898:	2401      	movs	r4, #1
 800489a:	2300      	movs	r3, #0
 800489c:	9309      	str	r3, [sp, #36]	@ 0x24
 800489e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2312      	movs	r3, #18
 80048ac:	e7d0      	b.n	8004850 <_dtoa_r+0x238>
 80048ae:	2301      	movs	r3, #1
 80048b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048b2:	e7f5      	b.n	80048a0 <_dtoa_r+0x288>
 80048b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	9307      	str	r3, [sp, #28]
 80048ba:	e7d7      	b.n	800486c <_dtoa_r+0x254>
 80048bc:	3101      	adds	r1, #1
 80048be:	0052      	lsls	r2, r2, #1
 80048c0:	e7d8      	b.n	8004874 <_dtoa_r+0x25c>
 80048c2:	bf00      	nop
 80048c4:	f3af 8000 	nop.w
 80048c8:	636f4361 	.word	0x636f4361
 80048cc:	3fd287a7 	.word	0x3fd287a7
 80048d0:	8b60c8b3 	.word	0x8b60c8b3
 80048d4:	3fc68a28 	.word	0x3fc68a28
 80048d8:	509f79fb 	.word	0x509f79fb
 80048dc:	3fd34413 	.word	0x3fd34413
 80048e0:	080066c1 	.word	0x080066c1
 80048e4:	080066d8 	.word	0x080066d8
 80048e8:	7ff00000 	.word	0x7ff00000
 80048ec:	08006691 	.word	0x08006691
 80048f0:	3ff80000 	.word	0x3ff80000
 80048f4:	080067d0 	.word	0x080067d0
 80048f8:	08006730 	.word	0x08006730
 80048fc:	080066bd 	.word	0x080066bd
 8004900:	08006690 	.word	0x08006690
 8004904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004908:	6018      	str	r0, [r3, #0]
 800490a:	9b07      	ldr	r3, [sp, #28]
 800490c:	2b0e      	cmp	r3, #14
 800490e:	f200 80a4 	bhi.w	8004a5a <_dtoa_r+0x442>
 8004912:	2c00      	cmp	r4, #0
 8004914:	f000 80a1 	beq.w	8004a5a <_dtoa_r+0x442>
 8004918:	2f00      	cmp	r7, #0
 800491a:	dd33      	ble.n	8004984 <_dtoa_r+0x36c>
 800491c:	4bad      	ldr	r3, [pc, #692]	@ (8004bd4 <_dtoa_r+0x5bc>)
 800491e:	f007 020f 	and.w	r2, r7, #15
 8004922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004926:	ed93 7b00 	vldr	d7, [r3]
 800492a:	05f8      	lsls	r0, r7, #23
 800492c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004930:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004934:	d516      	bpl.n	8004964 <_dtoa_r+0x34c>
 8004936:	4ba8      	ldr	r3, [pc, #672]	@ (8004bd8 <_dtoa_r+0x5c0>)
 8004938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800493c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004940:	f7fb ffac 	bl	800089c <__aeabi_ddiv>
 8004944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004948:	f004 040f 	and.w	r4, r4, #15
 800494c:	2603      	movs	r6, #3
 800494e:	4da2      	ldr	r5, [pc, #648]	@ (8004bd8 <_dtoa_r+0x5c0>)
 8004950:	b954      	cbnz	r4, 8004968 <_dtoa_r+0x350>
 8004952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800495a:	f7fb ff9f 	bl	800089c <__aeabi_ddiv>
 800495e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004962:	e028      	b.n	80049b6 <_dtoa_r+0x39e>
 8004964:	2602      	movs	r6, #2
 8004966:	e7f2      	b.n	800494e <_dtoa_r+0x336>
 8004968:	07e1      	lsls	r1, r4, #31
 800496a:	d508      	bpl.n	800497e <_dtoa_r+0x366>
 800496c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004970:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004974:	f7fb fe68 	bl	8000648 <__aeabi_dmul>
 8004978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800497c:	3601      	adds	r6, #1
 800497e:	1064      	asrs	r4, r4, #1
 8004980:	3508      	adds	r5, #8
 8004982:	e7e5      	b.n	8004950 <_dtoa_r+0x338>
 8004984:	f000 80d2 	beq.w	8004b2c <_dtoa_r+0x514>
 8004988:	427c      	negs	r4, r7
 800498a:	4b92      	ldr	r3, [pc, #584]	@ (8004bd4 <_dtoa_r+0x5bc>)
 800498c:	4d92      	ldr	r5, [pc, #584]	@ (8004bd8 <_dtoa_r+0x5c0>)
 800498e:	f004 020f 	and.w	r2, r4, #15
 8004992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800499e:	f7fb fe53 	bl	8000648 <__aeabi_dmul>
 80049a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a6:	1124      	asrs	r4, r4, #4
 80049a8:	2300      	movs	r3, #0
 80049aa:	2602      	movs	r6, #2
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	f040 80b2 	bne.w	8004b16 <_dtoa_r+0x4fe>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1d3      	bne.n	800495e <_dtoa_r+0x346>
 80049b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80049b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80b7 	beq.w	8004b30 <_dtoa_r+0x518>
 80049c2:	4b86      	ldr	r3, [pc, #536]	@ (8004bdc <_dtoa_r+0x5c4>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fc f8af 	bl	8000b2c <__aeabi_dcmplt>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f000 80ae 	beq.w	8004b30 <_dtoa_r+0x518>
 80049d4:	9b07      	ldr	r3, [sp, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80aa 	beq.w	8004b30 <_dtoa_r+0x518>
 80049dc:	9b00      	ldr	r3, [sp, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd37      	ble.n	8004a52 <_dtoa_r+0x43a>
 80049e2:	1e7b      	subs	r3, r7, #1
 80049e4:	9304      	str	r3, [sp, #16]
 80049e6:	4620      	mov	r0, r4
 80049e8:	4b7d      	ldr	r3, [pc, #500]	@ (8004be0 <_dtoa_r+0x5c8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	4629      	mov	r1, r5
 80049ee:	f7fb fe2b 	bl	8000648 <__aeabi_dmul>
 80049f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049f6:	9c00      	ldr	r4, [sp, #0]
 80049f8:	3601      	adds	r6, #1
 80049fa:	4630      	mov	r0, r6
 80049fc:	f7fb fdba 	bl	8000574 <__aeabi_i2d>
 8004a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a04:	f7fb fe20 	bl	8000648 <__aeabi_dmul>
 8004a08:	4b76      	ldr	r3, [pc, #472]	@ (8004be4 <_dtoa_r+0x5cc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f7fb fc66 	bl	80002dc <__adddf3>
 8004a10:	4605      	mov	r5, r0
 8004a12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a16:	2c00      	cmp	r4, #0
 8004a18:	f040 808d 	bne.w	8004b36 <_dtoa_r+0x51e>
 8004a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a20:	4b71      	ldr	r3, [pc, #452]	@ (8004be8 <_dtoa_r+0x5d0>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	f7fb fc58 	bl	80002d8 <__aeabi_dsub>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4633      	mov	r3, r6
 8004a34:	f7fc f898 	bl	8000b68 <__aeabi_dcmpgt>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f040 828b 	bne.w	8004f54 <_dtoa_r+0x93c>
 8004a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a42:	462a      	mov	r2, r5
 8004a44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a48:	f7fc f870 	bl	8000b2c <__aeabi_dcmplt>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f040 8128 	bne.w	8004ca2 <_dtoa_r+0x68a>
 8004a52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f2c0 815a 	blt.w	8004d16 <_dtoa_r+0x6fe>
 8004a62:	2f0e      	cmp	r7, #14
 8004a64:	f300 8157 	bgt.w	8004d16 <_dtoa_r+0x6fe>
 8004a68:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd4 <_dtoa_r+0x5bc>)
 8004a6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a6e:	ed93 7b00 	vldr	d7, [r3]
 8004a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	ed8d 7b00 	vstr	d7, [sp]
 8004a7a:	da03      	bge.n	8004a84 <_dtoa_r+0x46c>
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f340 8101 	ble.w	8004c86 <_dtoa_r+0x66e>
 8004a84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a88:	4656      	mov	r6, sl
 8004a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	f7fb ff03 	bl	800089c <__aeabi_ddiv>
 8004a96:	f7fc f887 	bl	8000ba8 <__aeabi_d2iz>
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	f7fb fd6a 	bl	8000574 <__aeabi_i2d>
 8004aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aa4:	f7fb fdd0 	bl	8000648 <__aeabi_dmul>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4620      	mov	r0, r4
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ab4:	f7fb fc10 	bl	80002d8 <__aeabi_dsub>
 8004ab8:	f806 4b01 	strb.w	r4, [r6], #1
 8004abc:	9d07      	ldr	r5, [sp, #28]
 8004abe:	eba6 040a 	sub.w	r4, r6, sl
 8004ac2:	42a5      	cmp	r5, r4
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	f040 8117 	bne.w	8004cfa <_dtoa_r+0x6e2>
 8004acc:	f7fb fc06 	bl	80002dc <__adddf3>
 8004ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	f7fc f846 	bl	8000b68 <__aeabi_dcmpgt>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f040 80f9 	bne.w	8004cd4 <_dtoa_r+0x6bc>
 8004ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	4629      	mov	r1, r5
 8004aea:	f7fc f815 	bl	8000b18 <__aeabi_dcmpeq>
 8004aee:	b118      	cbz	r0, 8004af8 <_dtoa_r+0x4e0>
 8004af0:	f018 0f01 	tst.w	r8, #1
 8004af4:	f040 80ee 	bne.w	8004cd4 <_dtoa_r+0x6bc>
 8004af8:	4649      	mov	r1, r9
 8004afa:	4658      	mov	r0, fp
 8004afc:	f000 fc90 	bl	8005420 <_Bfree>
 8004b00:	2300      	movs	r3, #0
 8004b02:	7033      	strb	r3, [r6, #0]
 8004b04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004b06:	3701      	adds	r7, #1
 8004b08:	601f      	str	r7, [r3, #0]
 8004b0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 831d 	beq.w	800514c <_dtoa_r+0xb34>
 8004b12:	601e      	str	r6, [r3, #0]
 8004b14:	e31a      	b.n	800514c <_dtoa_r+0xb34>
 8004b16:	07e2      	lsls	r2, r4, #31
 8004b18:	d505      	bpl.n	8004b26 <_dtoa_r+0x50e>
 8004b1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b1e:	f7fb fd93 	bl	8000648 <__aeabi_dmul>
 8004b22:	3601      	adds	r6, #1
 8004b24:	2301      	movs	r3, #1
 8004b26:	1064      	asrs	r4, r4, #1
 8004b28:	3508      	adds	r5, #8
 8004b2a:	e73f      	b.n	80049ac <_dtoa_r+0x394>
 8004b2c:	2602      	movs	r6, #2
 8004b2e:	e742      	b.n	80049b6 <_dtoa_r+0x39e>
 8004b30:	9c07      	ldr	r4, [sp, #28]
 8004b32:	9704      	str	r7, [sp, #16]
 8004b34:	e761      	b.n	80049fa <_dtoa_r+0x3e2>
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <_dtoa_r+0x5bc>)
 8004b38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b42:	4454      	add	r4, sl
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d053      	beq.n	8004bf0 <_dtoa_r+0x5d8>
 8004b48:	4928      	ldr	r1, [pc, #160]	@ (8004bec <_dtoa_r+0x5d4>)
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fb fea6 	bl	800089c <__aeabi_ddiv>
 8004b50:	4633      	mov	r3, r6
 8004b52:	462a      	mov	r2, r5
 8004b54:	f7fb fbc0 	bl	80002d8 <__aeabi_dsub>
 8004b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b5c:	4656      	mov	r6, sl
 8004b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b62:	f7fc f821 	bl	8000ba8 <__aeabi_d2iz>
 8004b66:	4605      	mov	r5, r0
 8004b68:	f7fb fd04 	bl	8000574 <__aeabi_i2d>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b74:	f7fb fbb0 	bl	80002d8 <__aeabi_dsub>
 8004b78:	3530      	adds	r5, #48	@ 0x30
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b82:	f806 5b01 	strb.w	r5, [r6], #1
 8004b86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b8a:	f7fb ffcf 	bl	8000b2c <__aeabi_dcmplt>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d171      	bne.n	8004c76 <_dtoa_r+0x65e>
 8004b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b96:	4911      	ldr	r1, [pc, #68]	@ (8004bdc <_dtoa_r+0x5c4>)
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fb fb9d 	bl	80002d8 <__aeabi_dsub>
 8004b9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ba2:	f7fb ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f040 8095 	bne.w	8004cd6 <_dtoa_r+0x6be>
 8004bac:	42a6      	cmp	r6, r4
 8004bae:	f43f af50 	beq.w	8004a52 <_dtoa_r+0x43a>
 8004bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <_dtoa_r+0x5c8>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f7fb fd45 	bl	8000648 <__aeabi_dmul>
 8004bbe:	4b08      	ldr	r3, [pc, #32]	@ (8004be0 <_dtoa_r+0x5c8>)
 8004bc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bca:	f7fb fd3d 	bl	8000648 <__aeabi_dmul>
 8004bce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bd2:	e7c4      	b.n	8004b5e <_dtoa_r+0x546>
 8004bd4:	080067d0 	.word	0x080067d0
 8004bd8:	080067a8 	.word	0x080067a8
 8004bdc:	3ff00000 	.word	0x3ff00000
 8004be0:	40240000 	.word	0x40240000
 8004be4:	401c0000 	.word	0x401c0000
 8004be8:	40140000 	.word	0x40140000
 8004bec:	3fe00000 	.word	0x3fe00000
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f7fb fd28 	bl	8000648 <__aeabi_dmul>
 8004bf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bfc:	9415      	str	r4, [sp, #84]	@ 0x54
 8004bfe:	4656      	mov	r6, sl
 8004c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c04:	f7fb ffd0 	bl	8000ba8 <__aeabi_d2iz>
 8004c08:	4605      	mov	r5, r0
 8004c0a:	f7fb fcb3 	bl	8000574 <__aeabi_i2d>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c16:	f7fb fb5f 	bl	80002d8 <__aeabi_dsub>
 8004c1a:	3530      	adds	r5, #48	@ 0x30
 8004c1c:	f806 5b01 	strb.w	r5, [r6], #1
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	42a6      	cmp	r6, r4
 8004c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	d124      	bne.n	8004c7a <_dtoa_r+0x662>
 8004c30:	4bac      	ldr	r3, [pc, #688]	@ (8004ee4 <_dtoa_r+0x8cc>)
 8004c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c36:	f7fb fb51 	bl	80002dc <__adddf3>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c42:	f7fb ff91 	bl	8000b68 <__aeabi_dcmpgt>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d145      	bne.n	8004cd6 <_dtoa_r+0x6be>
 8004c4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c4e:	49a5      	ldr	r1, [pc, #660]	@ (8004ee4 <_dtoa_r+0x8cc>)
 8004c50:	2000      	movs	r0, #0
 8004c52:	f7fb fb41 	bl	80002d8 <__aeabi_dsub>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5e:	f7fb ff65 	bl	8000b2c <__aeabi_dcmplt>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	f43f aef5 	beq.w	8004a52 <_dtoa_r+0x43a>
 8004c68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004c6a:	1e73      	subs	r3, r6, #1
 8004c6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c72:	2b30      	cmp	r3, #48	@ 0x30
 8004c74:	d0f8      	beq.n	8004c68 <_dtoa_r+0x650>
 8004c76:	9f04      	ldr	r7, [sp, #16]
 8004c78:	e73e      	b.n	8004af8 <_dtoa_r+0x4e0>
 8004c7a:	4b9b      	ldr	r3, [pc, #620]	@ (8004ee8 <_dtoa_r+0x8d0>)
 8004c7c:	f7fb fce4 	bl	8000648 <__aeabi_dmul>
 8004c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c84:	e7bc      	b.n	8004c00 <_dtoa_r+0x5e8>
 8004c86:	d10c      	bne.n	8004ca2 <_dtoa_r+0x68a>
 8004c88:	4b98      	ldr	r3, [pc, #608]	@ (8004eec <_dtoa_r+0x8d4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c90:	f7fb fcda 	bl	8000648 <__aeabi_dmul>
 8004c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c98:	f7fb ff5c 	bl	8000b54 <__aeabi_dcmpge>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f000 8157 	beq.w	8004f50 <_dtoa_r+0x938>
 8004ca2:	2400      	movs	r4, #0
 8004ca4:	4625      	mov	r5, r4
 8004ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	9304      	str	r3, [sp, #16]
 8004cac:	4656      	mov	r6, sl
 8004cae:	2700      	movs	r7, #0
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	f000 fbb4 	bl	8005420 <_Bfree>
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	d0dc      	beq.n	8004c76 <_dtoa_r+0x65e>
 8004cbc:	b12f      	cbz	r7, 8004cca <_dtoa_r+0x6b2>
 8004cbe:	42af      	cmp	r7, r5
 8004cc0:	d003      	beq.n	8004cca <_dtoa_r+0x6b2>
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	4658      	mov	r0, fp
 8004cc6:	f000 fbab 	bl	8005420 <_Bfree>
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4658      	mov	r0, fp
 8004cce:	f000 fba7 	bl	8005420 <_Bfree>
 8004cd2:	e7d0      	b.n	8004c76 <_dtoa_r+0x65e>
 8004cd4:	9704      	str	r7, [sp, #16]
 8004cd6:	4633      	mov	r3, r6
 8004cd8:	461e      	mov	r6, r3
 8004cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cde:	2a39      	cmp	r2, #57	@ 0x39
 8004ce0:	d107      	bne.n	8004cf2 <_dtoa_r+0x6da>
 8004ce2:	459a      	cmp	sl, r3
 8004ce4:	d1f8      	bne.n	8004cd8 <_dtoa_r+0x6c0>
 8004ce6:	9a04      	ldr	r2, [sp, #16]
 8004ce8:	3201      	adds	r2, #1
 8004cea:	9204      	str	r2, [sp, #16]
 8004cec:	2230      	movs	r2, #48	@ 0x30
 8004cee:	f88a 2000 	strb.w	r2, [sl]
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	3201      	adds	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e7bd      	b.n	8004c76 <_dtoa_r+0x65e>
 8004cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee8 <_dtoa_r+0x8d0>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f7fb fca3 	bl	8000648 <__aeabi_dmul>
 8004d02:	2200      	movs	r2, #0
 8004d04:	2300      	movs	r3, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	460d      	mov	r5, r1
 8004d0a:	f7fb ff05 	bl	8000b18 <__aeabi_dcmpeq>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	f43f aebb 	beq.w	8004a8a <_dtoa_r+0x472>
 8004d14:	e6f0      	b.n	8004af8 <_dtoa_r+0x4e0>
 8004d16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	f000 80db 	beq.w	8004ed4 <_dtoa_r+0x8bc>
 8004d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d20:	2a01      	cmp	r2, #1
 8004d22:	f300 80bf 	bgt.w	8004ea4 <_dtoa_r+0x88c>
 8004d26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	f000 80b7 	beq.w	8004e9c <_dtoa_r+0x884>
 8004d2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d34:	4646      	mov	r6, r8
 8004d36:	9a08      	ldr	r2, [sp, #32]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	441a      	add	r2, r3
 8004d3c:	4658      	mov	r0, fp
 8004d3e:	4498      	add	r8, r3
 8004d40:	9208      	str	r2, [sp, #32]
 8004d42:	f000 fc21 	bl	8005588 <__i2b>
 8004d46:	4605      	mov	r5, r0
 8004d48:	b15e      	cbz	r6, 8004d62 <_dtoa_r+0x74a>
 8004d4a:	9b08      	ldr	r3, [sp, #32]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dd08      	ble.n	8004d62 <_dtoa_r+0x74a>
 8004d50:	42b3      	cmp	r3, r6
 8004d52:	9a08      	ldr	r2, [sp, #32]
 8004d54:	bfa8      	it	ge
 8004d56:	4633      	movge	r3, r6
 8004d58:	eba8 0803 	sub.w	r8, r8, r3
 8004d5c:	1af6      	subs	r6, r6, r3
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	9308      	str	r3, [sp, #32]
 8004d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d64:	b1f3      	cbz	r3, 8004da4 <_dtoa_r+0x78c>
 8004d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80b7 	beq.w	8004edc <_dtoa_r+0x8c4>
 8004d6e:	b18c      	cbz	r4, 8004d94 <_dtoa_r+0x77c>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4622      	mov	r2, r4
 8004d74:	4658      	mov	r0, fp
 8004d76:	f000 fcc7 	bl	8005708 <__pow5mult>
 8004d7a:	464a      	mov	r2, r9
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	4605      	mov	r5, r0
 8004d80:	4658      	mov	r0, fp
 8004d82:	f000 fc17 	bl	80055b4 <__multiply>
 8004d86:	4649      	mov	r1, r9
 8004d88:	9004      	str	r0, [sp, #16]
 8004d8a:	4658      	mov	r0, fp
 8004d8c:	f000 fb48 	bl	8005420 <_Bfree>
 8004d90:	9b04      	ldr	r3, [sp, #16]
 8004d92:	4699      	mov	r9, r3
 8004d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d96:	1b1a      	subs	r2, r3, r4
 8004d98:	d004      	beq.n	8004da4 <_dtoa_r+0x78c>
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4658      	mov	r0, fp
 8004d9e:	f000 fcb3 	bl	8005708 <__pow5mult>
 8004da2:	4681      	mov	r9, r0
 8004da4:	2101      	movs	r1, #1
 8004da6:	4658      	mov	r0, fp
 8004da8:	f000 fbee 	bl	8005588 <__i2b>
 8004dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dae:	4604      	mov	r4, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 81cf 	beq.w	8005154 <_dtoa_r+0xb3c>
 8004db6:	461a      	mov	r2, r3
 8004db8:	4601      	mov	r1, r0
 8004dba:	4658      	mov	r0, fp
 8004dbc:	f000 fca4 	bl	8005708 <__pow5mult>
 8004dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	f300 8095 	bgt.w	8004ef4 <_dtoa_r+0x8dc>
 8004dca:	9b02      	ldr	r3, [sp, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 8087 	bne.w	8004ee0 <_dtoa_r+0x8c8>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 8089 	bne.w	8004ef0 <_dtoa_r+0x8d8>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004de4:	0d1b      	lsrs	r3, r3, #20
 8004de6:	051b      	lsls	r3, r3, #20
 8004de8:	b12b      	cbz	r3, 8004df6 <_dtoa_r+0x7de>
 8004dea:	9b08      	ldr	r3, [sp, #32]
 8004dec:	3301      	adds	r3, #1
 8004dee:	9308      	str	r3, [sp, #32]
 8004df0:	f108 0801 	add.w	r8, r8, #1
 8004df4:	2301      	movs	r3, #1
 8004df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 81b0 	beq.w	8005160 <_dtoa_r+0xb48>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e06:	6918      	ldr	r0, [r3, #16]
 8004e08:	f000 fb72 	bl	80054f0 <__hi0bits>
 8004e0c:	f1c0 0020 	rsb	r0, r0, #32
 8004e10:	9b08      	ldr	r3, [sp, #32]
 8004e12:	4418      	add	r0, r3
 8004e14:	f010 001f 	ands.w	r0, r0, #31
 8004e18:	d077      	beq.n	8004f0a <_dtoa_r+0x8f2>
 8004e1a:	f1c0 0320 	rsb	r3, r0, #32
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	dd6b      	ble.n	8004efa <_dtoa_r+0x8e2>
 8004e22:	9b08      	ldr	r3, [sp, #32]
 8004e24:	f1c0 001c 	rsb	r0, r0, #28
 8004e28:	4403      	add	r3, r0
 8004e2a:	4480      	add	r8, r0
 8004e2c:	4406      	add	r6, r0
 8004e2e:	9308      	str	r3, [sp, #32]
 8004e30:	f1b8 0f00 	cmp.w	r8, #0
 8004e34:	dd05      	ble.n	8004e42 <_dtoa_r+0x82a>
 8004e36:	4649      	mov	r1, r9
 8004e38:	4642      	mov	r2, r8
 8004e3a:	4658      	mov	r0, fp
 8004e3c:	f000 fcbe 	bl	80057bc <__lshift>
 8004e40:	4681      	mov	r9, r0
 8004e42:	9b08      	ldr	r3, [sp, #32]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dd05      	ble.n	8004e54 <_dtoa_r+0x83c>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f000 fcb5 	bl	80057bc <__lshift>
 8004e52:	4604      	mov	r4, r0
 8004e54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d059      	beq.n	8004f0e <_dtoa_r+0x8f6>
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4648      	mov	r0, r9
 8004e5e:	f000 fd19 	bl	8005894 <__mcmp>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	da53      	bge.n	8004f0e <_dtoa_r+0x8f6>
 8004e66:	1e7b      	subs	r3, r7, #1
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	220a      	movs	r2, #10
 8004e70:	4658      	mov	r0, fp
 8004e72:	f000 faf7 	bl	8005464 <__multadd>
 8004e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e78:	4681      	mov	r9, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8172 	beq.w	8005164 <_dtoa_r+0xb4c>
 8004e80:	2300      	movs	r3, #0
 8004e82:	4629      	mov	r1, r5
 8004e84:	220a      	movs	r2, #10
 8004e86:	4658      	mov	r0, fp
 8004e88:	f000 faec 	bl	8005464 <__multadd>
 8004e8c:	9b00      	ldr	r3, [sp, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	4605      	mov	r5, r0
 8004e92:	dc67      	bgt.n	8004f64 <_dtoa_r+0x94c>
 8004e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	dc41      	bgt.n	8004f1e <_dtoa_r+0x906>
 8004e9a:	e063      	b.n	8004f64 <_dtoa_r+0x94c>
 8004e9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004ea2:	e746      	b.n	8004d32 <_dtoa_r+0x71a>
 8004ea4:	9b07      	ldr	r3, [sp, #28]
 8004ea6:	1e5c      	subs	r4, r3, #1
 8004ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	bfbf      	itttt	lt
 8004eae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004eb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004eb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004eb4:	1ae3      	sublt	r3, r4, r3
 8004eb6:	bfb4      	ite	lt
 8004eb8:	18d2      	addlt	r2, r2, r3
 8004eba:	1b1c      	subge	r4, r3, r4
 8004ebc:	9b07      	ldr	r3, [sp, #28]
 8004ebe:	bfbc      	itt	lt
 8004ec0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004ec2:	2400      	movlt	r4, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfb5      	itete	lt
 8004ec8:	eba8 0603 	sublt.w	r6, r8, r3
 8004ecc:	9b07      	ldrge	r3, [sp, #28]
 8004ece:	2300      	movlt	r3, #0
 8004ed0:	4646      	movge	r6, r8
 8004ed2:	e730      	b.n	8004d36 <_dtoa_r+0x71e>
 8004ed4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ed6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ed8:	4646      	mov	r6, r8
 8004eda:	e735      	b.n	8004d48 <_dtoa_r+0x730>
 8004edc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ede:	e75c      	b.n	8004d9a <_dtoa_r+0x782>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e788      	b.n	8004df6 <_dtoa_r+0x7de>
 8004ee4:	3fe00000 	.word	0x3fe00000
 8004ee8:	40240000 	.word	0x40240000
 8004eec:	40140000 	.word	0x40140000
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	e780      	b.n	8004df6 <_dtoa_r+0x7de>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef8:	e782      	b.n	8004e00 <_dtoa_r+0x7e8>
 8004efa:	d099      	beq.n	8004e30 <_dtoa_r+0x818>
 8004efc:	9a08      	ldr	r2, [sp, #32]
 8004efe:	331c      	adds	r3, #28
 8004f00:	441a      	add	r2, r3
 8004f02:	4498      	add	r8, r3
 8004f04:	441e      	add	r6, r3
 8004f06:	9208      	str	r2, [sp, #32]
 8004f08:	e792      	b.n	8004e30 <_dtoa_r+0x818>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e7f6      	b.n	8004efc <_dtoa_r+0x8e4>
 8004f0e:	9b07      	ldr	r3, [sp, #28]
 8004f10:	9704      	str	r7, [sp, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc20      	bgt.n	8004f58 <_dtoa_r+0x940>
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	dd1e      	ble.n	8004f5c <_dtoa_r+0x944>
 8004f1e:	9b00      	ldr	r3, [sp, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f47f aec0 	bne.w	8004ca6 <_dtoa_r+0x68e>
 8004f26:	4621      	mov	r1, r4
 8004f28:	2205      	movs	r2, #5
 8004f2a:	4658      	mov	r0, fp
 8004f2c:	f000 fa9a 	bl	8005464 <__multadd>
 8004f30:	4601      	mov	r1, r0
 8004f32:	4604      	mov	r4, r0
 8004f34:	4648      	mov	r0, r9
 8004f36:	f000 fcad 	bl	8005894 <__mcmp>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	f77f aeb3 	ble.w	8004ca6 <_dtoa_r+0x68e>
 8004f40:	4656      	mov	r6, sl
 8004f42:	2331      	movs	r3, #49	@ 0x31
 8004f44:	f806 3b01 	strb.w	r3, [r6], #1
 8004f48:	9b04      	ldr	r3, [sp, #16]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	e6ae      	b.n	8004cae <_dtoa_r+0x696>
 8004f50:	9c07      	ldr	r4, [sp, #28]
 8004f52:	9704      	str	r7, [sp, #16]
 8004f54:	4625      	mov	r5, r4
 8004f56:	e7f3      	b.n	8004f40 <_dtoa_r+0x928>
 8004f58:	9b07      	ldr	r3, [sp, #28]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8104 	beq.w	800516c <_dtoa_r+0xb54>
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	dd05      	ble.n	8004f74 <_dtoa_r+0x95c>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	4658      	mov	r0, fp
 8004f6e:	f000 fc25 	bl	80057bc <__lshift>
 8004f72:	4605      	mov	r5, r0
 8004f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d05a      	beq.n	8005030 <_dtoa_r+0xa18>
 8004f7a:	6869      	ldr	r1, [r5, #4]
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	f000 fa0f 	bl	80053a0 <_Balloc>
 8004f82:	4606      	mov	r6, r0
 8004f84:	b928      	cbnz	r0, 8004f92 <_dtoa_r+0x97a>
 8004f86:	4b84      	ldr	r3, [pc, #528]	@ (8005198 <_dtoa_r+0xb80>)
 8004f88:	4602      	mov	r2, r0
 8004f8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f8e:	f7ff bb5a 	b.w	8004646 <_dtoa_r+0x2e>
 8004f92:	692a      	ldr	r2, [r5, #16]
 8004f94:	3202      	adds	r2, #2
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	f105 010c 	add.w	r1, r5, #12
 8004f9c:	300c      	adds	r0, #12
 8004f9e:	f000 ffaf 	bl	8005f00 <memcpy>
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4658      	mov	r0, fp
 8004fa8:	f000 fc08 	bl	80057bc <__lshift>
 8004fac:	f10a 0301 	add.w	r3, sl, #1
 8004fb0:	9307      	str	r3, [sp, #28]
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	4453      	add	r3, sl
 8004fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fb8:	9b02      	ldr	r3, [sp, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	462f      	mov	r7, r5
 8004fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	9b07      	ldr	r3, [sp, #28]
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	4648      	mov	r0, r9
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	f7ff fa98 	bl	8004502 <quorem>
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	9002      	str	r0, [sp, #8]
 8004fd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004fda:	4648      	mov	r0, r9
 8004fdc:	f000 fc5a 	bl	8005894 <__mcmp>
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	9008      	str	r0, [sp, #32]
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f000 fc70 	bl	80058cc <__mdiff>
 8004fec:	68c2      	ldr	r2, [r0, #12]
 8004fee:	4606      	mov	r6, r0
 8004ff0:	bb02      	cbnz	r2, 8005034 <_dtoa_r+0xa1c>
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4648      	mov	r0, r9
 8004ff6:	f000 fc4d 	bl	8005894 <__mcmp>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4658      	mov	r0, fp
 8005000:	920e      	str	r2, [sp, #56]	@ 0x38
 8005002:	f000 fa0d 	bl	8005420 <_Bfree>
 8005006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800500a:	9e07      	ldr	r6, [sp, #28]
 800500c:	ea43 0102 	orr.w	r1, r3, r2
 8005010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005012:	4319      	orrs	r1, r3
 8005014:	d110      	bne.n	8005038 <_dtoa_r+0xa20>
 8005016:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800501a:	d029      	beq.n	8005070 <_dtoa_r+0xa58>
 800501c:	9b08      	ldr	r3, [sp, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd02      	ble.n	8005028 <_dtoa_r+0xa10>
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005028:	9b00      	ldr	r3, [sp, #0]
 800502a:	f883 8000 	strb.w	r8, [r3]
 800502e:	e63f      	b.n	8004cb0 <_dtoa_r+0x698>
 8005030:	4628      	mov	r0, r5
 8005032:	e7bb      	b.n	8004fac <_dtoa_r+0x994>
 8005034:	2201      	movs	r2, #1
 8005036:	e7e1      	b.n	8004ffc <_dtoa_r+0x9e4>
 8005038:	9b08      	ldr	r3, [sp, #32]
 800503a:	2b00      	cmp	r3, #0
 800503c:	db04      	blt.n	8005048 <_dtoa_r+0xa30>
 800503e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005040:	430b      	orrs	r3, r1
 8005042:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005044:	430b      	orrs	r3, r1
 8005046:	d120      	bne.n	800508a <_dtoa_r+0xa72>
 8005048:	2a00      	cmp	r2, #0
 800504a:	dded      	ble.n	8005028 <_dtoa_r+0xa10>
 800504c:	4649      	mov	r1, r9
 800504e:	2201      	movs	r2, #1
 8005050:	4658      	mov	r0, fp
 8005052:	f000 fbb3 	bl	80057bc <__lshift>
 8005056:	4621      	mov	r1, r4
 8005058:	4681      	mov	r9, r0
 800505a:	f000 fc1b 	bl	8005894 <__mcmp>
 800505e:	2800      	cmp	r0, #0
 8005060:	dc03      	bgt.n	800506a <_dtoa_r+0xa52>
 8005062:	d1e1      	bne.n	8005028 <_dtoa_r+0xa10>
 8005064:	f018 0f01 	tst.w	r8, #1
 8005068:	d0de      	beq.n	8005028 <_dtoa_r+0xa10>
 800506a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800506e:	d1d8      	bne.n	8005022 <_dtoa_r+0xa0a>
 8005070:	9a00      	ldr	r2, [sp, #0]
 8005072:	2339      	movs	r3, #57	@ 0x39
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	4633      	mov	r3, r6
 8005078:	461e      	mov	r6, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005080:	2a39      	cmp	r2, #57	@ 0x39
 8005082:	d052      	beq.n	800512a <_dtoa_r+0xb12>
 8005084:	3201      	adds	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e612      	b.n	8004cb0 <_dtoa_r+0x698>
 800508a:	2a00      	cmp	r2, #0
 800508c:	dd07      	ble.n	800509e <_dtoa_r+0xa86>
 800508e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005092:	d0ed      	beq.n	8005070 <_dtoa_r+0xa58>
 8005094:	9a00      	ldr	r2, [sp, #0]
 8005096:	f108 0301 	add.w	r3, r8, #1
 800509a:	7013      	strb	r3, [r2, #0]
 800509c:	e608      	b.n	8004cb0 <_dtoa_r+0x698>
 800509e:	9b07      	ldr	r3, [sp, #28]
 80050a0:	9a07      	ldr	r2, [sp, #28]
 80050a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80050a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d028      	beq.n	80050fe <_dtoa_r+0xae6>
 80050ac:	4649      	mov	r1, r9
 80050ae:	2300      	movs	r3, #0
 80050b0:	220a      	movs	r2, #10
 80050b2:	4658      	mov	r0, fp
 80050b4:	f000 f9d6 	bl	8005464 <__multadd>
 80050b8:	42af      	cmp	r7, r5
 80050ba:	4681      	mov	r9, r0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	f04f 020a 	mov.w	r2, #10
 80050c4:	4639      	mov	r1, r7
 80050c6:	4658      	mov	r0, fp
 80050c8:	d107      	bne.n	80050da <_dtoa_r+0xac2>
 80050ca:	f000 f9cb 	bl	8005464 <__multadd>
 80050ce:	4607      	mov	r7, r0
 80050d0:	4605      	mov	r5, r0
 80050d2:	9b07      	ldr	r3, [sp, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	9307      	str	r3, [sp, #28]
 80050d8:	e774      	b.n	8004fc4 <_dtoa_r+0x9ac>
 80050da:	f000 f9c3 	bl	8005464 <__multadd>
 80050de:	4629      	mov	r1, r5
 80050e0:	4607      	mov	r7, r0
 80050e2:	2300      	movs	r3, #0
 80050e4:	220a      	movs	r2, #10
 80050e6:	4658      	mov	r0, fp
 80050e8:	f000 f9bc 	bl	8005464 <__multadd>
 80050ec:	4605      	mov	r5, r0
 80050ee:	e7f0      	b.n	80050d2 <_dtoa_r+0xaba>
 80050f0:	9b00      	ldr	r3, [sp, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bfcc      	ite	gt
 80050f6:	461e      	movgt	r6, r3
 80050f8:	2601      	movle	r6, #1
 80050fa:	4456      	add	r6, sl
 80050fc:	2700      	movs	r7, #0
 80050fe:	4649      	mov	r1, r9
 8005100:	2201      	movs	r2, #1
 8005102:	4658      	mov	r0, fp
 8005104:	f000 fb5a 	bl	80057bc <__lshift>
 8005108:	4621      	mov	r1, r4
 800510a:	4681      	mov	r9, r0
 800510c:	f000 fbc2 	bl	8005894 <__mcmp>
 8005110:	2800      	cmp	r0, #0
 8005112:	dcb0      	bgt.n	8005076 <_dtoa_r+0xa5e>
 8005114:	d102      	bne.n	800511c <_dtoa_r+0xb04>
 8005116:	f018 0f01 	tst.w	r8, #1
 800511a:	d1ac      	bne.n	8005076 <_dtoa_r+0xa5e>
 800511c:	4633      	mov	r3, r6
 800511e:	461e      	mov	r6, r3
 8005120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005124:	2a30      	cmp	r2, #48	@ 0x30
 8005126:	d0fa      	beq.n	800511e <_dtoa_r+0xb06>
 8005128:	e5c2      	b.n	8004cb0 <_dtoa_r+0x698>
 800512a:	459a      	cmp	sl, r3
 800512c:	d1a4      	bne.n	8005078 <_dtoa_r+0xa60>
 800512e:	9b04      	ldr	r3, [sp, #16]
 8005130:	3301      	adds	r3, #1
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	2331      	movs	r3, #49	@ 0x31
 8005136:	f88a 3000 	strb.w	r3, [sl]
 800513a:	e5b9      	b.n	8004cb0 <_dtoa_r+0x698>
 800513c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800513e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800519c <_dtoa_r+0xb84>
 8005142:	b11b      	cbz	r3, 800514c <_dtoa_r+0xb34>
 8005144:	f10a 0308 	add.w	r3, sl, #8
 8005148:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	4650      	mov	r0, sl
 800514e:	b019      	add	sp, #100	@ 0x64
 8005150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005156:	2b01      	cmp	r3, #1
 8005158:	f77f ae37 	ble.w	8004dca <_dtoa_r+0x7b2>
 800515c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800515e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005160:	2001      	movs	r0, #1
 8005162:	e655      	b.n	8004e10 <_dtoa_r+0x7f8>
 8005164:	9b00      	ldr	r3, [sp, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f77f aed6 	ble.w	8004f18 <_dtoa_r+0x900>
 800516c:	4656      	mov	r6, sl
 800516e:	4621      	mov	r1, r4
 8005170:	4648      	mov	r0, r9
 8005172:	f7ff f9c6 	bl	8004502 <quorem>
 8005176:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800517a:	f806 8b01 	strb.w	r8, [r6], #1
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	eba6 020a 	sub.w	r2, r6, sl
 8005184:	4293      	cmp	r3, r2
 8005186:	ddb3      	ble.n	80050f0 <_dtoa_r+0xad8>
 8005188:	4649      	mov	r1, r9
 800518a:	2300      	movs	r3, #0
 800518c:	220a      	movs	r2, #10
 800518e:	4658      	mov	r0, fp
 8005190:	f000 f968 	bl	8005464 <__multadd>
 8005194:	4681      	mov	r9, r0
 8005196:	e7ea      	b.n	800516e <_dtoa_r+0xb56>
 8005198:	08006730 	.word	0x08006730
 800519c:	080066b4 	.word	0x080066b4

080051a0 <_free_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d041      	beq.n	800522c <_free_r+0x8c>
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f0c      	subs	r4, r1, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	18e4      	addlt	r4, r4, r3
 80051b4:	f000 f8e8 	bl	8005388 <__malloc_lock>
 80051b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005230 <_free_r+0x90>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b933      	cbnz	r3, 80051cc <_free_r+0x2c>
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	4628      	mov	r0, r5
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f000 b8e4 	b.w	8005394 <__malloc_unlock>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x42>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf01      	itttt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	1809      	addeq	r1, r1, r0
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	e7ed      	b.n	80051be <_free_r+0x1e>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x4c>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x42>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1850      	adds	r0, r2, r1
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x6c>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	4401      	add	r1, r0
 80051f8:	1850      	adds	r0, r2, r1
 80051fa:	4283      	cmp	r3, r0
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1e0      	bne.n	80051c2 <_free_r+0x22>
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	6053      	str	r3, [r2, #4]
 8005206:	4408      	add	r0, r1
 8005208:	6010      	str	r0, [r2, #0]
 800520a:	e7da      	b.n	80051c2 <_free_r+0x22>
 800520c:	d902      	bls.n	8005214 <_free_r+0x74>
 800520e:	230c      	movs	r3, #12
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	e7d6      	b.n	80051c2 <_free_r+0x22>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1821      	adds	r1, r4, r0
 8005218:	428b      	cmp	r3, r1
 800521a:	bf04      	itt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	bf04      	itt	eq
 8005224:	1809      	addeq	r1, r1, r0
 8005226:	6021      	streq	r1, [r4, #0]
 8005228:	6054      	str	r4, [r2, #4]
 800522a:	e7ca      	b.n	80051c2 <_free_r+0x22>
 800522c:	bd38      	pop	{r3, r4, r5, pc}
 800522e:	bf00      	nop
 8005230:	200003d4 	.word	0x200003d4

08005234 <malloc>:
 8005234:	4b02      	ldr	r3, [pc, #8]	@ (8005240 <malloc+0xc>)
 8005236:	4601      	mov	r1, r0
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f000 b825 	b.w	8005288 <_malloc_r>
 800523e:	bf00      	nop
 8005240:	20000018 	.word	0x20000018

08005244 <sbrk_aligned>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4e0f      	ldr	r6, [pc, #60]	@ (8005284 <sbrk_aligned+0x40>)
 8005248:	460c      	mov	r4, r1
 800524a:	6831      	ldr	r1, [r6, #0]
 800524c:	4605      	mov	r5, r0
 800524e:	b911      	cbnz	r1, 8005256 <sbrk_aligned+0x12>
 8005250:	f000 fe46 	bl	8005ee0 <_sbrk_r>
 8005254:	6030      	str	r0, [r6, #0]
 8005256:	4621      	mov	r1, r4
 8005258:	4628      	mov	r0, r5
 800525a:	f000 fe41 	bl	8005ee0 <_sbrk_r>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d103      	bne.n	800526a <sbrk_aligned+0x26>
 8005262:	f04f 34ff 	mov.w	r4, #4294967295
 8005266:	4620      	mov	r0, r4
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	1cc4      	adds	r4, r0, #3
 800526c:	f024 0403 	bic.w	r4, r4, #3
 8005270:	42a0      	cmp	r0, r4
 8005272:	d0f8      	beq.n	8005266 <sbrk_aligned+0x22>
 8005274:	1a21      	subs	r1, r4, r0
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fe32 	bl	8005ee0 <_sbrk_r>
 800527c:	3001      	adds	r0, #1
 800527e:	d1f2      	bne.n	8005266 <sbrk_aligned+0x22>
 8005280:	e7ef      	b.n	8005262 <sbrk_aligned+0x1e>
 8005282:	bf00      	nop
 8005284:	200003d0 	.word	0x200003d0

08005288 <_malloc_r>:
 8005288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800528c:	1ccd      	adds	r5, r1, #3
 800528e:	f025 0503 	bic.w	r5, r5, #3
 8005292:	3508      	adds	r5, #8
 8005294:	2d0c      	cmp	r5, #12
 8005296:	bf38      	it	cc
 8005298:	250c      	movcc	r5, #12
 800529a:	2d00      	cmp	r5, #0
 800529c:	4606      	mov	r6, r0
 800529e:	db01      	blt.n	80052a4 <_malloc_r+0x1c>
 80052a0:	42a9      	cmp	r1, r5
 80052a2:	d904      	bls.n	80052ae <_malloc_r+0x26>
 80052a4:	230c      	movs	r3, #12
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	2000      	movs	r0, #0
 80052aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005384 <_malloc_r+0xfc>
 80052b2:	f000 f869 	bl	8005388 <__malloc_lock>
 80052b6:	f8d8 3000 	ldr.w	r3, [r8]
 80052ba:	461c      	mov	r4, r3
 80052bc:	bb44      	cbnz	r4, 8005310 <_malloc_r+0x88>
 80052be:	4629      	mov	r1, r5
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff ffbf 	bl	8005244 <sbrk_aligned>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	4604      	mov	r4, r0
 80052ca:	d158      	bne.n	800537e <_malloc_r+0xf6>
 80052cc:	f8d8 4000 	ldr.w	r4, [r8]
 80052d0:	4627      	mov	r7, r4
 80052d2:	2f00      	cmp	r7, #0
 80052d4:	d143      	bne.n	800535e <_malloc_r+0xd6>
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d04b      	beq.n	8005372 <_malloc_r+0xea>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4639      	mov	r1, r7
 80052de:	4630      	mov	r0, r6
 80052e0:	eb04 0903 	add.w	r9, r4, r3
 80052e4:	f000 fdfc 	bl	8005ee0 <_sbrk_r>
 80052e8:	4581      	cmp	r9, r0
 80052ea:	d142      	bne.n	8005372 <_malloc_r+0xea>
 80052ec:	6821      	ldr	r1, [r4, #0]
 80052ee:	1a6d      	subs	r5, r5, r1
 80052f0:	4629      	mov	r1, r5
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ffa6 	bl	8005244 <sbrk_aligned>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d03a      	beq.n	8005372 <_malloc_r+0xea>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	442b      	add	r3, r5
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	f8d8 3000 	ldr.w	r3, [r8]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	bb62      	cbnz	r2, 8005364 <_malloc_r+0xdc>
 800530a:	f8c8 7000 	str.w	r7, [r8]
 800530e:	e00f      	b.n	8005330 <_malloc_r+0xa8>
 8005310:	6822      	ldr	r2, [r4, #0]
 8005312:	1b52      	subs	r2, r2, r5
 8005314:	d420      	bmi.n	8005358 <_malloc_r+0xd0>
 8005316:	2a0b      	cmp	r2, #11
 8005318:	d917      	bls.n	800534a <_malloc_r+0xc2>
 800531a:	1961      	adds	r1, r4, r5
 800531c:	42a3      	cmp	r3, r4
 800531e:	6025      	str	r5, [r4, #0]
 8005320:	bf18      	it	ne
 8005322:	6059      	strne	r1, [r3, #4]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	bf08      	it	eq
 8005328:	f8c8 1000 	streq.w	r1, [r8]
 800532c:	5162      	str	r2, [r4, r5]
 800532e:	604b      	str	r3, [r1, #4]
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f82f 	bl	8005394 <__malloc_unlock>
 8005336:	f104 000b 	add.w	r0, r4, #11
 800533a:	1d23      	adds	r3, r4, #4
 800533c:	f020 0007 	bic.w	r0, r0, #7
 8005340:	1ac2      	subs	r2, r0, r3
 8005342:	bf1c      	itt	ne
 8005344:	1a1b      	subne	r3, r3, r0
 8005346:	50a3      	strne	r3, [r4, r2]
 8005348:	e7af      	b.n	80052aa <_malloc_r+0x22>
 800534a:	6862      	ldr	r2, [r4, #4]
 800534c:	42a3      	cmp	r3, r4
 800534e:	bf0c      	ite	eq
 8005350:	f8c8 2000 	streq.w	r2, [r8]
 8005354:	605a      	strne	r2, [r3, #4]
 8005356:	e7eb      	b.n	8005330 <_malloc_r+0xa8>
 8005358:	4623      	mov	r3, r4
 800535a:	6864      	ldr	r4, [r4, #4]
 800535c:	e7ae      	b.n	80052bc <_malloc_r+0x34>
 800535e:	463c      	mov	r4, r7
 8005360:	687f      	ldr	r7, [r7, #4]
 8005362:	e7b6      	b.n	80052d2 <_malloc_r+0x4a>
 8005364:	461a      	mov	r2, r3
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	42a3      	cmp	r3, r4
 800536a:	d1fb      	bne.n	8005364 <_malloc_r+0xdc>
 800536c:	2300      	movs	r3, #0
 800536e:	6053      	str	r3, [r2, #4]
 8005370:	e7de      	b.n	8005330 <_malloc_r+0xa8>
 8005372:	230c      	movs	r3, #12
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	4630      	mov	r0, r6
 8005378:	f000 f80c 	bl	8005394 <__malloc_unlock>
 800537c:	e794      	b.n	80052a8 <_malloc_r+0x20>
 800537e:	6005      	str	r5, [r0, #0]
 8005380:	e7d6      	b.n	8005330 <_malloc_r+0xa8>
 8005382:	bf00      	nop
 8005384:	200003d4 	.word	0x200003d4

08005388 <__malloc_lock>:
 8005388:	4801      	ldr	r0, [pc, #4]	@ (8005390 <__malloc_lock+0x8>)
 800538a:	f7ff b8b8 	b.w	80044fe <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	200003cc 	.word	0x200003cc

08005394 <__malloc_unlock>:
 8005394:	4801      	ldr	r0, [pc, #4]	@ (800539c <__malloc_unlock+0x8>)
 8005396:	f7ff b8b3 	b.w	8004500 <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	200003cc 	.word	0x200003cc

080053a0 <_Balloc>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	69c6      	ldr	r6, [r0, #28]
 80053a4:	4604      	mov	r4, r0
 80053a6:	460d      	mov	r5, r1
 80053a8:	b976      	cbnz	r6, 80053c8 <_Balloc+0x28>
 80053aa:	2010      	movs	r0, #16
 80053ac:	f7ff ff42 	bl	8005234 <malloc>
 80053b0:	4602      	mov	r2, r0
 80053b2:	61e0      	str	r0, [r4, #28]
 80053b4:	b920      	cbnz	r0, 80053c0 <_Balloc+0x20>
 80053b6:	4b18      	ldr	r3, [pc, #96]	@ (8005418 <_Balloc+0x78>)
 80053b8:	4818      	ldr	r0, [pc, #96]	@ (800541c <_Balloc+0x7c>)
 80053ba:	216b      	movs	r1, #107	@ 0x6b
 80053bc:	f000 fdae 	bl	8005f1c <__assert_func>
 80053c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053c4:	6006      	str	r6, [r0, #0]
 80053c6:	60c6      	str	r6, [r0, #12]
 80053c8:	69e6      	ldr	r6, [r4, #28]
 80053ca:	68f3      	ldr	r3, [r6, #12]
 80053cc:	b183      	cbz	r3, 80053f0 <_Balloc+0x50>
 80053ce:	69e3      	ldr	r3, [r4, #28]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053d6:	b9b8      	cbnz	r0, 8005408 <_Balloc+0x68>
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f605 	lsl.w	r6, r1, r5
 80053de:	1d72      	adds	r2, r6, #5
 80053e0:	0092      	lsls	r2, r2, #2
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 fdb8 	bl	8005f58 <_calloc_r>
 80053e8:	b160      	cbz	r0, 8005404 <_Balloc+0x64>
 80053ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053ee:	e00e      	b.n	800540e <_Balloc+0x6e>
 80053f0:	2221      	movs	r2, #33	@ 0x21
 80053f2:	2104      	movs	r1, #4
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fdaf 	bl	8005f58 <_calloc_r>
 80053fa:	69e3      	ldr	r3, [r4, #28]
 80053fc:	60f0      	str	r0, [r6, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e4      	bne.n	80053ce <_Balloc+0x2e>
 8005404:	2000      	movs	r0, #0
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800540e:	2300      	movs	r3, #0
 8005410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005414:	e7f7      	b.n	8005406 <_Balloc+0x66>
 8005416:	bf00      	nop
 8005418:	080066c1 	.word	0x080066c1
 800541c:	08006741 	.word	0x08006741

08005420 <_Bfree>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	69c6      	ldr	r6, [r0, #28]
 8005424:	4605      	mov	r5, r0
 8005426:	460c      	mov	r4, r1
 8005428:	b976      	cbnz	r6, 8005448 <_Bfree+0x28>
 800542a:	2010      	movs	r0, #16
 800542c:	f7ff ff02 	bl	8005234 <malloc>
 8005430:	4602      	mov	r2, r0
 8005432:	61e8      	str	r0, [r5, #28]
 8005434:	b920      	cbnz	r0, 8005440 <_Bfree+0x20>
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <_Bfree+0x3c>)
 8005438:	4809      	ldr	r0, [pc, #36]	@ (8005460 <_Bfree+0x40>)
 800543a:	218f      	movs	r1, #143	@ 0x8f
 800543c:	f000 fd6e 	bl	8005f1c <__assert_func>
 8005440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005444:	6006      	str	r6, [r0, #0]
 8005446:	60c6      	str	r6, [r0, #12]
 8005448:	b13c      	cbz	r4, 800545a <_Bfree+0x3a>
 800544a:	69eb      	ldr	r3, [r5, #28]
 800544c:	6862      	ldr	r2, [r4, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005454:	6021      	str	r1, [r4, #0]
 8005456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	080066c1 	.word	0x080066c1
 8005460:	08006741 	.word	0x08006741

08005464 <__multadd>:
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005468:	690d      	ldr	r5, [r1, #16]
 800546a:	4607      	mov	r7, r0
 800546c:	460c      	mov	r4, r1
 800546e:	461e      	mov	r6, r3
 8005470:	f101 0c14 	add.w	ip, r1, #20
 8005474:	2000      	movs	r0, #0
 8005476:	f8dc 3000 	ldr.w	r3, [ip]
 800547a:	b299      	uxth	r1, r3
 800547c:	fb02 6101 	mla	r1, r2, r1, r6
 8005480:	0c1e      	lsrs	r6, r3, #16
 8005482:	0c0b      	lsrs	r3, r1, #16
 8005484:	fb02 3306 	mla	r3, r2, r6, r3
 8005488:	b289      	uxth	r1, r1
 800548a:	3001      	adds	r0, #1
 800548c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005490:	4285      	cmp	r5, r0
 8005492:	f84c 1b04 	str.w	r1, [ip], #4
 8005496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800549a:	dcec      	bgt.n	8005476 <__multadd+0x12>
 800549c:	b30e      	cbz	r6, 80054e2 <__multadd+0x7e>
 800549e:	68a3      	ldr	r3, [r4, #8]
 80054a0:	42ab      	cmp	r3, r5
 80054a2:	dc19      	bgt.n	80054d8 <__multadd+0x74>
 80054a4:	6861      	ldr	r1, [r4, #4]
 80054a6:	4638      	mov	r0, r7
 80054a8:	3101      	adds	r1, #1
 80054aa:	f7ff ff79 	bl	80053a0 <_Balloc>
 80054ae:	4680      	mov	r8, r0
 80054b0:	b928      	cbnz	r0, 80054be <__multadd+0x5a>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b0c      	ldr	r3, [pc, #48]	@ (80054e8 <__multadd+0x84>)
 80054b6:	480d      	ldr	r0, [pc, #52]	@ (80054ec <__multadd+0x88>)
 80054b8:	21ba      	movs	r1, #186	@ 0xba
 80054ba:	f000 fd2f 	bl	8005f1c <__assert_func>
 80054be:	6922      	ldr	r2, [r4, #16]
 80054c0:	3202      	adds	r2, #2
 80054c2:	f104 010c 	add.w	r1, r4, #12
 80054c6:	0092      	lsls	r2, r2, #2
 80054c8:	300c      	adds	r0, #12
 80054ca:	f000 fd19 	bl	8005f00 <memcpy>
 80054ce:	4621      	mov	r1, r4
 80054d0:	4638      	mov	r0, r7
 80054d2:	f7ff ffa5 	bl	8005420 <_Bfree>
 80054d6:	4644      	mov	r4, r8
 80054d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054dc:	3501      	adds	r5, #1
 80054de:	615e      	str	r6, [r3, #20]
 80054e0:	6125      	str	r5, [r4, #16]
 80054e2:	4620      	mov	r0, r4
 80054e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e8:	08006730 	.word	0x08006730
 80054ec:	08006741 	.word	0x08006741

080054f0 <__hi0bits>:
 80054f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80054f4:	4603      	mov	r3, r0
 80054f6:	bf36      	itet	cc
 80054f8:	0403      	lslcc	r3, r0, #16
 80054fa:	2000      	movcs	r0, #0
 80054fc:	2010      	movcc	r0, #16
 80054fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005502:	bf3c      	itt	cc
 8005504:	021b      	lslcc	r3, r3, #8
 8005506:	3008      	addcc	r0, #8
 8005508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800550c:	bf3c      	itt	cc
 800550e:	011b      	lslcc	r3, r3, #4
 8005510:	3004      	addcc	r0, #4
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005516:	bf3c      	itt	cc
 8005518:	009b      	lslcc	r3, r3, #2
 800551a:	3002      	addcc	r0, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	db05      	blt.n	800552c <__hi0bits+0x3c>
 8005520:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005524:	f100 0001 	add.w	r0, r0, #1
 8005528:	bf08      	it	eq
 800552a:	2020      	moveq	r0, #32
 800552c:	4770      	bx	lr

0800552e <__lo0bits>:
 800552e:	6803      	ldr	r3, [r0, #0]
 8005530:	4602      	mov	r2, r0
 8005532:	f013 0007 	ands.w	r0, r3, #7
 8005536:	d00b      	beq.n	8005550 <__lo0bits+0x22>
 8005538:	07d9      	lsls	r1, r3, #31
 800553a:	d421      	bmi.n	8005580 <__lo0bits+0x52>
 800553c:	0798      	lsls	r0, r3, #30
 800553e:	bf49      	itett	mi
 8005540:	085b      	lsrmi	r3, r3, #1
 8005542:	089b      	lsrpl	r3, r3, #2
 8005544:	2001      	movmi	r0, #1
 8005546:	6013      	strmi	r3, [r2, #0]
 8005548:	bf5c      	itt	pl
 800554a:	6013      	strpl	r3, [r2, #0]
 800554c:	2002      	movpl	r0, #2
 800554e:	4770      	bx	lr
 8005550:	b299      	uxth	r1, r3
 8005552:	b909      	cbnz	r1, 8005558 <__lo0bits+0x2a>
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	2010      	movs	r0, #16
 8005558:	b2d9      	uxtb	r1, r3
 800555a:	b909      	cbnz	r1, 8005560 <__lo0bits+0x32>
 800555c:	3008      	adds	r0, #8
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	0719      	lsls	r1, r3, #28
 8005562:	bf04      	itt	eq
 8005564:	091b      	lsreq	r3, r3, #4
 8005566:	3004      	addeq	r0, #4
 8005568:	0799      	lsls	r1, r3, #30
 800556a:	bf04      	itt	eq
 800556c:	089b      	lsreq	r3, r3, #2
 800556e:	3002      	addeq	r0, #2
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	d403      	bmi.n	800557c <__lo0bits+0x4e>
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	f100 0001 	add.w	r0, r0, #1
 800557a:	d003      	beq.n	8005584 <__lo0bits+0x56>
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4770      	bx	lr
 8005580:	2000      	movs	r0, #0
 8005582:	4770      	bx	lr
 8005584:	2020      	movs	r0, #32
 8005586:	4770      	bx	lr

08005588 <__i2b>:
 8005588:	b510      	push	{r4, lr}
 800558a:	460c      	mov	r4, r1
 800558c:	2101      	movs	r1, #1
 800558e:	f7ff ff07 	bl	80053a0 <_Balloc>
 8005592:	4602      	mov	r2, r0
 8005594:	b928      	cbnz	r0, 80055a2 <__i2b+0x1a>
 8005596:	4b05      	ldr	r3, [pc, #20]	@ (80055ac <__i2b+0x24>)
 8005598:	4805      	ldr	r0, [pc, #20]	@ (80055b0 <__i2b+0x28>)
 800559a:	f240 1145 	movw	r1, #325	@ 0x145
 800559e:	f000 fcbd 	bl	8005f1c <__assert_func>
 80055a2:	2301      	movs	r3, #1
 80055a4:	6144      	str	r4, [r0, #20]
 80055a6:	6103      	str	r3, [r0, #16]
 80055a8:	bd10      	pop	{r4, pc}
 80055aa:	bf00      	nop
 80055ac:	08006730 	.word	0x08006730
 80055b0:	08006741 	.word	0x08006741

080055b4 <__multiply>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	4614      	mov	r4, r2
 80055ba:	690a      	ldr	r2, [r1, #16]
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	429a      	cmp	r2, r3
 80055c0:	bfa8      	it	ge
 80055c2:	4623      	movge	r3, r4
 80055c4:	460f      	mov	r7, r1
 80055c6:	bfa4      	itt	ge
 80055c8:	460c      	movge	r4, r1
 80055ca:	461f      	movge	r7, r3
 80055cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80055d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80055d4:	68a3      	ldr	r3, [r4, #8]
 80055d6:	6861      	ldr	r1, [r4, #4]
 80055d8:	eb0a 0609 	add.w	r6, sl, r9
 80055dc:	42b3      	cmp	r3, r6
 80055de:	b085      	sub	sp, #20
 80055e0:	bfb8      	it	lt
 80055e2:	3101      	addlt	r1, #1
 80055e4:	f7ff fedc 	bl	80053a0 <_Balloc>
 80055e8:	b930      	cbnz	r0, 80055f8 <__multiply+0x44>
 80055ea:	4602      	mov	r2, r0
 80055ec:	4b44      	ldr	r3, [pc, #272]	@ (8005700 <__multiply+0x14c>)
 80055ee:	4845      	ldr	r0, [pc, #276]	@ (8005704 <__multiply+0x150>)
 80055f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80055f4:	f000 fc92 	bl	8005f1c <__assert_func>
 80055f8:	f100 0514 	add.w	r5, r0, #20
 80055fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005600:	462b      	mov	r3, r5
 8005602:	2200      	movs	r2, #0
 8005604:	4543      	cmp	r3, r8
 8005606:	d321      	bcc.n	800564c <__multiply+0x98>
 8005608:	f107 0114 	add.w	r1, r7, #20
 800560c:	f104 0214 	add.w	r2, r4, #20
 8005610:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005614:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005618:	9302      	str	r3, [sp, #8]
 800561a:	1b13      	subs	r3, r2, r4
 800561c:	3b15      	subs	r3, #21
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	3304      	adds	r3, #4
 8005624:	f104 0715 	add.w	r7, r4, #21
 8005628:	42ba      	cmp	r2, r7
 800562a:	bf38      	it	cc
 800562c:	2304      	movcc	r3, #4
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	9b02      	ldr	r3, [sp, #8]
 8005632:	9103      	str	r1, [sp, #12]
 8005634:	428b      	cmp	r3, r1
 8005636:	d80c      	bhi.n	8005652 <__multiply+0x9e>
 8005638:	2e00      	cmp	r6, #0
 800563a:	dd03      	ble.n	8005644 <__multiply+0x90>
 800563c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005640:	2b00      	cmp	r3, #0
 8005642:	d05b      	beq.n	80056fc <__multiply+0x148>
 8005644:	6106      	str	r6, [r0, #16]
 8005646:	b005      	add	sp, #20
 8005648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564c:	f843 2b04 	str.w	r2, [r3], #4
 8005650:	e7d8      	b.n	8005604 <__multiply+0x50>
 8005652:	f8b1 a000 	ldrh.w	sl, [r1]
 8005656:	f1ba 0f00 	cmp.w	sl, #0
 800565a:	d024      	beq.n	80056a6 <__multiply+0xf2>
 800565c:	f104 0e14 	add.w	lr, r4, #20
 8005660:	46a9      	mov	r9, r5
 8005662:	f04f 0c00 	mov.w	ip, #0
 8005666:	f85e 7b04 	ldr.w	r7, [lr], #4
 800566a:	f8d9 3000 	ldr.w	r3, [r9]
 800566e:	fa1f fb87 	uxth.w	fp, r7
 8005672:	b29b      	uxth	r3, r3
 8005674:	fb0a 330b 	mla	r3, sl, fp, r3
 8005678:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800567c:	f8d9 7000 	ldr.w	r7, [r9]
 8005680:	4463      	add	r3, ip
 8005682:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005686:	fb0a c70b 	mla	r7, sl, fp, ip
 800568a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800568e:	b29b      	uxth	r3, r3
 8005690:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005694:	4572      	cmp	r2, lr
 8005696:	f849 3b04 	str.w	r3, [r9], #4
 800569a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800569e:	d8e2      	bhi.n	8005666 <__multiply+0xb2>
 80056a0:	9b01      	ldr	r3, [sp, #4]
 80056a2:	f845 c003 	str.w	ip, [r5, r3]
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80056ac:	3104      	adds	r1, #4
 80056ae:	f1b9 0f00 	cmp.w	r9, #0
 80056b2:	d021      	beq.n	80056f8 <__multiply+0x144>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	f104 0c14 	add.w	ip, r4, #20
 80056ba:	46ae      	mov	lr, r5
 80056bc:	f04f 0a00 	mov.w	sl, #0
 80056c0:	f8bc b000 	ldrh.w	fp, [ip]
 80056c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80056c8:	fb09 770b 	mla	r7, r9, fp, r7
 80056cc:	4457      	add	r7, sl
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056d4:	f84e 3b04 	str.w	r3, [lr], #4
 80056d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056e0:	f8be 3000 	ldrh.w	r3, [lr]
 80056e4:	fb09 330a 	mla	r3, r9, sl, r3
 80056e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80056ec:	4562      	cmp	r2, ip
 80056ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056f2:	d8e5      	bhi.n	80056c0 <__multiply+0x10c>
 80056f4:	9f01      	ldr	r7, [sp, #4]
 80056f6:	51eb      	str	r3, [r5, r7]
 80056f8:	3504      	adds	r5, #4
 80056fa:	e799      	b.n	8005630 <__multiply+0x7c>
 80056fc:	3e01      	subs	r6, #1
 80056fe:	e79b      	b.n	8005638 <__multiply+0x84>
 8005700:	08006730 	.word	0x08006730
 8005704:	08006741 	.word	0x08006741

08005708 <__pow5mult>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	4615      	mov	r5, r2
 800570e:	f012 0203 	ands.w	r2, r2, #3
 8005712:	4607      	mov	r7, r0
 8005714:	460e      	mov	r6, r1
 8005716:	d007      	beq.n	8005728 <__pow5mult+0x20>
 8005718:	4c25      	ldr	r4, [pc, #148]	@ (80057b0 <__pow5mult+0xa8>)
 800571a:	3a01      	subs	r2, #1
 800571c:	2300      	movs	r3, #0
 800571e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005722:	f7ff fe9f 	bl	8005464 <__multadd>
 8005726:	4606      	mov	r6, r0
 8005728:	10ad      	asrs	r5, r5, #2
 800572a:	d03d      	beq.n	80057a8 <__pow5mult+0xa0>
 800572c:	69fc      	ldr	r4, [r7, #28]
 800572e:	b97c      	cbnz	r4, 8005750 <__pow5mult+0x48>
 8005730:	2010      	movs	r0, #16
 8005732:	f7ff fd7f 	bl	8005234 <malloc>
 8005736:	4602      	mov	r2, r0
 8005738:	61f8      	str	r0, [r7, #28]
 800573a:	b928      	cbnz	r0, 8005748 <__pow5mult+0x40>
 800573c:	4b1d      	ldr	r3, [pc, #116]	@ (80057b4 <__pow5mult+0xac>)
 800573e:	481e      	ldr	r0, [pc, #120]	@ (80057b8 <__pow5mult+0xb0>)
 8005740:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005744:	f000 fbea 	bl	8005f1c <__assert_func>
 8005748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800574c:	6004      	str	r4, [r0, #0]
 800574e:	60c4      	str	r4, [r0, #12]
 8005750:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005758:	b94c      	cbnz	r4, 800576e <__pow5mult+0x66>
 800575a:	f240 2171 	movw	r1, #625	@ 0x271
 800575e:	4638      	mov	r0, r7
 8005760:	f7ff ff12 	bl	8005588 <__i2b>
 8005764:	2300      	movs	r3, #0
 8005766:	f8c8 0008 	str.w	r0, [r8, #8]
 800576a:	4604      	mov	r4, r0
 800576c:	6003      	str	r3, [r0, #0]
 800576e:	f04f 0900 	mov.w	r9, #0
 8005772:	07eb      	lsls	r3, r5, #31
 8005774:	d50a      	bpl.n	800578c <__pow5mult+0x84>
 8005776:	4631      	mov	r1, r6
 8005778:	4622      	mov	r2, r4
 800577a:	4638      	mov	r0, r7
 800577c:	f7ff ff1a 	bl	80055b4 <__multiply>
 8005780:	4631      	mov	r1, r6
 8005782:	4680      	mov	r8, r0
 8005784:	4638      	mov	r0, r7
 8005786:	f7ff fe4b 	bl	8005420 <_Bfree>
 800578a:	4646      	mov	r6, r8
 800578c:	106d      	asrs	r5, r5, #1
 800578e:	d00b      	beq.n	80057a8 <__pow5mult+0xa0>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	b938      	cbnz	r0, 80057a4 <__pow5mult+0x9c>
 8005794:	4622      	mov	r2, r4
 8005796:	4621      	mov	r1, r4
 8005798:	4638      	mov	r0, r7
 800579a:	f7ff ff0b 	bl	80055b4 <__multiply>
 800579e:	6020      	str	r0, [r4, #0]
 80057a0:	f8c0 9000 	str.w	r9, [r0]
 80057a4:	4604      	mov	r4, r0
 80057a6:	e7e4      	b.n	8005772 <__pow5mult+0x6a>
 80057a8:	4630      	mov	r0, r6
 80057aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ae:	bf00      	nop
 80057b0:	0800679c 	.word	0x0800679c
 80057b4:	080066c1 	.word	0x080066c1
 80057b8:	08006741 	.word	0x08006741

080057bc <__lshift>:
 80057bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	460c      	mov	r4, r1
 80057c2:	6849      	ldr	r1, [r1, #4]
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	4607      	mov	r7, r0
 80057ce:	4691      	mov	r9, r2
 80057d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057d4:	f108 0601 	add.w	r6, r8, #1
 80057d8:	42b3      	cmp	r3, r6
 80057da:	db0b      	blt.n	80057f4 <__lshift+0x38>
 80057dc:	4638      	mov	r0, r7
 80057de:	f7ff fddf 	bl	80053a0 <_Balloc>
 80057e2:	4605      	mov	r5, r0
 80057e4:	b948      	cbnz	r0, 80057fa <__lshift+0x3e>
 80057e6:	4602      	mov	r2, r0
 80057e8:	4b28      	ldr	r3, [pc, #160]	@ (800588c <__lshift+0xd0>)
 80057ea:	4829      	ldr	r0, [pc, #164]	@ (8005890 <__lshift+0xd4>)
 80057ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80057f0:	f000 fb94 	bl	8005f1c <__assert_func>
 80057f4:	3101      	adds	r1, #1
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	e7ee      	b.n	80057d8 <__lshift+0x1c>
 80057fa:	2300      	movs	r3, #0
 80057fc:	f100 0114 	add.w	r1, r0, #20
 8005800:	f100 0210 	add.w	r2, r0, #16
 8005804:	4618      	mov	r0, r3
 8005806:	4553      	cmp	r3, sl
 8005808:	db33      	blt.n	8005872 <__lshift+0xb6>
 800580a:	6920      	ldr	r0, [r4, #16]
 800580c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005810:	f104 0314 	add.w	r3, r4, #20
 8005814:	f019 091f 	ands.w	r9, r9, #31
 8005818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800581c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005820:	d02b      	beq.n	800587a <__lshift+0xbe>
 8005822:	f1c9 0e20 	rsb	lr, r9, #32
 8005826:	468a      	mov	sl, r1
 8005828:	2200      	movs	r2, #0
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	fa00 f009 	lsl.w	r0, r0, r9
 8005830:	4310      	orrs	r0, r2
 8005832:	f84a 0b04 	str.w	r0, [sl], #4
 8005836:	f853 2b04 	ldr.w	r2, [r3], #4
 800583a:	459c      	cmp	ip, r3
 800583c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005840:	d8f3      	bhi.n	800582a <__lshift+0x6e>
 8005842:	ebac 0304 	sub.w	r3, ip, r4
 8005846:	3b15      	subs	r3, #21
 8005848:	f023 0303 	bic.w	r3, r3, #3
 800584c:	3304      	adds	r3, #4
 800584e:	f104 0015 	add.w	r0, r4, #21
 8005852:	4584      	cmp	ip, r0
 8005854:	bf38      	it	cc
 8005856:	2304      	movcc	r3, #4
 8005858:	50ca      	str	r2, [r1, r3]
 800585a:	b10a      	cbz	r2, 8005860 <__lshift+0xa4>
 800585c:	f108 0602 	add.w	r6, r8, #2
 8005860:	3e01      	subs	r6, #1
 8005862:	4638      	mov	r0, r7
 8005864:	612e      	str	r6, [r5, #16]
 8005866:	4621      	mov	r1, r4
 8005868:	f7ff fdda 	bl	8005420 <_Bfree>
 800586c:	4628      	mov	r0, r5
 800586e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005872:	f842 0f04 	str.w	r0, [r2, #4]!
 8005876:	3301      	adds	r3, #1
 8005878:	e7c5      	b.n	8005806 <__lshift+0x4a>
 800587a:	3904      	subs	r1, #4
 800587c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005880:	f841 2f04 	str.w	r2, [r1, #4]!
 8005884:	459c      	cmp	ip, r3
 8005886:	d8f9      	bhi.n	800587c <__lshift+0xc0>
 8005888:	e7ea      	b.n	8005860 <__lshift+0xa4>
 800588a:	bf00      	nop
 800588c:	08006730 	.word	0x08006730
 8005890:	08006741 	.word	0x08006741

08005894 <__mcmp>:
 8005894:	690a      	ldr	r2, [r1, #16]
 8005896:	4603      	mov	r3, r0
 8005898:	6900      	ldr	r0, [r0, #16]
 800589a:	1a80      	subs	r0, r0, r2
 800589c:	b530      	push	{r4, r5, lr}
 800589e:	d10e      	bne.n	80058be <__mcmp+0x2a>
 80058a0:	3314      	adds	r3, #20
 80058a2:	3114      	adds	r1, #20
 80058a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80058a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80058ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058b4:	4295      	cmp	r5, r2
 80058b6:	d003      	beq.n	80058c0 <__mcmp+0x2c>
 80058b8:	d205      	bcs.n	80058c6 <__mcmp+0x32>
 80058ba:	f04f 30ff 	mov.w	r0, #4294967295
 80058be:	bd30      	pop	{r4, r5, pc}
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d3f3      	bcc.n	80058ac <__mcmp+0x18>
 80058c4:	e7fb      	b.n	80058be <__mcmp+0x2a>
 80058c6:	2001      	movs	r0, #1
 80058c8:	e7f9      	b.n	80058be <__mcmp+0x2a>
	...

080058cc <__mdiff>:
 80058cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	4689      	mov	r9, r1
 80058d2:	4606      	mov	r6, r0
 80058d4:	4611      	mov	r1, r2
 80058d6:	4648      	mov	r0, r9
 80058d8:	4614      	mov	r4, r2
 80058da:	f7ff ffdb 	bl	8005894 <__mcmp>
 80058de:	1e05      	subs	r5, r0, #0
 80058e0:	d112      	bne.n	8005908 <__mdiff+0x3c>
 80058e2:	4629      	mov	r1, r5
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff fd5b 	bl	80053a0 <_Balloc>
 80058ea:	4602      	mov	r2, r0
 80058ec:	b928      	cbnz	r0, 80058fa <__mdiff+0x2e>
 80058ee:	4b3f      	ldr	r3, [pc, #252]	@ (80059ec <__mdiff+0x120>)
 80058f0:	f240 2137 	movw	r1, #567	@ 0x237
 80058f4:	483e      	ldr	r0, [pc, #248]	@ (80059f0 <__mdiff+0x124>)
 80058f6:	f000 fb11 	bl	8005f1c <__assert_func>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005900:	4610      	mov	r0, r2
 8005902:	b003      	add	sp, #12
 8005904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005908:	bfbc      	itt	lt
 800590a:	464b      	movlt	r3, r9
 800590c:	46a1      	movlt	r9, r4
 800590e:	4630      	mov	r0, r6
 8005910:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005914:	bfba      	itte	lt
 8005916:	461c      	movlt	r4, r3
 8005918:	2501      	movlt	r5, #1
 800591a:	2500      	movge	r5, #0
 800591c:	f7ff fd40 	bl	80053a0 <_Balloc>
 8005920:	4602      	mov	r2, r0
 8005922:	b918      	cbnz	r0, 800592c <__mdiff+0x60>
 8005924:	4b31      	ldr	r3, [pc, #196]	@ (80059ec <__mdiff+0x120>)
 8005926:	f240 2145 	movw	r1, #581	@ 0x245
 800592a:	e7e3      	b.n	80058f4 <__mdiff+0x28>
 800592c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005930:	6926      	ldr	r6, [r4, #16]
 8005932:	60c5      	str	r5, [r0, #12]
 8005934:	f109 0310 	add.w	r3, r9, #16
 8005938:	f109 0514 	add.w	r5, r9, #20
 800593c:	f104 0e14 	add.w	lr, r4, #20
 8005940:	f100 0b14 	add.w	fp, r0, #20
 8005944:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005948:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	46d9      	mov	r9, fp
 8005950:	f04f 0c00 	mov.w	ip, #0
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	f85e 0b04 	ldr.w	r0, [lr], #4
 800595a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	fa1f f38a 	uxth.w	r3, sl
 8005964:	4619      	mov	r1, r3
 8005966:	b283      	uxth	r3, r0
 8005968:	1acb      	subs	r3, r1, r3
 800596a:	0c00      	lsrs	r0, r0, #16
 800596c:	4463      	add	r3, ip
 800596e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005972:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800597c:	4576      	cmp	r6, lr
 800597e:	f849 3b04 	str.w	r3, [r9], #4
 8005982:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005986:	d8e5      	bhi.n	8005954 <__mdiff+0x88>
 8005988:	1b33      	subs	r3, r6, r4
 800598a:	3b15      	subs	r3, #21
 800598c:	f023 0303 	bic.w	r3, r3, #3
 8005990:	3415      	adds	r4, #21
 8005992:	3304      	adds	r3, #4
 8005994:	42a6      	cmp	r6, r4
 8005996:	bf38      	it	cc
 8005998:	2304      	movcc	r3, #4
 800599a:	441d      	add	r5, r3
 800599c:	445b      	add	r3, fp
 800599e:	461e      	mov	r6, r3
 80059a0:	462c      	mov	r4, r5
 80059a2:	4544      	cmp	r4, r8
 80059a4:	d30e      	bcc.n	80059c4 <__mdiff+0xf8>
 80059a6:	f108 0103 	add.w	r1, r8, #3
 80059aa:	1b49      	subs	r1, r1, r5
 80059ac:	f021 0103 	bic.w	r1, r1, #3
 80059b0:	3d03      	subs	r5, #3
 80059b2:	45a8      	cmp	r8, r5
 80059b4:	bf38      	it	cc
 80059b6:	2100      	movcc	r1, #0
 80059b8:	440b      	add	r3, r1
 80059ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059be:	b191      	cbz	r1, 80059e6 <__mdiff+0x11a>
 80059c0:	6117      	str	r7, [r2, #16]
 80059c2:	e79d      	b.n	8005900 <__mdiff+0x34>
 80059c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80059c8:	46e6      	mov	lr, ip
 80059ca:	0c08      	lsrs	r0, r1, #16
 80059cc:	fa1c fc81 	uxtah	ip, ip, r1
 80059d0:	4471      	add	r1, lr
 80059d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80059d6:	b289      	uxth	r1, r1
 80059d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80059dc:	f846 1b04 	str.w	r1, [r6], #4
 80059e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059e4:	e7dd      	b.n	80059a2 <__mdiff+0xd6>
 80059e6:	3f01      	subs	r7, #1
 80059e8:	e7e7      	b.n	80059ba <__mdiff+0xee>
 80059ea:	bf00      	nop
 80059ec:	08006730 	.word	0x08006730
 80059f0:	08006741 	.word	0x08006741

080059f4 <__d2b>:
 80059f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059f8:	460f      	mov	r7, r1
 80059fa:	2101      	movs	r1, #1
 80059fc:	ec59 8b10 	vmov	r8, r9, d0
 8005a00:	4616      	mov	r6, r2
 8005a02:	f7ff fccd 	bl	80053a0 <_Balloc>
 8005a06:	4604      	mov	r4, r0
 8005a08:	b930      	cbnz	r0, 8005a18 <__d2b+0x24>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	4b23      	ldr	r3, [pc, #140]	@ (8005a9c <__d2b+0xa8>)
 8005a0e:	4824      	ldr	r0, [pc, #144]	@ (8005aa0 <__d2b+0xac>)
 8005a10:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a14:	f000 fa82 	bl	8005f1c <__assert_func>
 8005a18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a20:	b10d      	cbz	r5, 8005a26 <__d2b+0x32>
 8005a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	f1b8 0300 	subs.w	r3, r8, #0
 8005a2c:	d023      	beq.n	8005a76 <__d2b+0x82>
 8005a2e:	4668      	mov	r0, sp
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	f7ff fd7c 	bl	800552e <__lo0bits>
 8005a36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a3a:	b1d0      	cbz	r0, 8005a72 <__d2b+0x7e>
 8005a3c:	f1c0 0320 	rsb	r3, r0, #32
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	430b      	orrs	r3, r1
 8005a46:	40c2      	lsrs	r2, r0
 8005a48:	6163      	str	r3, [r4, #20]
 8005a4a:	9201      	str	r2, [sp, #4]
 8005a4c:	9b01      	ldr	r3, [sp, #4]
 8005a4e:	61a3      	str	r3, [r4, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bf0c      	ite	eq
 8005a54:	2201      	moveq	r2, #1
 8005a56:	2202      	movne	r2, #2
 8005a58:	6122      	str	r2, [r4, #16]
 8005a5a:	b1a5      	cbz	r5, 8005a86 <__d2b+0x92>
 8005a5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a60:	4405      	add	r5, r0
 8005a62:	603d      	str	r5, [r7, #0]
 8005a64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a68:	6030      	str	r0, [r6, #0]
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	b003      	add	sp, #12
 8005a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a72:	6161      	str	r1, [r4, #20]
 8005a74:	e7ea      	b.n	8005a4c <__d2b+0x58>
 8005a76:	a801      	add	r0, sp, #4
 8005a78:	f7ff fd59 	bl	800552e <__lo0bits>
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	6163      	str	r3, [r4, #20]
 8005a80:	3020      	adds	r0, #32
 8005a82:	2201      	movs	r2, #1
 8005a84:	e7e8      	b.n	8005a58 <__d2b+0x64>
 8005a86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a8e:	6038      	str	r0, [r7, #0]
 8005a90:	6918      	ldr	r0, [r3, #16]
 8005a92:	f7ff fd2d 	bl	80054f0 <__hi0bits>
 8005a96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a9a:	e7e5      	b.n	8005a68 <__d2b+0x74>
 8005a9c:	08006730 	.word	0x08006730
 8005aa0:	08006741 	.word	0x08006741

08005aa4 <__ssputs_r>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	688e      	ldr	r6, [r1, #8]
 8005aaa:	461f      	mov	r7, r3
 8005aac:	42be      	cmp	r6, r7
 8005aae:	680b      	ldr	r3, [r1, #0]
 8005ab0:	4682      	mov	sl, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	4690      	mov	r8, r2
 8005ab6:	d82d      	bhi.n	8005b14 <__ssputs_r+0x70>
 8005ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005abc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ac0:	d026      	beq.n	8005b10 <__ssputs_r+0x6c>
 8005ac2:	6965      	ldr	r5, [r4, #20]
 8005ac4:	6909      	ldr	r1, [r1, #16]
 8005ac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aca:	eba3 0901 	sub.w	r9, r3, r1
 8005ace:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ad2:	1c7b      	adds	r3, r7, #1
 8005ad4:	444b      	add	r3, r9
 8005ad6:	106d      	asrs	r5, r5, #1
 8005ad8:	429d      	cmp	r5, r3
 8005ada:	bf38      	it	cc
 8005adc:	461d      	movcc	r5, r3
 8005ade:	0553      	lsls	r3, r2, #21
 8005ae0:	d527      	bpl.n	8005b32 <__ssputs_r+0x8e>
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f7ff fbd0 	bl	8005288 <_malloc_r>
 8005ae8:	4606      	mov	r6, r0
 8005aea:	b360      	cbz	r0, 8005b46 <__ssputs_r+0xa2>
 8005aec:	6921      	ldr	r1, [r4, #16]
 8005aee:	464a      	mov	r2, r9
 8005af0:	f000 fa06 	bl	8005f00 <memcpy>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	6126      	str	r6, [r4, #16]
 8005b02:	6165      	str	r5, [r4, #20]
 8005b04:	444e      	add	r6, r9
 8005b06:	eba5 0509 	sub.w	r5, r5, r9
 8005b0a:	6026      	str	r6, [r4, #0]
 8005b0c:	60a5      	str	r5, [r4, #8]
 8005b0e:	463e      	mov	r6, r7
 8005b10:	42be      	cmp	r6, r7
 8005b12:	d900      	bls.n	8005b16 <__ssputs_r+0x72>
 8005b14:	463e      	mov	r6, r7
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	4632      	mov	r2, r6
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	f000 f9c6 	bl	8005eac <memmove>
 8005b20:	68a3      	ldr	r3, [r4, #8]
 8005b22:	1b9b      	subs	r3, r3, r6
 8005b24:	60a3      	str	r3, [r4, #8]
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	4433      	add	r3, r6
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b32:	462a      	mov	r2, r5
 8005b34:	f000 fa36 	bl	8005fa4 <_realloc_r>
 8005b38:	4606      	mov	r6, r0
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d1e0      	bne.n	8005b00 <__ssputs_r+0x5c>
 8005b3e:	6921      	ldr	r1, [r4, #16]
 8005b40:	4650      	mov	r0, sl
 8005b42:	f7ff fb2d 	bl	80051a0 <_free_r>
 8005b46:	230c      	movs	r3, #12
 8005b48:	f8ca 3000 	str.w	r3, [sl]
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e7e9      	b.n	8005b2e <__ssputs_r+0x8a>
	...

08005b5c <_svfiprintf_r>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	4698      	mov	r8, r3
 8005b62:	898b      	ldrh	r3, [r1, #12]
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	b09d      	sub	sp, #116	@ 0x74
 8005b68:	4607      	mov	r7, r0
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	d510      	bpl.n	8005b92 <_svfiprintf_r+0x36>
 8005b70:	690b      	ldr	r3, [r1, #16]
 8005b72:	b973      	cbnz	r3, 8005b92 <_svfiprintf_r+0x36>
 8005b74:	2140      	movs	r1, #64	@ 0x40
 8005b76:	f7ff fb87 	bl	8005288 <_malloc_r>
 8005b7a:	6028      	str	r0, [r5, #0]
 8005b7c:	6128      	str	r0, [r5, #16]
 8005b7e:	b930      	cbnz	r0, 8005b8e <_svfiprintf_r+0x32>
 8005b80:	230c      	movs	r3, #12
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	b01d      	add	sp, #116	@ 0x74
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	2340      	movs	r3, #64	@ 0x40
 8005b90:	616b      	str	r3, [r5, #20]
 8005b92:	2300      	movs	r3, #0
 8005b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b96:	2320      	movs	r3, #32
 8005b98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ba0:	2330      	movs	r3, #48	@ 0x30
 8005ba2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d40 <_svfiprintf_r+0x1e4>
 8005ba6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005baa:	f04f 0901 	mov.w	r9, #1
 8005bae:	4623      	mov	r3, r4
 8005bb0:	469a      	mov	sl, r3
 8005bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb6:	b10a      	cbz	r2, 8005bbc <_svfiprintf_r+0x60>
 8005bb8:	2a25      	cmp	r2, #37	@ 0x25
 8005bba:	d1f9      	bne.n	8005bb0 <_svfiprintf_r+0x54>
 8005bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc0:	d00b      	beq.n	8005bda <_svfiprintf_r+0x7e>
 8005bc2:	465b      	mov	r3, fp
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f7ff ff6b 	bl	8005aa4 <__ssputs_r>
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f000 80a7 	beq.w	8005d22 <_svfiprintf_r+0x1c6>
 8005bd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bd6:	445a      	add	r2, fp
 8005bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bda:	f89a 3000 	ldrb.w	r3, [sl]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 809f 	beq.w	8005d22 <_svfiprintf_r+0x1c6>
 8005be4:	2300      	movs	r3, #0
 8005be6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bee:	f10a 0a01 	add.w	sl, sl, #1
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	9307      	str	r3, [sp, #28]
 8005bf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bfc:	4654      	mov	r4, sl
 8005bfe:	2205      	movs	r2, #5
 8005c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c04:	484e      	ldr	r0, [pc, #312]	@ (8005d40 <_svfiprintf_r+0x1e4>)
 8005c06:	f7fa fb0b 	bl	8000220 <memchr>
 8005c0a:	9a04      	ldr	r2, [sp, #16]
 8005c0c:	b9d8      	cbnz	r0, 8005c46 <_svfiprintf_r+0xea>
 8005c0e:	06d0      	lsls	r0, r2, #27
 8005c10:	bf44      	itt	mi
 8005c12:	2320      	movmi	r3, #32
 8005c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c18:	0711      	lsls	r1, r2, #28
 8005c1a:	bf44      	itt	mi
 8005c1c:	232b      	movmi	r3, #43	@ 0x2b
 8005c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c22:	f89a 3000 	ldrb.w	r3, [sl]
 8005c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c28:	d015      	beq.n	8005c56 <_svfiprintf_r+0xfa>
 8005c2a:	9a07      	ldr	r2, [sp, #28]
 8005c2c:	4654      	mov	r4, sl
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f04f 0c0a 	mov.w	ip, #10
 8005c34:	4621      	mov	r1, r4
 8005c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c3a:	3b30      	subs	r3, #48	@ 0x30
 8005c3c:	2b09      	cmp	r3, #9
 8005c3e:	d94b      	bls.n	8005cd8 <_svfiprintf_r+0x17c>
 8005c40:	b1b0      	cbz	r0, 8005c70 <_svfiprintf_r+0x114>
 8005c42:	9207      	str	r2, [sp, #28]
 8005c44:	e014      	b.n	8005c70 <_svfiprintf_r+0x114>
 8005c46:	eba0 0308 	sub.w	r3, r0, r8
 8005c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	46a2      	mov	sl, r4
 8005c54:	e7d2      	b.n	8005bfc <_svfiprintf_r+0xa0>
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	1d19      	adds	r1, r3, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	9103      	str	r1, [sp, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bfbb      	ittet	lt
 8005c62:	425b      	neglt	r3, r3
 8005c64:	f042 0202 	orrlt.w	r2, r2, #2
 8005c68:	9307      	strge	r3, [sp, #28]
 8005c6a:	9307      	strlt	r3, [sp, #28]
 8005c6c:	bfb8      	it	lt
 8005c6e:	9204      	strlt	r2, [sp, #16]
 8005c70:	7823      	ldrb	r3, [r4, #0]
 8005c72:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c74:	d10a      	bne.n	8005c8c <_svfiprintf_r+0x130>
 8005c76:	7863      	ldrb	r3, [r4, #1]
 8005c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c7a:	d132      	bne.n	8005ce2 <_svfiprintf_r+0x186>
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	1d1a      	adds	r2, r3, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	9203      	str	r2, [sp, #12]
 8005c84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c88:	3402      	adds	r4, #2
 8005c8a:	9305      	str	r3, [sp, #20]
 8005c8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d50 <_svfiprintf_r+0x1f4>
 8005c90:	7821      	ldrb	r1, [r4, #0]
 8005c92:	2203      	movs	r2, #3
 8005c94:	4650      	mov	r0, sl
 8005c96:	f7fa fac3 	bl	8000220 <memchr>
 8005c9a:	b138      	cbz	r0, 8005cac <_svfiprintf_r+0x150>
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	eba0 000a 	sub.w	r0, r0, sl
 8005ca2:	2240      	movs	r2, #64	@ 0x40
 8005ca4:	4082      	lsls	r2, r0
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	3401      	adds	r4, #1
 8005caa:	9304      	str	r3, [sp, #16]
 8005cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb0:	4824      	ldr	r0, [pc, #144]	@ (8005d44 <_svfiprintf_r+0x1e8>)
 8005cb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cb6:	2206      	movs	r2, #6
 8005cb8:	f7fa fab2 	bl	8000220 <memchr>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d036      	beq.n	8005d2e <_svfiprintf_r+0x1d2>
 8005cc0:	4b21      	ldr	r3, [pc, #132]	@ (8005d48 <_svfiprintf_r+0x1ec>)
 8005cc2:	bb1b      	cbnz	r3, 8005d0c <_svfiprintf_r+0x1b0>
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	3307      	adds	r3, #7
 8005cc8:	f023 0307 	bic.w	r3, r3, #7
 8005ccc:	3308      	adds	r3, #8
 8005cce:	9303      	str	r3, [sp, #12]
 8005cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd2:	4433      	add	r3, r6
 8005cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd6:	e76a      	b.n	8005bae <_svfiprintf_r+0x52>
 8005cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cdc:	460c      	mov	r4, r1
 8005cde:	2001      	movs	r0, #1
 8005ce0:	e7a8      	b.n	8005c34 <_svfiprintf_r+0xd8>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	3401      	adds	r4, #1
 8005ce6:	9305      	str	r3, [sp, #20]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f04f 0c0a 	mov.w	ip, #10
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf4:	3a30      	subs	r2, #48	@ 0x30
 8005cf6:	2a09      	cmp	r2, #9
 8005cf8:	d903      	bls.n	8005d02 <_svfiprintf_r+0x1a6>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0c6      	beq.n	8005c8c <_svfiprintf_r+0x130>
 8005cfe:	9105      	str	r1, [sp, #20]
 8005d00:	e7c4      	b.n	8005c8c <_svfiprintf_r+0x130>
 8005d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d06:	4604      	mov	r4, r0
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e7f0      	b.n	8005cee <_svfiprintf_r+0x192>
 8005d0c:	ab03      	add	r3, sp, #12
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	462a      	mov	r2, r5
 8005d12:	4b0e      	ldr	r3, [pc, #56]	@ (8005d4c <_svfiprintf_r+0x1f0>)
 8005d14:	a904      	add	r1, sp, #16
 8005d16:	4638      	mov	r0, r7
 8005d18:	f7fd fe96 	bl	8003a48 <_printf_float>
 8005d1c:	1c42      	adds	r2, r0, #1
 8005d1e:	4606      	mov	r6, r0
 8005d20:	d1d6      	bne.n	8005cd0 <_svfiprintf_r+0x174>
 8005d22:	89ab      	ldrh	r3, [r5, #12]
 8005d24:	065b      	lsls	r3, r3, #25
 8005d26:	f53f af2d 	bmi.w	8005b84 <_svfiprintf_r+0x28>
 8005d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d2c:	e72c      	b.n	8005b88 <_svfiprintf_r+0x2c>
 8005d2e:	ab03      	add	r3, sp, #12
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	462a      	mov	r2, r5
 8005d34:	4b05      	ldr	r3, [pc, #20]	@ (8005d4c <_svfiprintf_r+0x1f0>)
 8005d36:	a904      	add	r1, sp, #16
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7fe f91d 	bl	8003f78 <_printf_i>
 8005d3e:	e7ed      	b.n	8005d1c <_svfiprintf_r+0x1c0>
 8005d40:	08006898 	.word	0x08006898
 8005d44:	080068a2 	.word	0x080068a2
 8005d48:	08003a49 	.word	0x08003a49
 8005d4c:	08005aa5 	.word	0x08005aa5
 8005d50:	0800689e 	.word	0x0800689e

08005d54 <__sflush_r>:
 8005d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5c:	0716      	lsls	r6, r2, #28
 8005d5e:	4605      	mov	r5, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	d454      	bmi.n	8005e0e <__sflush_r+0xba>
 8005d64:	684b      	ldr	r3, [r1, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	dc02      	bgt.n	8005d70 <__sflush_r+0x1c>
 8005d6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dd48      	ble.n	8005e02 <__sflush_r+0xae>
 8005d70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d72:	2e00      	cmp	r6, #0
 8005d74:	d045      	beq.n	8005e02 <__sflush_r+0xae>
 8005d76:	2300      	movs	r3, #0
 8005d78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d7c:	682f      	ldr	r7, [r5, #0]
 8005d7e:	6a21      	ldr	r1, [r4, #32]
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	d030      	beq.n	8005de6 <__sflush_r+0x92>
 8005d84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	0759      	lsls	r1, r3, #29
 8005d8a:	d505      	bpl.n	8005d98 <__sflush_r+0x44>
 8005d8c:	6863      	ldr	r3, [r4, #4]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d92:	b10b      	cbz	r3, 8005d98 <__sflush_r+0x44>
 8005d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d96:	1ad2      	subs	r2, r2, r3
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d9c:	6a21      	ldr	r1, [r4, #32]
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b0      	blx	r6
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	d106      	bne.n	8005db6 <__sflush_r+0x62>
 8005da8:	6829      	ldr	r1, [r5, #0]
 8005daa:	291d      	cmp	r1, #29
 8005dac:	d82b      	bhi.n	8005e06 <__sflush_r+0xb2>
 8005dae:	4a2a      	ldr	r2, [pc, #168]	@ (8005e58 <__sflush_r+0x104>)
 8005db0:	410a      	asrs	r2, r1
 8005db2:	07d6      	lsls	r6, r2, #31
 8005db4:	d427      	bmi.n	8005e06 <__sflush_r+0xb2>
 8005db6:	2200      	movs	r2, #0
 8005db8:	6062      	str	r2, [r4, #4]
 8005dba:	04d9      	lsls	r1, r3, #19
 8005dbc:	6922      	ldr	r2, [r4, #16]
 8005dbe:	6022      	str	r2, [r4, #0]
 8005dc0:	d504      	bpl.n	8005dcc <__sflush_r+0x78>
 8005dc2:	1c42      	adds	r2, r0, #1
 8005dc4:	d101      	bne.n	8005dca <__sflush_r+0x76>
 8005dc6:	682b      	ldr	r3, [r5, #0]
 8005dc8:	b903      	cbnz	r3, 8005dcc <__sflush_r+0x78>
 8005dca:	6560      	str	r0, [r4, #84]	@ 0x54
 8005dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dce:	602f      	str	r7, [r5, #0]
 8005dd0:	b1b9      	cbz	r1, 8005e02 <__sflush_r+0xae>
 8005dd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	d002      	beq.n	8005de0 <__sflush_r+0x8c>
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7ff f9e0 	bl	80051a0 <_free_r>
 8005de0:	2300      	movs	r3, #0
 8005de2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005de4:	e00d      	b.n	8005e02 <__sflush_r+0xae>
 8005de6:	2301      	movs	r3, #1
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b0      	blx	r6
 8005dec:	4602      	mov	r2, r0
 8005dee:	1c50      	adds	r0, r2, #1
 8005df0:	d1c9      	bne.n	8005d86 <__sflush_r+0x32>
 8005df2:	682b      	ldr	r3, [r5, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0c6      	beq.n	8005d86 <__sflush_r+0x32>
 8005df8:	2b1d      	cmp	r3, #29
 8005dfa:	d001      	beq.n	8005e00 <__sflush_r+0xac>
 8005dfc:	2b16      	cmp	r3, #22
 8005dfe:	d11e      	bne.n	8005e3e <__sflush_r+0xea>
 8005e00:	602f      	str	r7, [r5, #0]
 8005e02:	2000      	movs	r0, #0
 8005e04:	e022      	b.n	8005e4c <__sflush_r+0xf8>
 8005e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e0a:	b21b      	sxth	r3, r3
 8005e0c:	e01b      	b.n	8005e46 <__sflush_r+0xf2>
 8005e0e:	690f      	ldr	r7, [r1, #16]
 8005e10:	2f00      	cmp	r7, #0
 8005e12:	d0f6      	beq.n	8005e02 <__sflush_r+0xae>
 8005e14:	0793      	lsls	r3, r2, #30
 8005e16:	680e      	ldr	r6, [r1, #0]
 8005e18:	bf08      	it	eq
 8005e1a:	694b      	ldreq	r3, [r1, #20]
 8005e1c:	600f      	str	r7, [r1, #0]
 8005e1e:	bf18      	it	ne
 8005e20:	2300      	movne	r3, #0
 8005e22:	eba6 0807 	sub.w	r8, r6, r7
 8005e26:	608b      	str	r3, [r1, #8]
 8005e28:	f1b8 0f00 	cmp.w	r8, #0
 8005e2c:	dde9      	ble.n	8005e02 <__sflush_r+0xae>
 8005e2e:	6a21      	ldr	r1, [r4, #32]
 8005e30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e32:	4643      	mov	r3, r8
 8005e34:	463a      	mov	r2, r7
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b0      	blx	r6
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	dc08      	bgt.n	8005e50 <__sflush_r+0xfc>
 8005e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e50:	4407      	add	r7, r0
 8005e52:	eba8 0800 	sub.w	r8, r8, r0
 8005e56:	e7e7      	b.n	8005e28 <__sflush_r+0xd4>
 8005e58:	dfbffffe 	.word	0xdfbffffe

08005e5c <_fflush_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	690b      	ldr	r3, [r1, #16]
 8005e60:	4605      	mov	r5, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	b913      	cbnz	r3, 8005e6c <_fflush_r+0x10>
 8005e66:	2500      	movs	r5, #0
 8005e68:	4628      	mov	r0, r5
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	b118      	cbz	r0, 8005e76 <_fflush_r+0x1a>
 8005e6e:	6a03      	ldr	r3, [r0, #32]
 8005e70:	b90b      	cbnz	r3, 8005e76 <_fflush_r+0x1a>
 8005e72:	f7fe fa2d 	bl	80042d0 <__sinit>
 8005e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f3      	beq.n	8005e66 <_fflush_r+0xa>
 8005e7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e80:	07d0      	lsls	r0, r2, #31
 8005e82:	d404      	bmi.n	8005e8e <_fflush_r+0x32>
 8005e84:	0599      	lsls	r1, r3, #22
 8005e86:	d402      	bmi.n	8005e8e <_fflush_r+0x32>
 8005e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e8a:	f7fe fb38 	bl	80044fe <__retarget_lock_acquire_recursive>
 8005e8e:	4628      	mov	r0, r5
 8005e90:	4621      	mov	r1, r4
 8005e92:	f7ff ff5f 	bl	8005d54 <__sflush_r>
 8005e96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e98:	07da      	lsls	r2, r3, #31
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	d4e4      	bmi.n	8005e68 <_fflush_r+0xc>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	059b      	lsls	r3, r3, #22
 8005ea2:	d4e1      	bmi.n	8005e68 <_fflush_r+0xc>
 8005ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ea6:	f7fe fb2b 	bl	8004500 <__retarget_lock_release_recursive>
 8005eaa:	e7dd      	b.n	8005e68 <_fflush_r+0xc>

08005eac <memmove>:
 8005eac:	4288      	cmp	r0, r1
 8005eae:	b510      	push	{r4, lr}
 8005eb0:	eb01 0402 	add.w	r4, r1, r2
 8005eb4:	d902      	bls.n	8005ebc <memmove+0x10>
 8005eb6:	4284      	cmp	r4, r0
 8005eb8:	4623      	mov	r3, r4
 8005eba:	d807      	bhi.n	8005ecc <memmove+0x20>
 8005ebc:	1e43      	subs	r3, r0, #1
 8005ebe:	42a1      	cmp	r1, r4
 8005ec0:	d008      	beq.n	8005ed4 <memmove+0x28>
 8005ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eca:	e7f8      	b.n	8005ebe <memmove+0x12>
 8005ecc:	4402      	add	r2, r0
 8005ece:	4601      	mov	r1, r0
 8005ed0:	428a      	cmp	r2, r1
 8005ed2:	d100      	bne.n	8005ed6 <memmove+0x2a>
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ede:	e7f7      	b.n	8005ed0 <memmove+0x24>

08005ee0 <_sbrk_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d06      	ldr	r5, [pc, #24]	@ (8005efc <_sbrk_r+0x1c>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f7fb fad4 	bl	8001498 <_sbrk>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_sbrk_r+0x1a>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_sbrk_r+0x1a>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	200003c8 	.word	0x200003c8

08005f00 <memcpy>:
 8005f00:	440a      	add	r2, r1
 8005f02:	4291      	cmp	r1, r2
 8005f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f08:	d100      	bne.n	8005f0c <memcpy+0xc>
 8005f0a:	4770      	bx	lr
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f16:	4291      	cmp	r1, r2
 8005f18:	d1f9      	bne.n	8005f0e <memcpy+0xe>
 8005f1a:	bd10      	pop	{r4, pc}

08005f1c <__assert_func>:
 8005f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f1e:	4614      	mov	r4, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4b09      	ldr	r3, [pc, #36]	@ (8005f48 <__assert_func+0x2c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4605      	mov	r5, r0
 8005f28:	68d8      	ldr	r0, [r3, #12]
 8005f2a:	b954      	cbnz	r4, 8005f42 <__assert_func+0x26>
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <__assert_func+0x30>)
 8005f2e:	461c      	mov	r4, r3
 8005f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f34:	9100      	str	r1, [sp, #0]
 8005f36:	462b      	mov	r3, r5
 8005f38:	4905      	ldr	r1, [pc, #20]	@ (8005f50 <__assert_func+0x34>)
 8005f3a:	f000 f86f 	bl	800601c <fiprintf>
 8005f3e:	f000 f87f 	bl	8006040 <abort>
 8005f42:	4b04      	ldr	r3, [pc, #16]	@ (8005f54 <__assert_func+0x38>)
 8005f44:	e7f4      	b.n	8005f30 <__assert_func+0x14>
 8005f46:	bf00      	nop
 8005f48:	20000018 	.word	0x20000018
 8005f4c:	080068ee 	.word	0x080068ee
 8005f50:	080068c0 	.word	0x080068c0
 8005f54:	080068b3 	.word	0x080068b3

08005f58 <_calloc_r>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	fba1 5402 	umull	r5, r4, r1, r2
 8005f5e:	b93c      	cbnz	r4, 8005f70 <_calloc_r+0x18>
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7ff f991 	bl	8005288 <_malloc_r>
 8005f66:	4606      	mov	r6, r0
 8005f68:	b928      	cbnz	r0, 8005f76 <_calloc_r+0x1e>
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	220c      	movs	r2, #12
 8005f72:	6002      	str	r2, [r0, #0]
 8005f74:	e7f9      	b.n	8005f6a <_calloc_r+0x12>
 8005f76:	462a      	mov	r2, r5
 8005f78:	4621      	mov	r1, r4
 8005f7a:	f7fe fa42 	bl	8004402 <memset>
 8005f7e:	e7f5      	b.n	8005f6c <_calloc_r+0x14>

08005f80 <__ascii_mbtowc>:
 8005f80:	b082      	sub	sp, #8
 8005f82:	b901      	cbnz	r1, 8005f86 <__ascii_mbtowc+0x6>
 8005f84:	a901      	add	r1, sp, #4
 8005f86:	b142      	cbz	r2, 8005f9a <__ascii_mbtowc+0x1a>
 8005f88:	b14b      	cbz	r3, 8005f9e <__ascii_mbtowc+0x1e>
 8005f8a:	7813      	ldrb	r3, [r2, #0]
 8005f8c:	600b      	str	r3, [r1, #0]
 8005f8e:	7812      	ldrb	r2, [r2, #0]
 8005f90:	1e10      	subs	r0, r2, #0
 8005f92:	bf18      	it	ne
 8005f94:	2001      	movne	r0, #1
 8005f96:	b002      	add	sp, #8
 8005f98:	4770      	bx	lr
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	e7fb      	b.n	8005f96 <__ascii_mbtowc+0x16>
 8005f9e:	f06f 0001 	mvn.w	r0, #1
 8005fa2:	e7f8      	b.n	8005f96 <__ascii_mbtowc+0x16>

08005fa4 <_realloc_r>:
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	4680      	mov	r8, r0
 8005faa:	4615      	mov	r5, r2
 8005fac:	460c      	mov	r4, r1
 8005fae:	b921      	cbnz	r1, 8005fba <_realloc_r+0x16>
 8005fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	f7ff b967 	b.w	8005288 <_malloc_r>
 8005fba:	b92a      	cbnz	r2, 8005fc8 <_realloc_r+0x24>
 8005fbc:	f7ff f8f0 	bl	80051a0 <_free_r>
 8005fc0:	2400      	movs	r4, #0
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc8:	f000 f841 	bl	800604e <_malloc_usable_size_r>
 8005fcc:	4285      	cmp	r5, r0
 8005fce:	4606      	mov	r6, r0
 8005fd0:	d802      	bhi.n	8005fd8 <_realloc_r+0x34>
 8005fd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fd6:	d8f4      	bhi.n	8005fc2 <_realloc_r+0x1e>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4640      	mov	r0, r8
 8005fdc:	f7ff f954 	bl	8005288 <_malloc_r>
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d0ec      	beq.n	8005fc0 <_realloc_r+0x1c>
 8005fe6:	42b5      	cmp	r5, r6
 8005fe8:	462a      	mov	r2, r5
 8005fea:	4621      	mov	r1, r4
 8005fec:	bf28      	it	cs
 8005fee:	4632      	movcs	r2, r6
 8005ff0:	f7ff ff86 	bl	8005f00 <memcpy>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7ff f8d2 	bl	80051a0 <_free_r>
 8005ffc:	463c      	mov	r4, r7
 8005ffe:	e7e0      	b.n	8005fc2 <_realloc_r+0x1e>

08006000 <__ascii_wctomb>:
 8006000:	4603      	mov	r3, r0
 8006002:	4608      	mov	r0, r1
 8006004:	b141      	cbz	r1, 8006018 <__ascii_wctomb+0x18>
 8006006:	2aff      	cmp	r2, #255	@ 0xff
 8006008:	d904      	bls.n	8006014 <__ascii_wctomb+0x14>
 800600a:	228a      	movs	r2, #138	@ 0x8a
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	4770      	bx	lr
 8006014:	700a      	strb	r2, [r1, #0]
 8006016:	2001      	movs	r0, #1
 8006018:	4770      	bx	lr
	...

0800601c <fiprintf>:
 800601c:	b40e      	push	{r1, r2, r3}
 800601e:	b503      	push	{r0, r1, lr}
 8006020:	4601      	mov	r1, r0
 8006022:	ab03      	add	r3, sp, #12
 8006024:	4805      	ldr	r0, [pc, #20]	@ (800603c <fiprintf+0x20>)
 8006026:	f853 2b04 	ldr.w	r2, [r3], #4
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	f000 f83f 	bl	80060b0 <_vfiprintf_r>
 8006032:	b002      	add	sp, #8
 8006034:	f85d eb04 	ldr.w	lr, [sp], #4
 8006038:	b003      	add	sp, #12
 800603a:	4770      	bx	lr
 800603c:	20000018 	.word	0x20000018

08006040 <abort>:
 8006040:	b508      	push	{r3, lr}
 8006042:	2006      	movs	r0, #6
 8006044:	f000 fa08 	bl	8006458 <raise>
 8006048:	2001      	movs	r0, #1
 800604a:	f7fb f9ac 	bl	80013a6 <_exit>

0800604e <_malloc_usable_size_r>:
 800604e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006052:	1f18      	subs	r0, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	bfbc      	itt	lt
 8006058:	580b      	ldrlt	r3, [r1, r0]
 800605a:	18c0      	addlt	r0, r0, r3
 800605c:	4770      	bx	lr

0800605e <__sfputc_r>:
 800605e:	6893      	ldr	r3, [r2, #8]
 8006060:	3b01      	subs	r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	b410      	push	{r4}
 8006066:	6093      	str	r3, [r2, #8]
 8006068:	da08      	bge.n	800607c <__sfputc_r+0x1e>
 800606a:	6994      	ldr	r4, [r2, #24]
 800606c:	42a3      	cmp	r3, r4
 800606e:	db01      	blt.n	8006074 <__sfputc_r+0x16>
 8006070:	290a      	cmp	r1, #10
 8006072:	d103      	bne.n	800607c <__sfputc_r+0x1e>
 8006074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006078:	f000 b932 	b.w	80062e0 <__swbuf_r>
 800607c:	6813      	ldr	r3, [r2, #0]
 800607e:	1c58      	adds	r0, r3, #1
 8006080:	6010      	str	r0, [r2, #0]
 8006082:	7019      	strb	r1, [r3, #0]
 8006084:	4608      	mov	r0, r1
 8006086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800608a:	4770      	bx	lr

0800608c <__sfputs_r>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	4606      	mov	r6, r0
 8006090:	460f      	mov	r7, r1
 8006092:	4614      	mov	r4, r2
 8006094:	18d5      	adds	r5, r2, r3
 8006096:	42ac      	cmp	r4, r5
 8006098:	d101      	bne.n	800609e <__sfputs_r+0x12>
 800609a:	2000      	movs	r0, #0
 800609c:	e007      	b.n	80060ae <__sfputs_r+0x22>
 800609e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a2:	463a      	mov	r2, r7
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff ffda 	bl	800605e <__sfputc_r>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d1f3      	bne.n	8006096 <__sfputs_r+0xa>
 80060ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060b0 <_vfiprintf_r>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	460d      	mov	r5, r1
 80060b6:	b09d      	sub	sp, #116	@ 0x74
 80060b8:	4614      	mov	r4, r2
 80060ba:	4698      	mov	r8, r3
 80060bc:	4606      	mov	r6, r0
 80060be:	b118      	cbz	r0, 80060c8 <_vfiprintf_r+0x18>
 80060c0:	6a03      	ldr	r3, [r0, #32]
 80060c2:	b90b      	cbnz	r3, 80060c8 <_vfiprintf_r+0x18>
 80060c4:	f7fe f904 	bl	80042d0 <__sinit>
 80060c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060ca:	07d9      	lsls	r1, r3, #31
 80060cc:	d405      	bmi.n	80060da <_vfiprintf_r+0x2a>
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	059a      	lsls	r2, r3, #22
 80060d2:	d402      	bmi.n	80060da <_vfiprintf_r+0x2a>
 80060d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060d6:	f7fe fa12 	bl	80044fe <__retarget_lock_acquire_recursive>
 80060da:	89ab      	ldrh	r3, [r5, #12]
 80060dc:	071b      	lsls	r3, r3, #28
 80060de:	d501      	bpl.n	80060e4 <_vfiprintf_r+0x34>
 80060e0:	692b      	ldr	r3, [r5, #16]
 80060e2:	b99b      	cbnz	r3, 800610c <_vfiprintf_r+0x5c>
 80060e4:	4629      	mov	r1, r5
 80060e6:	4630      	mov	r0, r6
 80060e8:	f000 f938 	bl	800635c <__swsetup_r>
 80060ec:	b170      	cbz	r0, 800610c <_vfiprintf_r+0x5c>
 80060ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060f0:	07dc      	lsls	r4, r3, #31
 80060f2:	d504      	bpl.n	80060fe <_vfiprintf_r+0x4e>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	b01d      	add	sp, #116	@ 0x74
 80060fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	0598      	lsls	r0, r3, #22
 8006102:	d4f7      	bmi.n	80060f4 <_vfiprintf_r+0x44>
 8006104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006106:	f7fe f9fb 	bl	8004500 <__retarget_lock_release_recursive>
 800610a:	e7f3      	b.n	80060f4 <_vfiprintf_r+0x44>
 800610c:	2300      	movs	r3, #0
 800610e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006110:	2320      	movs	r3, #32
 8006112:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006116:	f8cd 800c 	str.w	r8, [sp, #12]
 800611a:	2330      	movs	r3, #48	@ 0x30
 800611c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062cc <_vfiprintf_r+0x21c>
 8006120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006124:	f04f 0901 	mov.w	r9, #1
 8006128:	4623      	mov	r3, r4
 800612a:	469a      	mov	sl, r3
 800612c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006130:	b10a      	cbz	r2, 8006136 <_vfiprintf_r+0x86>
 8006132:	2a25      	cmp	r2, #37	@ 0x25
 8006134:	d1f9      	bne.n	800612a <_vfiprintf_r+0x7a>
 8006136:	ebba 0b04 	subs.w	fp, sl, r4
 800613a:	d00b      	beq.n	8006154 <_vfiprintf_r+0xa4>
 800613c:	465b      	mov	r3, fp
 800613e:	4622      	mov	r2, r4
 8006140:	4629      	mov	r1, r5
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffa2 	bl	800608c <__sfputs_r>
 8006148:	3001      	adds	r0, #1
 800614a:	f000 80a7 	beq.w	800629c <_vfiprintf_r+0x1ec>
 800614e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006150:	445a      	add	r2, fp
 8006152:	9209      	str	r2, [sp, #36]	@ 0x24
 8006154:	f89a 3000 	ldrb.w	r3, [sl]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 809f 	beq.w	800629c <_vfiprintf_r+0x1ec>
 800615e:	2300      	movs	r3, #0
 8006160:	f04f 32ff 	mov.w	r2, #4294967295
 8006164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006168:	f10a 0a01 	add.w	sl, sl, #1
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006174:	931a      	str	r3, [sp, #104]	@ 0x68
 8006176:	4654      	mov	r4, sl
 8006178:	2205      	movs	r2, #5
 800617a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617e:	4853      	ldr	r0, [pc, #332]	@ (80062cc <_vfiprintf_r+0x21c>)
 8006180:	f7fa f84e 	bl	8000220 <memchr>
 8006184:	9a04      	ldr	r2, [sp, #16]
 8006186:	b9d8      	cbnz	r0, 80061c0 <_vfiprintf_r+0x110>
 8006188:	06d1      	lsls	r1, r2, #27
 800618a:	bf44      	itt	mi
 800618c:	2320      	movmi	r3, #32
 800618e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006192:	0713      	lsls	r3, r2, #28
 8006194:	bf44      	itt	mi
 8006196:	232b      	movmi	r3, #43	@ 0x2b
 8006198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800619c:	f89a 3000 	ldrb.w	r3, [sl]
 80061a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a2:	d015      	beq.n	80061d0 <_vfiprintf_r+0x120>
 80061a4:	9a07      	ldr	r2, [sp, #28]
 80061a6:	4654      	mov	r4, sl
 80061a8:	2000      	movs	r0, #0
 80061aa:	f04f 0c0a 	mov.w	ip, #10
 80061ae:	4621      	mov	r1, r4
 80061b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b4:	3b30      	subs	r3, #48	@ 0x30
 80061b6:	2b09      	cmp	r3, #9
 80061b8:	d94b      	bls.n	8006252 <_vfiprintf_r+0x1a2>
 80061ba:	b1b0      	cbz	r0, 80061ea <_vfiprintf_r+0x13a>
 80061bc:	9207      	str	r2, [sp, #28]
 80061be:	e014      	b.n	80061ea <_vfiprintf_r+0x13a>
 80061c0:	eba0 0308 	sub.w	r3, r0, r8
 80061c4:	fa09 f303 	lsl.w	r3, r9, r3
 80061c8:	4313      	orrs	r3, r2
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	46a2      	mov	sl, r4
 80061ce:	e7d2      	b.n	8006176 <_vfiprintf_r+0xc6>
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	1d19      	adds	r1, r3, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	9103      	str	r1, [sp, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bfbb      	ittet	lt
 80061dc:	425b      	neglt	r3, r3
 80061de:	f042 0202 	orrlt.w	r2, r2, #2
 80061e2:	9307      	strge	r3, [sp, #28]
 80061e4:	9307      	strlt	r3, [sp, #28]
 80061e6:	bfb8      	it	lt
 80061e8:	9204      	strlt	r2, [sp, #16]
 80061ea:	7823      	ldrb	r3, [r4, #0]
 80061ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ee:	d10a      	bne.n	8006206 <_vfiprintf_r+0x156>
 80061f0:	7863      	ldrb	r3, [r4, #1]
 80061f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061f4:	d132      	bne.n	800625c <_vfiprintf_r+0x1ac>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	1d1a      	adds	r2, r3, #4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	9203      	str	r2, [sp, #12]
 80061fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006202:	3402      	adds	r4, #2
 8006204:	9305      	str	r3, [sp, #20]
 8006206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062dc <_vfiprintf_r+0x22c>
 800620a:	7821      	ldrb	r1, [r4, #0]
 800620c:	2203      	movs	r2, #3
 800620e:	4650      	mov	r0, sl
 8006210:	f7fa f806 	bl	8000220 <memchr>
 8006214:	b138      	cbz	r0, 8006226 <_vfiprintf_r+0x176>
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	eba0 000a 	sub.w	r0, r0, sl
 800621c:	2240      	movs	r2, #64	@ 0x40
 800621e:	4082      	lsls	r2, r0
 8006220:	4313      	orrs	r3, r2
 8006222:	3401      	adds	r4, #1
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622a:	4829      	ldr	r0, [pc, #164]	@ (80062d0 <_vfiprintf_r+0x220>)
 800622c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006230:	2206      	movs	r2, #6
 8006232:	f7f9 fff5 	bl	8000220 <memchr>
 8006236:	2800      	cmp	r0, #0
 8006238:	d03f      	beq.n	80062ba <_vfiprintf_r+0x20a>
 800623a:	4b26      	ldr	r3, [pc, #152]	@ (80062d4 <_vfiprintf_r+0x224>)
 800623c:	bb1b      	cbnz	r3, 8006286 <_vfiprintf_r+0x1d6>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	3307      	adds	r3, #7
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	3308      	adds	r3, #8
 8006248:	9303      	str	r3, [sp, #12]
 800624a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800624c:	443b      	add	r3, r7
 800624e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006250:	e76a      	b.n	8006128 <_vfiprintf_r+0x78>
 8006252:	fb0c 3202 	mla	r2, ip, r2, r3
 8006256:	460c      	mov	r4, r1
 8006258:	2001      	movs	r0, #1
 800625a:	e7a8      	b.n	80061ae <_vfiprintf_r+0xfe>
 800625c:	2300      	movs	r3, #0
 800625e:	3401      	adds	r4, #1
 8006260:	9305      	str	r3, [sp, #20]
 8006262:	4619      	mov	r1, r3
 8006264:	f04f 0c0a 	mov.w	ip, #10
 8006268:	4620      	mov	r0, r4
 800626a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626e:	3a30      	subs	r2, #48	@ 0x30
 8006270:	2a09      	cmp	r2, #9
 8006272:	d903      	bls.n	800627c <_vfiprintf_r+0x1cc>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0c6      	beq.n	8006206 <_vfiprintf_r+0x156>
 8006278:	9105      	str	r1, [sp, #20]
 800627a:	e7c4      	b.n	8006206 <_vfiprintf_r+0x156>
 800627c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006280:	4604      	mov	r4, r0
 8006282:	2301      	movs	r3, #1
 8006284:	e7f0      	b.n	8006268 <_vfiprintf_r+0x1b8>
 8006286:	ab03      	add	r3, sp, #12
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	462a      	mov	r2, r5
 800628c:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <_vfiprintf_r+0x228>)
 800628e:	a904      	add	r1, sp, #16
 8006290:	4630      	mov	r0, r6
 8006292:	f7fd fbd9 	bl	8003a48 <_printf_float>
 8006296:	4607      	mov	r7, r0
 8006298:	1c78      	adds	r0, r7, #1
 800629a:	d1d6      	bne.n	800624a <_vfiprintf_r+0x19a>
 800629c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_vfiprintf_r+0x1fe>
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	059a      	lsls	r2, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_vfiprintf_r+0x1fe>
 80062a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062aa:	f7fe f929 	bl	8004500 <__retarget_lock_release_recursive>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	065b      	lsls	r3, r3, #25
 80062b2:	f53f af1f 	bmi.w	80060f4 <_vfiprintf_r+0x44>
 80062b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062b8:	e71e      	b.n	80060f8 <_vfiprintf_r+0x48>
 80062ba:	ab03      	add	r3, sp, #12
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	462a      	mov	r2, r5
 80062c0:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <_vfiprintf_r+0x228>)
 80062c2:	a904      	add	r1, sp, #16
 80062c4:	4630      	mov	r0, r6
 80062c6:	f7fd fe57 	bl	8003f78 <_printf_i>
 80062ca:	e7e4      	b.n	8006296 <_vfiprintf_r+0x1e6>
 80062cc:	08006898 	.word	0x08006898
 80062d0:	080068a2 	.word	0x080068a2
 80062d4:	08003a49 	.word	0x08003a49
 80062d8:	0800608d 	.word	0x0800608d
 80062dc:	0800689e 	.word	0x0800689e

080062e0 <__swbuf_r>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	460e      	mov	r6, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	4605      	mov	r5, r0
 80062e8:	b118      	cbz	r0, 80062f2 <__swbuf_r+0x12>
 80062ea:	6a03      	ldr	r3, [r0, #32]
 80062ec:	b90b      	cbnz	r3, 80062f2 <__swbuf_r+0x12>
 80062ee:	f7fd ffef 	bl	80042d0 <__sinit>
 80062f2:	69a3      	ldr	r3, [r4, #24]
 80062f4:	60a3      	str	r3, [r4, #8]
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	071a      	lsls	r2, r3, #28
 80062fa:	d501      	bpl.n	8006300 <__swbuf_r+0x20>
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	b943      	cbnz	r3, 8006312 <__swbuf_r+0x32>
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f82a 	bl	800635c <__swsetup_r>
 8006308:	b118      	cbz	r0, 8006312 <__swbuf_r+0x32>
 800630a:	f04f 37ff 	mov.w	r7, #4294967295
 800630e:	4638      	mov	r0, r7
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	1a98      	subs	r0, r3, r2
 8006318:	6963      	ldr	r3, [r4, #20]
 800631a:	b2f6      	uxtb	r6, r6
 800631c:	4283      	cmp	r3, r0
 800631e:	4637      	mov	r7, r6
 8006320:	dc05      	bgt.n	800632e <__swbuf_r+0x4e>
 8006322:	4621      	mov	r1, r4
 8006324:	4628      	mov	r0, r5
 8006326:	f7ff fd99 	bl	8005e5c <_fflush_r>
 800632a:	2800      	cmp	r0, #0
 800632c:	d1ed      	bne.n	800630a <__swbuf_r+0x2a>
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	3b01      	subs	r3, #1
 8006332:	60a3      	str	r3, [r4, #8]
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	701e      	strb	r6, [r3, #0]
 800633c:	6962      	ldr	r2, [r4, #20]
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	429a      	cmp	r2, r3
 8006342:	d004      	beq.n	800634e <__swbuf_r+0x6e>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	07db      	lsls	r3, r3, #31
 8006348:	d5e1      	bpl.n	800630e <__swbuf_r+0x2e>
 800634a:	2e0a      	cmp	r6, #10
 800634c:	d1df      	bne.n	800630e <__swbuf_r+0x2e>
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f7ff fd83 	bl	8005e5c <_fflush_r>
 8006356:	2800      	cmp	r0, #0
 8006358:	d0d9      	beq.n	800630e <__swbuf_r+0x2e>
 800635a:	e7d6      	b.n	800630a <__swbuf_r+0x2a>

0800635c <__swsetup_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4b29      	ldr	r3, [pc, #164]	@ (8006404 <__swsetup_r+0xa8>)
 8006360:	4605      	mov	r5, r0
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	460c      	mov	r4, r1
 8006366:	b118      	cbz	r0, 8006370 <__swsetup_r+0x14>
 8006368:	6a03      	ldr	r3, [r0, #32]
 800636a:	b90b      	cbnz	r3, 8006370 <__swsetup_r+0x14>
 800636c:	f7fd ffb0 	bl	80042d0 <__sinit>
 8006370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006374:	0719      	lsls	r1, r3, #28
 8006376:	d422      	bmi.n	80063be <__swsetup_r+0x62>
 8006378:	06da      	lsls	r2, r3, #27
 800637a:	d407      	bmi.n	800638c <__swsetup_r+0x30>
 800637c:	2209      	movs	r2, #9
 800637e:	602a      	str	r2, [r5, #0]
 8006380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006384:	81a3      	strh	r3, [r4, #12]
 8006386:	f04f 30ff 	mov.w	r0, #4294967295
 800638a:	e033      	b.n	80063f4 <__swsetup_r+0x98>
 800638c:	0758      	lsls	r0, r3, #29
 800638e:	d512      	bpl.n	80063b6 <__swsetup_r+0x5a>
 8006390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006392:	b141      	cbz	r1, 80063a6 <__swsetup_r+0x4a>
 8006394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <__swsetup_r+0x46>
 800639c:	4628      	mov	r0, r5
 800639e:	f7fe feff 	bl	80051a0 <_free_r>
 80063a2:	2300      	movs	r3, #0
 80063a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	2300      	movs	r3, #0
 80063b0:	6063      	str	r3, [r4, #4]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f043 0308 	orr.w	r3, r3, #8
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	b94b      	cbnz	r3, 80063d6 <__swsetup_r+0x7a>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063cc:	d003      	beq.n	80063d6 <__swsetup_r+0x7a>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 f883 	bl	80064dc <__smakebuf_r>
 80063d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063da:	f013 0201 	ands.w	r2, r3, #1
 80063de:	d00a      	beq.n	80063f6 <__swsetup_r+0x9a>
 80063e0:	2200      	movs	r2, #0
 80063e2:	60a2      	str	r2, [r4, #8]
 80063e4:	6962      	ldr	r2, [r4, #20]
 80063e6:	4252      	negs	r2, r2
 80063e8:	61a2      	str	r2, [r4, #24]
 80063ea:	6922      	ldr	r2, [r4, #16]
 80063ec:	b942      	cbnz	r2, 8006400 <__swsetup_r+0xa4>
 80063ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063f2:	d1c5      	bne.n	8006380 <__swsetup_r+0x24>
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	0799      	lsls	r1, r3, #30
 80063f8:	bf58      	it	pl
 80063fa:	6962      	ldrpl	r2, [r4, #20]
 80063fc:	60a2      	str	r2, [r4, #8]
 80063fe:	e7f4      	b.n	80063ea <__swsetup_r+0x8e>
 8006400:	2000      	movs	r0, #0
 8006402:	e7f7      	b.n	80063f4 <__swsetup_r+0x98>
 8006404:	20000018 	.word	0x20000018

08006408 <_raise_r>:
 8006408:	291f      	cmp	r1, #31
 800640a:	b538      	push	{r3, r4, r5, lr}
 800640c:	4605      	mov	r5, r0
 800640e:	460c      	mov	r4, r1
 8006410:	d904      	bls.n	800641c <_raise_r+0x14>
 8006412:	2316      	movs	r3, #22
 8006414:	6003      	str	r3, [r0, #0]
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800641e:	b112      	cbz	r2, 8006426 <_raise_r+0x1e>
 8006420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006424:	b94b      	cbnz	r3, 800643a <_raise_r+0x32>
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f830 	bl	800648c <_getpid_r>
 800642c:	4622      	mov	r2, r4
 800642e:	4601      	mov	r1, r0
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006436:	f000 b817 	b.w	8006468 <_kill_r>
 800643a:	2b01      	cmp	r3, #1
 800643c:	d00a      	beq.n	8006454 <_raise_r+0x4c>
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	d103      	bne.n	800644a <_raise_r+0x42>
 8006442:	2316      	movs	r3, #22
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	2001      	movs	r0, #1
 8006448:	e7e7      	b.n	800641a <_raise_r+0x12>
 800644a:	2100      	movs	r1, #0
 800644c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006450:	4620      	mov	r0, r4
 8006452:	4798      	blx	r3
 8006454:	2000      	movs	r0, #0
 8006456:	e7e0      	b.n	800641a <_raise_r+0x12>

08006458 <raise>:
 8006458:	4b02      	ldr	r3, [pc, #8]	@ (8006464 <raise+0xc>)
 800645a:	4601      	mov	r1, r0
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	f7ff bfd3 	b.w	8006408 <_raise_r>
 8006462:	bf00      	nop
 8006464:	20000018 	.word	0x20000018

08006468 <_kill_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d07      	ldr	r5, [pc, #28]	@ (8006488 <_kill_r+0x20>)
 800646c:	2300      	movs	r3, #0
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	f7fa ff86 	bl	8001386 <_kill>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d102      	bne.n	8006484 <_kill_r+0x1c>
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	b103      	cbz	r3, 8006484 <_kill_r+0x1c>
 8006482:	6023      	str	r3, [r4, #0]
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	bf00      	nop
 8006488:	200003c8 	.word	0x200003c8

0800648c <_getpid_r>:
 800648c:	f7fa bf73 	b.w	8001376 <_getpid>

08006490 <__swhatbuf_r>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	460c      	mov	r4, r1
 8006494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006498:	2900      	cmp	r1, #0
 800649a:	b096      	sub	sp, #88	@ 0x58
 800649c:	4615      	mov	r5, r2
 800649e:	461e      	mov	r6, r3
 80064a0:	da0d      	bge.n	80064be <__swhatbuf_r+0x2e>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	bf14      	ite	ne
 80064ae:	2340      	movne	r3, #64	@ 0x40
 80064b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064b4:	2000      	movs	r0, #0
 80064b6:	6031      	str	r1, [r6, #0]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	b016      	add	sp, #88	@ 0x58
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	466a      	mov	r2, sp
 80064c0:	f000 f848 	bl	8006554 <_fstat_r>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	dbec      	blt.n	80064a2 <__swhatbuf_r+0x12>
 80064c8:	9901      	ldr	r1, [sp, #4]
 80064ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064d2:	4259      	negs	r1, r3
 80064d4:	4159      	adcs	r1, r3
 80064d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064da:	e7eb      	b.n	80064b4 <__swhatbuf_r+0x24>

080064dc <__smakebuf_r>:
 80064dc:	898b      	ldrh	r3, [r1, #12]
 80064de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064e0:	079d      	lsls	r5, r3, #30
 80064e2:	4606      	mov	r6, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	d507      	bpl.n	80064f8 <__smakebuf_r+0x1c>
 80064e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	2301      	movs	r3, #1
 80064f2:	6163      	str	r3, [r4, #20]
 80064f4:	b003      	add	sp, #12
 80064f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f8:	ab01      	add	r3, sp, #4
 80064fa:	466a      	mov	r2, sp
 80064fc:	f7ff ffc8 	bl	8006490 <__swhatbuf_r>
 8006500:	9f00      	ldr	r7, [sp, #0]
 8006502:	4605      	mov	r5, r0
 8006504:	4639      	mov	r1, r7
 8006506:	4630      	mov	r0, r6
 8006508:	f7fe febe 	bl	8005288 <_malloc_r>
 800650c:	b948      	cbnz	r0, 8006522 <__smakebuf_r+0x46>
 800650e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006512:	059a      	lsls	r2, r3, #22
 8006514:	d4ee      	bmi.n	80064f4 <__smakebuf_r+0x18>
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	f043 0302 	orr.w	r3, r3, #2
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	e7e2      	b.n	80064e8 <__smakebuf_r+0xc>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	6020      	str	r0, [r4, #0]
 8006526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	9b01      	ldr	r3, [sp, #4]
 800652e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006532:	b15b      	cbz	r3, 800654c <__smakebuf_r+0x70>
 8006534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f81d 	bl	8006578 <_isatty_r>
 800653e:	b128      	cbz	r0, 800654c <__smakebuf_r+0x70>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	431d      	orrs	r5, r3
 8006550:	81a5      	strh	r5, [r4, #12]
 8006552:	e7cf      	b.n	80064f4 <__smakebuf_r+0x18>

08006554 <_fstat_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	@ (8006574 <_fstat_r+0x20>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	4611      	mov	r1, r2
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	f7fa ff70 	bl	8001446 <_fstat>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d102      	bne.n	8006570 <_fstat_r+0x1c>
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	b103      	cbz	r3, 8006570 <_fstat_r+0x1c>
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	bf00      	nop
 8006574:	200003c8 	.word	0x200003c8

08006578 <_isatty_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d06      	ldr	r5, [pc, #24]	@ (8006594 <_isatty_r+0x1c>)
 800657c:	2300      	movs	r3, #0
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	f7fa ff6f 	bl	8001466 <_isatty>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_isatty_r+0x1a>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_isatty_r+0x1a>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	200003c8 	.word	0x200003c8

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
